/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
A widget to display array data in a tree view
*/

widget com.livecode.livecode.treeView

use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine

metadata author is "LiveCode"
metadata version is "1.0.0"
metadata title is "Tree View"

-- property declarations
property arrayData 					get getArrayData 				set setArrayData
property alternateRowBackgrounds 	get mAlternateRowBackgrounds 	set setRowBackgrounds
property selectedElement			get getSelectedElement			set setSelectedElement

-- private instance variables
private variable mData as Array
private variable mDataList as List
private variable mDataCount as Integer
private variable mDataHeight as Real
private variable mRowHeight as Real
private variable mViewHeight as Real
private variable mViewWidth as Real
private variable mDataTravel as Real
private variable mViewTopPosition as Real
private variable mFirstDataItem as Integer
private variable mMargin as Real
private variable mRecalculate as Boolean
private variable mAlternateRowBackgrounds as Boolean
private variable mIndentPixels as Integer
private variable mHoverRow as Integer

private variable mSelectedElement as optional List

private variable mArrowWidth as optional Real
private variable mFoldedArrowPath as Path
private variable mUnfoldedArrowPath as Path

private variable mScrollbarHeight as Real

// Drag related 
private variable mDragging as Boolean
private variable mDragStartLoc as Point

// Temporary - folds and unfolds randomly
private handler __convertArrayToList(in pArray as Array, in pLevel as Integer, in pPath as List) returns List
	variable tList as List
	put the empty list into tList
	
	variable tKeys as List
	put the keys of pArray into tKeys
	sort tKeys in ascending order
	
	variable tKey as String
	variable tElement as Array
	
	repeat for each element tKey in tKeys
		put the empty array into tElement
		put tKey into tElement["key"]
		put pLevel into tElement["indent"]
		put false into tElement["selected"]
		put any number < 0.5 into tElement["folded"]	
		variable tPath as List
		put pPath into tPath
		push tKey onto tPath	
		put tPath into tElement["path"]
		if pArray[tKey] is an array then
			put false into tElement["leaf"]
			push tElement onto tList
			if not tElement["folded"] then
				splice __convertArrayToList(pArray[tKey], pLevel + 1, tPath) after element -1 of tList
			end if
		else
			put true into tElement["leaf"]
			if pArray[tKey] is a string then
				put pArray[tKey] into tElement["string_value"]
			else
				variable tString as optional String
				format pArray[tKey] as string into tString
				if tString is not defined then
					put "Can't display value" into tString
				end if
				put tString into tElement["string_value"]
			end if	
			put pArray[tKey] into tElement["value"]
			push tElement onto tList
		end if	
	end repeat
	
	return tList
end handler

--------------------------------------------------------------------------------
--
--		Message handlers
--
--------------------------------------------------------------------------------

public handler OnCreate() returns nothing
	variable tArray as Array
	put the empty array into tArray
	put the empty list into mDataList

	variable tRandom as Real
	variable tCount as Integer
	variable tTopKey as String
	put 0 into tCount
	repeat 100 times
		add 1 to tCount
		put "Key" & tCount formatted as string into tTopKey
		
		put any number into tRandom
		if tRandom < 0.33 then
			put "Some Data" into tArray[tTopKey]
		else if tRandom < 0.67 then
			put "Some other data" into tArray[tTopKey]
		else
			put "Some more data" into tArray[tTopKey]
		end if	
		
		-- Make sure there is some nested stuff
		put the ceiling of (any number * 100) into tRandom
		if tCount > tRandom then
			variable tNewArray as Array
			put the empty array into tNewArray
			put tArray["Key" & tRandom formatted as string] into tNewArray["Key" & tRandom formatted as string]
			put tNewArray into tArray[tTopKey]
		end if
	end repeat

	
	put tArray into mData
	
	put __convertArrayToList(tArray, 0, the empty list) into mDataList

	put 0 into mHoverRow
	put 0 into mViewTopPosition
	
	initialiseConstants()
end handler

public handler OnPaint() returns nothing

	variable tCheckTextCache
	if mRecalculate then
		put false into tCheckTextCache
		updateParameters()
	else
		put true into tCheckTextCache
	end if

	variable tTop as Real
	variable tPath as Path
	variable tLeft as Real
	
	put mDataHeight - mViewHeight into mDataTravel
	if mDataTravel < 0 then
		put 0 into mDataTravel
	end if
	if mViewTopPosition > mDataTravel then
		put mDataTravel into mViewTopPosition
	end if
	
	put 0 into tTop
	
	put the height of my bounds into mViewHeight
	put the width of my bounds into mViewWidth
	
	variable tDataItem as Array
	put the empty array into tDataItem
	
	variable tX as Integer
	put 1 into tX
	
	put the floor of mViewTopPosition / mRowHeight into mFirstDataItem
	if mFirstDataItem < 1 then
		put 1 into mFirstDataItem
	end if
	
	variable tTopOffset
	put mViewTopPosition mod mRowHeight into tTopOffset
	subtract tTopOffset from tTop	

	repeat with tX from mFirstDataItem up to the number of elements in mDataList
		put element tX of mDataList into tDataItem
		
		variable tStyle as String
		put "" into tStyle
		//if tDataItem["selected"] is true then 
			//put "_selected" into tStyle
		//end if
		
		if tX is mHoverRow then
			put "_hover" into tStyle
		end if	
		
		// Draw Background
		if mAlternateRowBackgrounds is true then
		   put rectangle path of rectangle [0,tTop,mViewWidth,tTop+mRowHeight] into tPath

		   if tX mod 2 is 1 then
			   set the paint of this canvas to getPaint("background","fill" & tStyle)
		   else
			   set the paint of this canvas to getPaint("background","fill_alternate" & tStyle)
		   end if	
		   fill tPath on this canvas
		end if
		
		put mMargin + (tDataItem["indent"] * mIndentPixels) into tLeft
		
		// Draw arrow
		if not tDataItem["leaf"] then
			if tDataItem["folded"] is true then
				put mFoldedArrowPath into tPath
			else
				put mUnfoldedArrowPath into tPath	
			end if
			translate tPath by [tLeft,tTop+(mRowHeight/2)-((the height of the bounding box of tPath)/2)]
			set the paint of this canvas to getPaint("text","fill" & tStyle)
			fill tPath on this canvas
		end if
		add mArrowWidth + mMargin to tLeft
		
		// Draw the key
		set the paint of this canvas to getPaint("text","disabled" & tStyle)
		fill text "[" & tDataItem["key"] & "]" at left of rectangle [tLeft,tTop,mViewWidth-mMargin-15,tTop+mRowHeight] on this canvas
		
		// Check the key rect cache
		variable tTextBounds as Rectangle
		if not tCheckTextCache or "keyRect" is not among the keys of tDataItem then
			measure "[" & tDataItem["key"] & "]" on this canvas
			put the result into tTextBounds
			put tTextBounds into tDataItem["keyRect"]
		else
			put tDataItem["keyRect"] into tTextBounds
		end if

		add the width of tTextBounds + mMargin to tLeft
		
		if tDataItem["leaf"] then
			set the paint of this canvas to getPaint("text","fill" & tStyle)
			fill text tDataItem["string_value"] at left of rectangle [tLeft,tTop,mViewWidth-mMargin-15,tTop+mRowHeight] on this canvas
		end if
		
		if tTop > mViewHeight then
			exit repeat
		end if
		add mRowHeight to tTop
	end repeat

	// Draw scrollbar if there is any need
	if mScrollbarHeight > 0 then
		put rounded rectangle path of scrollbarRect() with radius 3 into tPath
		set the paint of this canvas to getPaint("scrollbar", "fill")
		fill tPath on this canvas	
	end if
	
end handler

public handler OnMouseDown() returns nothing
	put the mouse position into mDragStartLoc
	
	if mDragStartLoc is within scrollbarRect() then
		put true into mDragging
	end if
end handler

public handler onMouseMove() returns nothing
	if mDragging is true then		
		// Get the scrollbar position ratio
		variable tScrollPositionRatio as Real
		put mViewTopPosition / mDataTravel into tScrollPositionRatio
	
		// Get the scrollbar space
		variable tScrollbarSpace as Real
		variable tScrollbarSpaceTop as Real
		put mViewHeight - mScrollbarHeight into tScrollbarSpace
		
		// Get the mouse y position
		variable tMouseY as Real
		put the y of the mouse position into tMouseY
		
		if tMouseY < 0 then
			put 0 into tMouseY
		end if
		
		// Calculate the new top position of list
		put tMouseY / tScrollbarSpace into tScrollPositionRatio
		put mDataTravel * tScrollPositionRatio into mViewTopPosition
	
		if mViewTopPosition < 0 then 
			put 0 into mViewTopPosition
		end if
	
		redraw all
	else
		put yPosToRowNumber(the y of the mouse position) into mHoverRow
		redraw all
	end if
end handler

public handler onMouseLeave() returns nothing
	put 0 into mHoverRow
	redraw all
end handler

public handler OnMouseUp() returns nothing
	if mDragging is true then
		redraw all
	end if
	put false into mDragging
end handler

public handler OnMouseCancel() returns nothing
	if mDragging is true then
		redraw all
	end if
	put false into mDragging
end handler

public handler OnMouseScroll(in pDeltaX as Real, in pDeltaY as Real) returns nothing
	if pDeltaY < 0 then
		subtract mRowHeight from mViewTopPosition
	else
		add mRowHeight to mViewTopPosition
	end if
	if mViewTopPosition < 0 then 
		put 0 into mViewTopPosition
	end if
	redraw all
end handler

public handler onClick(pXPos,pYPos,pButtonNumber,pCount) returns nothing
	variable tRowNumber
	put yPosToRowNumber(the y of the current click position) into tRowNumber
	
	variable tData as Array
	put the empty array into tData
	
	put element tRowNumber of mDataList into tData
	

	if tData["leaf"] is not true then
	   //if pCount is 1 then
		   //if tData["selected"] is true then
			   //deselectKey(tData["path"])
		   //else
			   //selectKey(tData["path"])
		   //end if
	   //else if pCount > 1 then
		   if tData["folded"] is true then
			   unfoldPath(tData["path"])
		   else
			   foldPath(tData["path"])
		   end if
	   //end if
	end if
end handler

private handler yPosToRowNumber(in pYPos as Number) returns Integer
	return the trunc of (pYPos / mRowHeight) + mFirstDataItem
end handler

--------------------------------------------------------------------------------
--
--		Display calculations
--
--------------------------------------------------------------------------------

private handler updateParameters() returns nothing
	
	if mArrowWidth is not defined then
		variable tTextBounds as Rectangle
		set the font of this canvas to font getFontName() at size 12
	
		// Work out the width of the arrow
		variable tArrowWidth as Number
		put the width of the bounding box of mFoldedArrowPath into mArrowWidth
	end if

	put the number of elements in mDataList into mDataCount
	put mRowHeight * mDataCount into mDataHeight
	put the height of my bounds into mViewHeight
	put the width of my bounds into mViewWidth
	put mViewWidth * 0.05 into mMargin
	if mMargin > 20 then
		put 20 into mMargin
	else if mMargin < 5 then
		put 5 into mMargin
	end if
	put mDataHeight - mViewHeight into mDataTravel
	if mDataTravel < 0 then
		put 0 into mDataTravel
	end if	
	
	// Calculate scrollbar dimensions
	put scrollbarHeight() into mScrollbarHeight	
	
	put false into mRecalculate
end handler

private handler initialiseConstants() returns nothing
	put path "M0,7.421V0.21c0-0.168,0.188-0.268,0.327-0.174l5.351,3.605c0.124,0.083,0.124,0.265,0,0.348L0.327,7.595 C0.188,7.689,0,7.589,0,7.421z" into mFoldedArrowPath

	put path "M0.221,0l7.565,0c0.177,0,0.281,0.188,0.183,0.327L4.186,5.679c-0.087,0.124-0.278,0.124-0.366,0L0.038,0.327 C-0.061,0.188,0.044,0,0.221,0z" into mUnfoldedArrowPath

	put true into mRecalculate
	put 21 into mRowHeight
	put false into mDragging
	put true into mAlternateRowBackgrounds
	put 6 into mMargin
	put 15 into mIndentPixels
end handler

private handler scrollbarRect() returns Rectangle
	variable tScrollPositionRatio as Real
	put mViewTopPosition / mDataTravel into tScrollPositionRatio
	
	variable tScrollbarSpace as Real
	variable tScrollbarY as Real
	put mViewHeight - mScrollbarHeight into tScrollbarSpace
	put tScrollbarSpace * tScrollPositionRatio into tScrollbarY

	return rectangle [mViewWidth-10,tScrollbarY,mViewWidth-5,tScrollbarY+mScrollbarHeight]
end handler

private handler scrollbarHeight() returns Real
	variable tScrollbarHeight as Real
	variable tScrollbarRatio as Real

	put mViewHeight / mDataHeight into tScrollbarRatio
	
	if tScrollbarRatio >= 1 or tScrollbarRatio <= 0 then 
		return 0
	end if
	
	put mViewHeight * tScrollbarRatio into tScrollbarHeight
	
	if tScrollbarHeight < 25 then
		return 25
	else
		return tScrollbarHeight
	end if
end handler

--------------------------------------------------------------------------------
--
--		Utilities for widget display
--
--------------------------------------------------------------------------------

private handler getPaint(pLocation, pType) returns Paint
	if pLocation is "background" then
		if pType is "fill" then
			return solid paint with stringToColor("255,255,255")
		else if pType is "fill_hover" then
			return solid paint with stringToColor("230,230,230")
		else if pType is "fill_selected" then
			return solid paint with stringToColor("255,0,0")
		else if pType is "fill_alternate" then
			return solid paint with stringToColor("245,245,245")
		else if pType is "fill_alternate_selected" then
			return solid paint with stringToColor("255,20,20")
		else if pType is "fill_alternate_hover" then
			return solid paint with stringToColor("210,210,210")
		else if pType is "stroke" then
			return solid paint with stringToColor("178,178,178")
		end if
	else if pLocation is "row" then
		if pType is "fill" then
			return solid paint with stringToColor("255,255,255")
		else if pType is "stroke" then
			return solid paint with stringToColor("200,199,204")
		end if
	else if pLocation is "text" then
		if pType is "fill" then
			return solid paint with stringToColor("0,0,0")
		else if pType is "fill_selected" then
			return solid paint with stringToColor("255,255,255")
		else if pType is "disabled_selected" then
			return solid paint with stringToColor("255,255,255,150")
		else if pType is "disabled" then
			return solid paint with stringToColor("0,0,0,150")
		else if pType is "selected-fill" then
			return solid paint with stringToColor("0,122,255")
		end if
	else if pLocation is "scrollbar" then
		if pType is "fill" then
			return solid paint with stringToColor("0,0,0,50")
		end if
	end if
	
	return solid paint with stringToColor("255,100,200")
end handler

private handler getFontName() returns String
	return "Helvetica Neue"
	
	return the name of the font of this canvas
end handler

private handler stringToColor(in pString as String) returns Color
	variable tRed as Real
	variable tGreen as Real
	variable tBlue as Real
	variable tAlpha as Real

	variable tComponentList as List
	split pString by "," into tComponentList

	variable tComponentCount
	put the number of elements in tComponentList into tComponentCount
	if tComponentCount is not 3 and tComponentCount is not 4 then
		// Invalid number of components detected
		throw "Invalid color"
	end if

	put (element 1 of tComponentList) parsed as number into tRed
	put (element 2 of tComponentList) parsed as number into tGreen
	put (element 3 of tComponentList) parsed as number into tBlue

	if tComponentCount is 4 then
		put (element 4 of tComponentList) parsed as number into tAlpha
	else
		put 255 into tAlpha
	end if

	return color [ tRed/255, tGreen/255, tBlue/255, tAlpha/255 ]
end handler

--------------------------------------------------------------------------------
--
--		Handlers for data management and array/list conversions
--
--------------------------------------------------------------------------------

// Given a 'path' of array keys as a list, and a value, create an array tArray such that
// 	the value of tArray[element 1 of pPath][element 2 of pPath]... is pValue
private handler convertPathToElement(in pPath as List, in pValue as any) returns Array
	variable tArray as Array
	put the empty array into tArray
	if the number of elements in pPath is 1 then
		put pValue into tArray[element 1 of pPath]
	else
		put convertPathToElement(element 2 to -1 of pPath, pValue) into tArray[element 1 of pPath]
	end if
	return tArray
end handler

// Convert a list, as used by the widget to an array.
// mData should always be the result of calling this on mDataList
private handler convertListToArray(in pList as List) returns Array
	variable tArray as Array
	put the empty array into tArray
	
	variable tElement as any
	repeat for each element tElement in pList
		if tElement["value"] is a list then
			put convertListToArray(tElement["value"]) into tArray[tElement["key"]]
		else
			put tElement["value"] into tArray[tElement["key"]]
		end if	
	end repeat
	
	return tArray
end handler

// Return the whole stored array
private handler getArrayData() returns Array
	return mData
end handler

// Convert an array to a list, as used by this widget. Ignoring the 'folded' parameter, 
// mDataList should always be the result of calling this on mData
private handler convertArrayToList(in pArray as Array, in pFolded as Boolean, in pLevel as Integer, in pPath as List) returns List

	variable tList as List
	put the empty list into tList
	
	variable tKeys as List
	put the keys of pArray into tKeys
	sort tKeys in ascending order
	
	variable tKey as String
	variable tElement as Array
	
	repeat for each element tKey in tKeys
		put the empty array into tElement
		put tKey into tElement["key"]
		put pLevel into tElement["indent"]
		put pFolded into tElement["folded"]
		put false into tElement["selected"]
		variable tPath as List
		put pPath into tPath
		push tKey onto tPath
		put tPath into tElement["path"]	
		if pArray[tKey] is an array then
			put false into tElement["leaf"]
			push tElement onto tList
			if not pFolded then
				// The sublist should always be folded by default
				splice convertArrayToList(pArray[tKey], true, pLevel + 1, tPath) after element -1 of tList
			end if
		else
			put true into tElement["leaf"]
			put pArray[tKey] into tElement["value"]
			
			if pArray[tKey] is a string then
				put pArray[tKey] into tElement["string_value"]
			else
				variable tString as optional String
				format pArray[tKey] as string into tString
				if tString is not defined then
					put "Can't display value" into tString
				end if
				put tString into tElement["string_value"]
			end if	

			push tElement onto tList
		end if	
	end repeat
	
	return tList
end handler

handler type NodeApply(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)

private handler unselectKey(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)
	put false into xList[pListElt]["selected"]
end handler

private handler selectKey(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)
	put true into xList[pListElt]["selected"]
end handler

private handler removeKey(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)
	delete element pListElt of xList
	delete xArray[element pLevel + 1 of pPath]
end handler

// To 'unfold', splice in the sublist
private handler unfoldKey(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)
	put false into xList[pListElt]["folded"]
	splice convertArrayToList(xArray[element pLevel + 1 of pPath], true, pLevel + 1, pPath) after element pListElt of xList	
end handler

// To 'fold', just delete everything in the list until the indent is the same as 'this'
private handler foldKey(in pListElt as Integer, in pPath as List, in pLevel as Integer, inout xList as List, inout xArray as Array)
	put true into xList[pListElt]["folded"]
	
	variable tIndent as Integer
	put xList[pListElt]["indent"] into tIndent
	
	variable tCount as Integer
	variable tLastSubElement as Integer
	repeat with tCount from pListElt + 1 up to the number of elements in xList
		if xList[tCount]["indent"] <= tIndent then
			put tCount - 1 into tLastSubElement
			exit repeat
		end if
		put tCount into tLastSubElement
	end repeat
	
	delete element pListElt + 1 to tLastSubElement of xList
end handler

// Simply delete the array key on the given path
private handler removePath(in pPath as List)
	applyToNode(removeKey, pPath, 0, 0, mDataList, mData)
	redraw all
end handler

// Unfold the key at the target path
private handler unfoldPath(in pPath as List)
	applyToNode(unfoldKey, pPath, 0, 0, mDataList, mData)
	redraw all
end handler

// Fold the key at the target path
private handler foldPath(in pPath as List)
	applyToNode(foldKey, pPath, 0, 0, mDataList, mData)
	redraw all
end handler

// Fold the key at the target path
private handler selectPath(in pPath as List)
	if mSelectedElement is not defined or mSelectedElement is not pPath then
		applyToNode(selectKey, pPath, 0, 0, mDataList, mData)
		post "selectedElementChanged" to my script object
		redraw all
	end if
end handler

// Fold the key at the target path
private handler unselectPath(in pPath as List)
	if mSelectedElement is defined and mSelectedElement is pPath then
		applyToNode(unselectKey, pPath, 0, 0, mDataList, mData)
		post "selectedElementChanged" to my script object
		redraw all
	end if
end handler

// Recursive implementation of performing an action to the node at the end of the given path. 
// Acts on a list (in the format used by this widget) and an array simultaneously.
// We are quite lax with checking here, since this will only be used internally 
// 	after a delete action happens, and so the element should exist by definition.
private handler applyToNode(in pHandler as NodeApply, in pPathToNode as List, in pLevel as Integer, in pStart as Integer, inout xList as List, inout xArray as Array)
	variable tKey as String
	put element pLevel + 1 of pPathToNode into tKey

	variable tCount as Integer
	variable tMatch as Integer
	variable tElement as Array
	repeat with tCount from pStart + 1 up to the number of elements in xList
		put xList[tCount] into tElement
		if tElement["key"] is tKey then
			put tCount into tMatch
			exit repeat
		end if	
	end repeat
	
	if tMatch is defined then
		if the number of elements in pPathToNode is pLevel + 1 then
			pHandler(tMatch, pPathToNode, pLevel, xList, xArray)
		else
			applyToNode(pHandler, pPathToNode, pLevel + 1, tMatch, xList, xArray[tKey])			
		end if
	end if
end handler

// Given a 'path' of array keys as a list, and a value, adjust the mDataList and mData variables
// 	to reflect the action of putting pValue into mData[element 1 of pPath][element 2 of pPath]...
private handler setDataOnPath(in pPath as List) returns nothing
	
	// pPath having 1 element is an error, as that means mData is just a string rather than an array
	if the number of elements in pPath is 1 then
		return
	end if
	
	// The last element of pPath is the actual value, the rest of it is the keys.
	variable tActualPath as List
	put element 1 to -2 of pPath into tActualPath
	
	variable tValue as String
	put element -1 of pPath into tValue
	
	// Simultaneously adjust the backing list and array to reflect the added value.
	setDataListOnPath(tActualPath, tValue, 0, mDataList, mData)

end handler

private handler setRowBackgrounds(in pShowAlternateBackgrounds as Boolean) returns nothing
	put pShowAlternateBackgrounds into mAlternateRowBackgrounds
	redraw all
end handler

// Recursive implementation of setting data on a given path. 
// Acts on a list (in the format used by this widget) and an array simultaneously.
private handler setDataListOnPath(in pPath as List, in pValue as any, in pLevel as Integer, inout xList as List, inout xArray as Array) returns nothing

	variable tElement as Array
	variable tCount as Integer
	variable tNewElement as Array
	
	repeat with tCount from 1 up to the number of elements in xList
		put element tCount of xList into tElement
		
		// The easy case - just insert the new element
		if tElement["key"] > element pLevel + 1 of pPath then
		
			// update the backing array
			put convertPathToElement(pPath, pValue) into tNewElement
			put tNewElement into xArray[element pLevel + 1 of pPath]
			
			// update the list
			splice convertArrayToList(tNewElement, false, pLevel, pPath) before element tCount of xList
			return
			
		// We already have a key for the start of this path
		else if tElement["key"] is element pLevel + 1 of pPath then
			// The new element replaces the old one if the new one is just a string...
			if the number of elements in pPath is pLevel + 1 then
				put convertPathToElement(element pLevel + 2 to -1 of pPath, pValue)into tNewElement	
				put tNewElement into xArray[element pLevel + 1 of pPath]
				put pValue into tElement["value"]
			// ...or if the old one was just as string.
			else if tElement["leaf"] then
				put convertPathToElement(element pLevel + 2 to -1 of pPath, pValue) into tNewElement
				splice convertArrayToList(tNewElement, false, pLevel, pPath) after element tCount of xList 
				put tNewElement into xArray[element pLevel + 1 of pPath]
			// Otherwise, go one step further into the path and set
			else
				setDataListOnPath(pPath, pValue, pLevel + 1, element tCount + 1 to -1 of xList, xArray[element pLevel + 1 of pPath])
			end if
			return
		end if
	end repeat
	
	// If we reached the end of the list then append this to the end
	put convertPathToElement(pPath, pValue) into tNewElement
	splice convertArrayToList(tNewElement, false, pLevel, pPath) after element -1 of xList
	put tNewElement into xArray[element 1 of pPath]
end handler

--------------------------------------------------------------------------------
--
--		Properties
--
--------------------------------------------------------------------------------

// Replace the existing data wholesale with a new array pData
private handler setArrayData(in pData as Array) returns nothing
	put pData into mData
	put convertArrayToList(pData, true, 0, the empty list) into mDataList	
	put true into mRecalculate
	redraw all
end handler

private handler setSelectedElement(in pElement as String)
	variable tPath as List
	split pElement by "," into tPath
	selectPath(tPath)
end handler

private handler getSelectedElement() returns String
	variable tElement as String
	if mSelectedElement is defined then
		combine mSelectedElement with "," into tElement
	else
		put the empty string into tElement
	end if
	return tElement
end handler

end widget