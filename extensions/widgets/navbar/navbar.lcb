/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This widget is a navigation bar.

Name: navitems
Type: property
Syntax: set the navitems of <widget> to <pNavItems>
Syntax: get the navitems of <widget>
Summary: Sets the navigation items

Parameters:
pNavItems: The navigation items.

Description:
Sets the navigation items from pNavItems, where pNavItems is a line delimited list of items, where each line is a comma delimited list of the
different components of the navigation item: name, label, icon, selected icon.

Name: selecteditem
Type: property
Syntax: set the selecteditem of <widget> to <pSelectedItem>
Syntax: get the selecteditem of <widget>

Summary: Sets the selected navigation item

Parameters:
pSelectedItem: The number of a nav item.

Description:
Selects a navigation item.
*/
-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.navbar
--

-- dependancy declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata author is "LiveCode"
metadata version is "1.0.2"
metadata title is "Navigation Bar"
--

-- property declarations
property navItems 		get getNavItems		set setNavItems
metadata navItems.editor is "com.livecode.pi.text"
metadata navItems.default is "contacts,Contacts,f007,f007\nfavourites,Favourites,f005,f006\nmusic,Music,f001,f001\nsearch,Search,f002,f002"

property selectedItem	get mSelectedItem 	set setNavSelectedItem
metadata selectedItem.default is "1"

property editMode get mEditMode set setEditMode

property itemStyle	get mItemStyle	set setItemStyle
metadata itemStyle.editor is "com.livecode.pi.enum"
metadata itemStyle.options is "icons,names,icons and names"
metadata itemStyle.default is "icons and names"

--

-- private instance variables
private variable mTheme as String
private variable mNavItems as List

private variable mSelectedItem as Integer
private variable mItemStyle as String

private variable mNavItemCount as Integer
private variable mBoxWidth as Real

private variable mWidth as Real
private variable mHeight as Real

private variable mRecalculate as Boolean

private variable mEditMode as Boolean
private variable mAddItem as Array

--

constant kDefaultIconSVG is "M1536 640q0 -209 -103 -385.5t-279.5 -279.5t-385.5 -103t-385.5 103t-279.5 279.5t-103 385.5t103 385.5t279.5 279.5t385.5 103t385.5 -103t279.5 -279.5t103 -385.5z"

constant kAddItemIconSVG is "M1216 576v128q0 26 -19 45t-45 19h-256v256q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-256h-256q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h256v-256q0 -26 19 -45t45 -19h128q26 0 45 19t19 45v256h256q26 0 45 19t19 45zM1536 640q0 -209 -103 -385.5 t-279.5 -279.5t-385.5 -103t-385.5 103t-279.5 279.5t-103 385.5t103 385.5t279.5 279.5t385.5 103t385.5 -103t279.5 -279.5t103 -385.5z"

constant kIconRatio is 0.65

public handler OnSave(out rProperties as Array)
	put the empty array into rProperties
	
	put mTheme into rProperties["theme"]
	put mNavItems into rProperties["items"]
	put mSelectedItem into rProperties["selected"]
	put mItemStyle into rProperties["itemStyle"]
	
	return rProperties
end handler

public handler OnLoad(in pProperties as Array)
	put pProperties["theme"] into mTheme
	put pProperties["items"] into mNavItems
	put pProperties["selected"] into mSelectedItem
	put pProperties["itemStyle"] into mItemStyle
end handler

public handler OnCreate() returns nothing
	--properties
	put "ios-8" into mTheme
	-- creating a list of navigation items

	variable tNavItems as List
	put the empty list into tNavItems
	
	variable tArray as Array
	put the empty array into tArray
	
	put "contacts" into tArray["name"]
	put "Contacts" into tArray["label"]
	put kDefaultIconSvg into tArray["icon"]
	put "" into tArray["selected_icon"]
	push tArray onto tNavItems
	
	put "favourites" into tArray["name"]
	put "Favourites" into tArray["label"]
	put kDefaultIconSvg into tArray["icon"]
	put "" into tArray["selected_icon"]
	push tArray onto tNavItems
	
	put "music" into tArray["name"]
	put "Music" into tArray["label"]
	put kDefaultIconSvg into tArray["icon"]
	put "" into tArray["selected_icon"]
	push tArray onto tNavItems
	
	put "search" into tArray["name"]
	put "Search" into tArray["label"]
	put kDefaultIconSvg into tArray["icon"]
	put "" into tArray["selected_icon"]
	push tArray onto tNavItems

	put tNavItems into mNavItems

	put 1 into mSelectedItem
	put "icons and names" into mItemStyle
	
	put 0 into mBoxWidth
	
	initialiseEditData()
	
	put true into mRecalculate
	put true into mEditMode
		
	put the empty array into mAddItem
	put kAddItemIconSVG into mAddItem["icon"]
	put "add item" into mAddItem["name"]
	put "Add Item" into mAddItem["label"]
	
end handler

public handler OnPaint() returns nothing

	if mRecalculate then
		updateParameters()
	end if

	variable tLeft as Real
	put 0 into tLeft
	
	// background
	set the paint of this canvas to getPaint("background","fill")
	fill getPath("bounding box") on this canvas
	
	// Calculate the size of each box we're drawing into
	variable tElement	
	variable tX as Integer
	repeat with tX from 1 up to mNavItemCount
	
		if mSelectedItem is tX then
			set the paint of this canvas to getPaint("text","selected-fill")
		else
			set the paint of this canvas to getPaint("text","fill")
		end if
		
		-- Draw the text of the nav bar
		if mItemStyle is "icons and names" then
			set the font of this canvas to getFont("label")
			fill text mNavItems[tX]["label"] at center of mNavItems[tX]["label_rect"] on this canvas
		end if
	
		-- Draw the icon
		variable tIconPath as Path
		if tX is mSelectedItem and mNavItems[tX]["selected_icon"] is not "" then
            put mNavItems[tX]["selected_icon_path"] into tIconPath
		else
            put mNavItems[tX]["icon_path"] into tIconPath
		end if
		fill tIconPath on this canvas
	end repeat
		
	// top line
	set the paint of this canvas to getPaint("background","stroke")
	fill getPath("line") on this canvas
	
	if mEditMode then
		drawAddItem()
		drawEditableRects(this canvas)
	end if
end handler

private handler drawAddItem()
	variable tRect as Rectangle
	put rectangle [mWidth - mBoxWidth, 0, mWidth, mHeight] into tRect
	set the paint of this canvas to getPaint("background", "additem")
	fill rectangle path of tRect on this canvas

	set the paint of this canvas to getPaint("text","fill")
	
	-- Draw the text of the nav bar
	set the font of this canvas to getFont("label")
	fill text mAddItem["label"] at center of mAddItem["label_rect"] on this canvas
	
	-- Draw the icon
	variable tIconPath as Path
    put mAddItem["icon_path"] into tIconPath
	fill tIconPath on this canvas
end handler

public handler OnMouseUp() returns nothing
	if not mEditMode then

	end if
end handler

public handler OnClick() returns nothing
	variable tClickPos as Point
	put the click position into tClickPos
	
	if mEditMode then
		widgetClicked(tClickPos)
		log locToNavItem(tClickPos)
		if locToNavItem(tClickPos) is mNavItemCount + 1 then
			addItem()
		end if
	else
		variable tSelected as Number
		put locToNavItem(tClickPos) into tSelected
	
		if tSelected > 0 then
			put tSelected into mSelectedItem
			redraw all
		
			variable tItemLabel as String
			put mNavItems[mSelectedItem]["label"] into tItemLabel
			post "navigate" with [tItemLabel]
		end if
	end if
end handler

private handler updateParameters()
	// update variables
	put my width into mWidth
	put my height into mHeight
	put the number of elements in mNavItems into mNavItemCount
	if mEditMode then
		put mWidth / (mNavItemCount + 1) into mBoxWidth
	else
		put mWidth / mNavItemCount into mBoxWidth	
	end if
	
	// calculate the drawing rects
	variable tX as Integer
	variable tIconPath as Path
	variable tIconRect as Rectangle
	
	repeat with tX from 1 up to mNavItemCount
		put rectangle [(tX - 1) * mBoxWidth, mHeight * kIconRatio, tX * mBoxWidth, mHeight] into mNavItems[tX]["label_rect"]
			
		if mItemStyle contains "icons" then
			put path mNavItems[tX]["icon"] into tIconPath
			
			if mItemStyle is "icons and names" then
				put rectangle [((2 * tX - 1) * mBoxWidth - mHeight * kIconRatio) / 2, mHeight * 0.05, ((2 * tX - 1) * mBoxWidth + mHeight * kIconRatio) / 2, mHeight * kIconRatio] into tIconRect
			else if mItemStyle is "icons" then
				put rectangle [((2 * tX - 1) * mBoxWidth - mHeight) / 2, 0, ((2 * tX - 1) * mBoxWidth + mHeight) / 2, mHeight] into tIconRect
			end if
			
			setIconPath(tIconRect, tIconPath)
			put tIconPath into mNavItems[tX]["icon_path"]
			put tIconRect into mNavItems[tX]["icon_rect"]
			
			if mNavItems[tX]["selected_icon"] is not "" then
				put path mNavItems[tX]["selected_icon"] into tIconPath
				setIconPath(tIconRect, tIconPath)
				put tIconPath into mNavItems[tX]["selected_icon_path"]
				put tIconRect into mNavItems[tX]["selected_icon_rect"]
			end if

			setEditableRect("icon" && tX formatted as string, mNavItems[tX]["icon_rect"], "com.livecode.widget.iconPicker", iconSelected)
		end if
	end repeat
	
	if mEditMode then
		put rectangle [mNavItemCount * mBoxWidth, mHeight * kIconRatio, (mNavItemCount + 1) * mBoxWidth, mHeight] into mAddItem["label_rect"]
		
		put path mAddItem["icon"] into tIconPath
		put rectangle [((2 * mNavItemCount + 1) * mBoxWidth - mHeight * kIconRatio) / 2, mHeight * 0.05, ((2 * mNavItemCount + 1) * mBoxWidth + mHeight * kIconRatio) / 2, mHeight * kIconRatio] into tIconRect
			
		setIconPath(tIconRect, tIconPath)
		put tIconPath into mAddItem["icon_path"]
		put tIconRect into mAddItem["icon_rect"]
	end if
	
	put false into mRecalculate
end handler

public handler OnGeometryChanged()
	put true into mRecalculate
end handler

public handler iconSelected(in pSelectedIcon as optional any, in pClickPos as Point)
	variable tElementNumber as Integer
	if pSelectedIcon is defined then
		put clickPosToComponent(pClickPos) into tElementNumber
		if tElementNumber > 0 then
			put pSelectedIcon into mNavItems[tElementNumber]["icon"]
			put true into mRecalculate
			redraw all
		end if
	end if
end handler

private handler clickPosToComponent(in pClickPos as Point) returns Integer
	variable tX as Integer
	repeat with tX from 1 up to mNavItemCount
		variable tIconRect as Rectangle
    	put mNavItems[tX]["icon_rect"] into tIconRect
		if pClickPos is within tIconRect then
			return tX		
		end if
	end repeat
	
	return 0
end handler

private handler locToNavItem(in pLoc as Point) returns Integer
	return the floor of (the x of pLoc / mBoxWidth) + 1
end handler

private handler setIconPath(in pTargetRect as Rectangle, inout xPath as Path)

	// Scale the icon
	variable tBounds
	put the bounding box of xPath into tBounds
	
	// set origin of bounds to 0,0
	translate xPath by [- the x of tBounds, - the y of tBounds]
	// flip vertically
	scale xPath by [1,-1]
	translate xPath by [0, the height of tBounds]
	
	// Scale appropriately
	variable isLarger as Boolean
	variable tXScale as Real
	variable tYScale as Real
		
	put false into isLarger
	put the width of pTargetRect / the width of tBounds into tXScale
	put the height of pTargetRect / the height of tBounds into tYScale
		
	if tXScale > tYScale then
		put true into isLarger
		put tYScale into tXScale
	else
		put tXScale into tYScale
	end if

    scale xPath by [tXScale, tYScale]

	variable tXTranslate as Real
	variable tYTranslate as Real

    put the bounding box of xPath into tBounds

	put the left of pTargetRect - the left of tBounds into tXTranslate
	put the top of pTargetRect - the top of tBounds into tYTranslate

    variable tXDiff as Real
    variable tYDiff as Real

    put the width of pTargetRect - the width of tBounds into tXDiff
    put the height of pTargetRect - the height of tBounds into tYDiff

			
	// align center
	divide tXDiff by 2
	divide tYDiff by 2

	translate xPath by [tXTranslate + tXDiff, tYTranslate + tYDiff]
end handler

private handler getNavItems() returns String
	
	variable tNavItems as List
	put the empty list into tNavItems
	
	variable tCount as Integer
	variable tListLine as List
	variable tStringLine as String
	variable tItemList as List
	
	put the empty string into tStringLine
	put the empty list into tItemList
	
	repeat with tCount from 1 up to the number of elements in element 1 of mNavItems
		put the empty list into tListLine
			
		push element tCount of element 1 of mNavItems onto back of tListLine
		push element tCount of element 2 of mNavItems onto back of tListLine
		push element tCount of element 3 of mNavItems onto back of tListLine
		push element tCount of element 4 of mNavItems onto back of tListLine
		
		combine tListLine with "," into tStringLine
		push tStringLine onto back of tItemList
	end repeat
	
	variable tNavItemString as String
	put the empty string into tNavItemString
	combine tItemList with newline into tNavItemString
	
	return tNavItemString
end handler

public handler getPath(in pObject as String) returns Path
	if pObject is "bounding box" then
		return rectangle path of my bounds 
	else if pObject is "line" then
		return rectangle path of rectangle [0,0,my width,1]
	end if
end handler

public handler getPaint(pLocation, pType) returns Paint
	if pLocation is "background" then
		if pType is "fill" then
			return solid paint with color [246/255, 246/255, 247/255]
		else if pType is "stroke" then
			return solid paint with color [178/255, 178/255, 178/255]
		else if pType is "additem" then
			return solid paint with color [0, 122/255 ,1]
		end if
	else if pLocation is "text" then
		if pType is "fill" then
			return solid paint with color [146/255, 146/255, 146/255]
		else if pType is "selected-fill" then
			return solid paint with color [0, 122/255 ,1]
		end if
	end if
	
	return solid paint with color [1, 100/255, 200/255]
end handler

private handler getFont(in pType as String) returns Font
	if pType is "label" then
		if mTheme is "ios-8" then
			return font "Helvetica Neue" at size 10
		else
			return the font of this canvas
		end if
		
	else if pType is "icon" then
		return font "fontawesome" at size 20
	end if
end handler

public handler setTheme(in pThemeName as String) returns nothing
	put pThemeName into mTheme
	redraw all
end handler

public handler setNavSelectedItem(in pSelectedItem as Integer) returns nothing
	if pSelectedItem > 0 and pSelectedItem <= the number of elements in mNavItems then
		put pSelectedItem into mSelectedItem
		redraw all
	end if
end handler

public handler setItemStyle(in pItemStyle as String) returns nothing
	put pItemStyle into mItemStyle
	put true into mRecalculate
	redraw all
end handler

public handler setEditMode(in pEditMode as Boolean) returns nothing
	put pEditMode into mEditMode
	put true into mRecalculate
	redraw all
end handler

private handler setNavItems(in pNavItems as String) returns nothing
	
	variable tNavItems as List
	split pNavItems by newline into tNavItems
	
	variable tNavElement
	variable tListElement
	
	variable tFinalActions as List
	variable tStringToList as List
	put the empty list into tFinalActions
	
	repeat for each element tNavElement in tNavItems
		put the empty list into tStringToList
		split tNavElement by "," into tStringToList
		
		repeat for each element tListElement in tStringToList
			push tListElement onto back of tFinalActions
		end repeat
		
	end repeat
	
	variable tNavCount as Integer
	variable tCount as Integer
	put the trunc of (the number of elements in tFinalActions)/4 into tNavCount
	
	variable tNameList as List
	variable tLabelList as List
	variable tIconList as List
	variable tSelectedIconList as List
	put the empty list into tNameList
	put the empty list into tLabelList
	put the empty list into tIconList
	put the empty list into tSelectedIconList
	
	repeat with tCount from 1 up to tNavCount
		push element (4*tCount)-3 of tFinalActions onto back of tNameList
		push element (4*tCount)-2 of tFinalActions onto back of tLabelList
		push element (4*tCount)-1 of tFinalActions onto back of tIconList
		push element 4*tCount of tFinalActions onto back of tSelectedIconList
	end repeat
	
	put [tNameList,tLabelList,tIconList,tSelectedIconList] into mNavItems
	
	redraw all
end handler

public handler addNavItem(in pNewItem as String) returns nothing

	variable tNewItem as List
	split pNewItem by "," into tNewItem

	variable tNameList as List
	variable tLabelList as List
	variable tIconList as List
	variable tSelectedIconList as List
	put element 1 of mNavItems into tNameList
	put element 2 of mNavItems into tLabelList
	put element 3 of mNavItems into tIconList
	put element 4 of mNavItems into tSelectedIconList
	
	push element 1 of tNewItem onto back of tNameList
	push element 2 of tNewItem onto back of tLabelList
	push element 3 of tNewItem onto back of tIconList
	push element 4 of tNewItem onto back of tSelectedIconList
	
	put [tNameList,tLabelList,tIconList,tSelectedIconList] into mNavItems

	redraw all
end handler

public handler removeNavItem(in pItem as String) returns nothing
	
	variable tItems as String
	variable tItemList as List
	put getNavItems() into tItems
	split tItems by newline into tItemList
	put the empty string into tItems
	
	variable tItemElement
	variable tCount as Integer
	put 1 into tCount
	
	repeat for each element tItemElement in tItemList
		if tItemElement contains pItem then
			delete element tCount of tItemList
		end if
	add 1 to tCount
	end repeat
	
	combine tItemList with newline into tItems
	
	setNavItems(tItems)
	
	redraw all
end handler

private handler addItem()
    variable tArray as Array
    put the empty array into tArray

	put "new item" into tArray["name"]
	put "New Item" into tArray["label"]
	put kDefaultIconSvg into tArray["icon"]
	put "" into tArray["selected_icon"]
	push tArray onto mNavItems
	put true into mRecalculate
	redraw all
end handler

--------------------------------------------------------------------------------
--
--		Editable rect things
--
--------------------------------------------------------------------------------

handler type PopupCallback(in pPopupResult as optional any, in pClickPos as Point)

private variable mEditData as Array

public handler initialiseEditData()
	put the empty array into mEditData
end handler

public handler setEditableRect(in pComponent as String, in pRect as Rectangle, in pPopup as String, in pCallback as PopupCallback)	
	put the empty array into mEditData[pComponent]
	
	put pRect into mEditData[pComponent]["rect"]
	put pPopup into mEditData[pComponent]["popup"]
	put pCallback into mEditData[pComponent]["callback"]
end handler

public handler drawEditableRects(in pCanvas as Canvas)
	variable tElement as Array
	repeat for each element tElement in mEditData
		set the paint of pCanvas to solid paint with color [0,0,0]
		stroke rectangle path of tElement["rect"] on pCanvas
	end repeat
end handler

public handler widgetClicked(in pClickPosition as Point)
	variable tElement as Array
	repeat for each element tElement in mEditData
		if pClickPosition is within tElement["rect"] then
			doPopup(pClickPosition, tElement)
		end if
	end repeat
end handler

private handler doPopup(in pClickPos as Point, in pArray as Array)
	variable tResult
	popup widget pArray["popup"] at pClickPos
	put the result into tResult
	
	variable tCallback as PopupCallback
	put pArray["callback"] into tCallback
	tCallback(tResult, pClickPos)
end handler

end widget