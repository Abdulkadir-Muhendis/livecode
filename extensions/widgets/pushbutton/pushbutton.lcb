/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This widget is a push button that dispatches mouse events to its script object.
*/

-- declaring the extension as a widget, followed by the identifier
widget com.livecode.widget.pushbutton
--

-- dependency declarations
use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.iconSVG
--

-- adding metadata to ensure the extension displays correctly in LiveCode
metadata author is "LiveCode"
metadata version is "1.0.0"
metadata title is "Push Button"
metadata preferredSize is "64,36"
metadata svgicon is "M49.2,0h-34C6.8,0,0,6.8,0,15.2c0,8.4,6.8,15.2,15.2,15.2h34c8.4,0,15.2-6.8,15.2-15.2C64.3,6.8,57.5,0,49.2,0z M18.5,19.6c-0.2,0.3-0.4,0.6-0.7,0.8c-0.3,0.2-0.7,0.4-1.1,0.5s-0.9,0.1-1.4,0.1h-4.5v-2.9h2v1.2h2.4c0.4,0,0.8-0.1,1-0.2c0.4-0.2,0.7-0.6,0.7-1.3c0-0.5-0.2-0.9-0.6-1.1c-0.2-0.1-0.6-0.2-1-0.2h-2.5v1.2h-2V14h2v1h2.4c0.4,0,0.8-0.1,1.1-0.2c0.3-0.2,0.4-0.5,0.4-0.9c0-0.5-0.2-0.8-0.5-0.9c-0.3-0.1-0.7-0.2-1.2-0.2h-2.2v1h-2V11h4.9c1.2,0,2.1,0.4,2.6,1.1c0.3,0.4,0.5,0.9,0.5,1.5c0,0.6-0.2,1.1-0.5,1.5c-0.2,0.2-0.4,0.4-0.8,0.6c0.5,0.2,0.9,0.5,1.2,0.9S19,17.5,19,18C19,18.6,18.8,19.2,18.5,19.6z M27.3,21.1h-1.9V20c0,0-0.1,0.1-0.1,0.2c-0.1,0.1-0.2,0.2-0.3,0.3c-0.3,0.3-0.6,0.5-0.9,0.6s-0.6,0.2-1,0.2c-1.1,0-1.8-0.4-2.2-1.2c-0.2-0.4-0.3-1.1-0.3-1.9v-4.5h2v4.5c0,0.4,0,0.7,0.1,1c0.2,0.4,0.5,0.6,1,0.6c0.7,0,1.1-0.3,1.4-0.8c0.1-0.3,0.2-0.7,0.2-1.2v-4.1h2V21.1z M32.6,15.1h-1.2V19c0,0.3,0,0.5,0.1,0.6s0.3,0.1,0.7,0.1c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2,0v1.5l-0.9,0c-0.9,0-1.5-0.1-1.9-0.5c-0.2-0.2-0.3-0.6-0.3-1v-4.6h-1v-1.4h1v-2.1h1.9v2.1h1.2V15.1z M37.2,15.1H36V19c0,0.3,0,0.5,0.1,0.6s0.3,0.1,0.7,0.1c0.1,0,0.1,0,0.2,0c0.1,0,0.1,0,0.2,0v1.5l-0.9,0c-0.9,0-1.5-0.1-1.9-0.5c-0.2-0.2-0.3-0.6-0.3-1v-4.6h-1v-1.4h1v-2.1H36v2.1h1.2V15.1z M44.7,20.2c-0.6,0.8-1.6,1.2-2.9,1.2s-2.2-0.4-2.9-1.2c-0.6-0.7-0.9-1.6-0.9-2.6h2c0,0.7,0.2,1.2,0.5,1.6c0.3,0.4,0.7,0.6,1.3,0.6s1-0.2,1.3-0.6c0.3-0.4,0.5-1,0.5-1.7c0-0.7-0.2-1.3-0.5-1.7c-0.3-0.4-0.7-0.6-1.3-0.6s-1,0.2-1.3,0.6c-0.3,0.4-0.4,0.9-0.5,1.6h-2c0-1,0.3-1.9,0.9-2.6c0.6-0.8,1.6-1.2,2.9-1.2s2.2,0.4,2.9,1.2s0.9,1.7,0.9,2.8C45.7,18.5,45.3,19.4,44.7,20.2z M53.8,21.1h-2v-4.5c0-0.4-0.1-0.7-0.2-0.9c-0.2-0.4-0.6-0.6-1.1-0.6c-0.7,0-1.1,0.3-1.3,0.8C49.1,16.2,49,16.6,49,17v4h-1.9v-7.4h1.9v1.1c0.2-0.4,0.5-0.7,0.7-0.8c0.4-0.3,0.9-0.5,1.5-0.5c0.8,0,1.4,0.2,1.9,0.6c0.5,0.4,0.7,1.1,0.7,2V21.1z M47.2,5.5h-30c-6,0-13.1,3.2-14.6,7.8C3.6,7.5,9.7,3,17.2,3h30c8.1,0,14.7,5.3,14.7,11.9C61.9,9.5,53.8,5.5,47.2,5.5z"
--

/*
Syntax: set the widgetTheme of <widget> to <pWidgetTheme>
Syntax: get the widgetTheme of <widget>

Summary: The theme of the widget

Parameters:
pWidgetTheme(enum): The theme of the widget
-"iOS"
-"Android(Floating Action)"
-"Android(Raised)"
-"Android(Flat)"

Description:
Use the <widgetTheme> property to set the theme of the widget.
*/
property widgetTheme get mWidgetTheme set setWidgetTheme
metadata widgetTheme.editor is "com.livecode.pi.enum"
metadata widgetTheme.options is "iOS,Android(Floating Action),Android(Raised),Android(Flat)"
metadata widgetTheme.default is "iOS"
metadata widgetTheme.label is "Widget Theme"

/*
Syntax: set the labelStyle of <widget> to <pStyle>
Syntax: get the labelStyle of <widget>

Summary: The display style of the widget's label

Parameters:
pStyle(enum): The display style
-"text"
-"icon"

Description:
Use the <labelStyle> property to set the display style of the widget's label, either text or an icon.

This property can only be changed if the theme of the widget is "iOS".
This property is fixed for the Android themes.
*/
property labelStyle get mLabelStyle set setLabelStyle
metadata labelStyle.editor is "com.livecode.pi.enum"
metadata labelStyle.options is "text,icon"
metadata labelStyle.default is "text"
metadata labelStyle.label is "Label Type"

/*
Syntax: set the labelText of <widget> to <pText>
Syntax: get the labelText of <widget>

Summary: The text displayed on the button

Parameters:
pText(string): The text shown on the button

Description:
Use the <labelText> property to set the text of the widget's label.
*/
property labelText get mLabelText set setLabelText
metadata labelText.default is "Button"
metadata labelText.label is "Label Text"

/*
Syntax: set the labelIcon of <widget> to <pIconName>
Syntax: get the labelIcon of <widget>

Summary: The icon displayed on the button

Parameters:
pIconName(enum): The name of the icon shown on the button
- a list of predefined values

Description:
Use the <labelIcon> property to set the icon of the widget's label  to one of the predefined values.
The complete list of preset values is available by executing

``` put iconNames()```

*/
property labelIcon get mLabelIcon set setLabelIcon
metadata labelIcon.editor is "com.livecode.pi.enum"
metadata labelIcon.options is "execute: get iconNames()"
metadata labelIcon.default is "Star"
metadata labelIcon.label is "Label Icon"

/*
Syntax: set the <labelColor> of <widget> to <pLabelColor>
Syntax: get the <labelColor> of <widget>

Summary: The color of the label shown on the button

Parameters:
pLabelColor(color): The color of the label

Description:
Use the <labelColor> property to set the color of the label on the button.

If the theme of the widget is "Android(Raised)" and the background color of the widget is not white, then the text color of the widget will always be set to white.
This property is fixed to white if the theme of the widget is "Android(Floating Action)".
*/
property labelColor get getLabelColor set setLabelColor
metadata labelColor.editor is "com.livecode.pi.color"
metadata labelColor.label is "Label Color"
metadata labelColor.default is "0,121,255"

/*
Syntax: set the <widgetBackgroundColor> of <widget> to <pBackgroundColor>
Syntax: get the <widgetBackgroundColor> of <widget>

Summary: The color of the button's background

Parameters:
pBackgroundColor(color): The color of the background

Description:
Use the <widgetBackgroundColor> property to set the background color of the button.

This property can only be set if the theme of the widget is "Android(Raised)" or "Android(Floating Action)"
*/
property widgetBackgroundColor get getBackgroundColor set setBackgroundColor
metadata widgetBackgroundColor.editor is "com.livecode.pi.color"
metadata widgetBackgroundColor.label is "Background Color"
metadata widgetBackgroundColor.default is "255,255,255"

/*
Syntax: set the <backgroundOpacity> of <widget> to <pOpacity>
Syntax: get the <backgroundOpacity> of <widget>

Summary: The background opacity of the button

Parameters:
pOpacity(enum): The background opacity of the button
-"Opaque"
-"Translucent"
-"Transparent"

Description:
Use the <backgroundOpacity> property to set the opacity of the button's background.

This property is fixed at "Opaque" for the Android(Raised) and Android(Floating Action) themes and fixed at "Transparent" for the Android(Flat) theme.
This property can only be changed if the theme of the widget is "iOS".
*/
property backgroundOpacity get mBackgroundOpacity set setBackgroundOpacity
metadata backgroundOpacity.editor is "com.livecode.pi.enum"
metadata backgroundOpacity.options is "Opaque,Translucent,Transparent"
metadata backgroundOpacity.default is "Transparent"
metadata backgroundOpacity.label is "Background Opacity"

/*
Syntax: set the colorScheme of <widget> to <pColorScheme>
Syntax: get the colorScheme of <widget>

Summary: The color scheme of the widget (Android only)

Parameters:
pColorScheme(enum): The color scheme of the widget
-"Red"
-"Pink"
-"Purple"
-"Deep Purple"
-"Indigo"
-"Blue"
-"Light Blue"
-"Cyan"
-"Teal"
-"Green"
-"Light Green"
-"Lime"
-"Yellow"
-"Amber"
-"Orange"
-"Deep Orange"
-"Brown"
-"Grey"
-"Blue Grey"

Description:
Use the <colorScheme> property to set the color scheme of the widget, Android only.
*/
property colorScheme get mColorScheme set setColorScheme
metadata colorScheme.editor is "com.livecode.pi.enum"
metadata colorScheme.options is "Red,Pink,Purple,Deep Purple,Indigo,Blue,Light Blue,Cyan,Teal,Green,Light Green,Lime,Yellow,Amber,Orange,Deep Orange,Brown,Grey,Blue Grey"
metadata colorScheme.default is "Teal"
metadata colorScheme.label is "Color Scheme"

-- private instance variables
private variable mWidgetTheme as String
private variable mLabelStyle as String
private variable mLabelText as String
private variable mLabelIcon as String
private variable mLabelColor as Color
private variable mBackgroundColor as Color
private variable mBackgroundOpacity as String
private variable mColorScheme as String

private variable mShowBorder as Boolean
private variable mDefaultColor as Color
private variable mIosFontSize as Real
private variable mAndroidFontSize as Real
private variable mWidth as Real
private variable mHeight as Real

private variable mAndroidColors as Array

-- constants
constant kWidgetThemeIos is "iOS"
constant kWidgetThemeAndroidFloatingAction is "Android(Floating Action)"
constant kWidgetThemeAndroidRaised is "Android(Raised)"
constant kWidgetThemeAndroidFlat is "Android(Flat)"

constant kLabelStyleText is "text"
constant kLabelStyleIcon is "icon"

constant kOpaqueBackground is "Opaque"
constant kTranslucentBackground is "Translucent"
constant kTransparentBackground is "Transparent"

constant kIosDefaultFontSize is 17
constant kIosDefaultHeight is 29
constant kAndroidDefaultFontSize is 14
constant kAndroidDefaultHeight is 36

public handler OnSave(out rProperties as Array)
   put the empty array into rProperties

   put mWidgetTheme into rProperties["theme"]
   put mLabelStyle into rProperties["labelStyle"]
   put mLabelText into rProperties["labelText"]
   put mLabelIcon into rProperties["labelIcon"]
   put colorToString(mLabelColor) into rProperties["labelColor"]
   put colorToString(mBackgroundColor) into rProperties["backgroundColor"]
   put mBackgroundOpacity into rProperties["opacity"]
   put mColorScheme into rProperties["colorScheme"]

end handler

public handler OnLoad(in pProperties as Array)
   put pProperties["theme"] into mWidgetTheme
   put pProperties["labelStyle"] into mLabelStyle
   put pProperties["labelText"] into mLabelText
   put pProperties["labelIcon"] into mLabelIcon
   put stringToColor(pProperties["labelColor"]) into mLabelColor
   put stringToColor(pProperties["backgroundColor"]) into mBackgroundColor
   put pProperties["opacity"] into mBackgroundOpacity
   put pProperties["colorScheme"] into mColorScheme
end handler

public handler OnCreate() returns nothing
   put "iOS" into mWidgetTheme
   put "text" into mLabelStyle
   put "Button" into mLabelText
   put "Star" into mLabelIcon
   put color [0, 121/255, 1] into mLabelColor
   put color [1, 1, 1, 0] into mBackgroundColor
   put "Transparent" into mBackgroundOpacity
   put "Blue" into mColorScheme

   put false into mShowBorder
   put color [0, 121/255, 1] into mDefaultColor
   updateVariables()
   fetchAndroidColors()
end handler

public handler OnPaint() returns nothing
   updateVariables()

   if mWidgetTheme is kWidgetThemeIos then
      drawIosButton()
   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      drawAndroidFloatingActionButton()
   else if mWidgetTheme is kWidgetThemeAndroidRaised then
      drawAndroidRaisedButton()
   else if mWidgetTheme is kWidgetThemeAndroidFlat then
      drawAndroidFlatButton()
   end if

end handler

private handler drawIosButton() returns nothing
   -- background
   set the paint of this canvas to fetchPaint("background")
   fill fetchPath("background") on this canvas

   -- label
   set the font of this canvas to fetchFont()
   set the paint of this canvas to fetchPaint("label")
   if mLabelStyle is kLabelStyleText then
      fill text mLabelText at center of my bounds on this canvas
   else if mLabelStyle is kLabelStyleIcon then
      fill fetchIconPath(mLabelIcon) on this canvas
   end if

end handler

private handler drawAndroidFloatingActionButton() returns nothing
   -- shadow
   variable tShadow as Effect
   put drawDropShadow() into tShadow

   begin layer with tShadow on this canvas
   -- background
   set the paint of this canvas to fetchPaint("background")
   fill fetchPath("background") on this canvas

   -- label
   set the paint of this canvas to fetchPaint("label")
   fill fetchIconPath(mLabelIcon) on this canvas
   end layer on this canvas
end handler

private handler drawAndroidRaisedButton() returns nothing
   -- shadow
   variable tShadow as Effect
   put drawDropShadow() into tShadow

   begin layer with tShadow on this canvas
   -- background
   set the paint of this canvas to fetchPaint("background")
   fill fetchPath("background") on this canvas

   -- border
   if mShowBorder then
      set the paint of this canvas to fetchPaint("border")
      set the stroke width of this canvas to 0.5
      stroke fetchPath("border") on this canvas
   end if
   end layer on this canvas

   -- label
   variable tLabel as String
   put the upper of mLabelText into tLabel

   set the font of this canvas to fetchFont()
   set the paint of this canvas to fetchPaint("label")
   fill text tLabel at center of rectangle [0, 0, mWidth-5, mHeight-5] on this canvas
end handler

private handler drawAndroidFlatButton() returns nothing
   -- label
   variable tLabel as String
   put the upper of mLabelText into tLabel

   set the font of this canvas to fetchFont()
   set the paint of this canvas to fetchPaint("label")
   fill text tLabel at center of my bounds on this canvas
end handler

private handler drawDropShadow() returns Effect
   variable tProps as Array
   put the empty array into tProps

   if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put color [186/255, 186/255, 186/255, 0.9] into tProps["color"]
      put "source over" into tProps["blend mode"]
      put 255 into tProps["opacity"]
      put 0.5 into tProps["spread"]
      put 5 into tProps["size"]
      put 7 into tProps["distance"]
      put 90 into tProps["angle"]

   else if mWidgetTheme is kWidgetThemeAndroidRaised then
      put color [186/255, 186/255, 186/255, 0.8] into tProps["color"]
      put "source over" into tProps["blend mode"]
      put 255 into tProps["opacity"]
      put 0.6 into tProps["spread"]
      put 1 into tProps["size"]
      put 4 into tProps["distance"]
      put 60 into tProps["angle"]

   end if

   variable tEffect as Effect
   put outer shadow effect with properties tProps into tEffect
   return tEffect
end handler

private handler updateVariables() returns nothing
   put my width into mWidth
   put my height into mHeight

   put mHeight*(kIosDefaultFontSize/kIosDefaultHeight) into mIosFontSize
   put mHeight*(kAndroidDefaultFontSize/kAndroidDefaultHeight) into mAndroidFontSize
end handler

private handler fetchPaint(in pObject as String) returns Paint
   if pObject is "background" then
         return solid paint with mBackgroundColor

   else if pObject is "label" then
      return solid paint with mLabelColor

   else if pObject is "border" then
      return solid paint with color [167/255, 167/255, 167/255]

   end if
end handler

private handler fetchPath(in pObject as String) returns Path
   if pObject is "background" then
      if mWidgetTheme is kWidgetThemeIos then
         return rounded rectangle path of my bounds with radius 5
      else if mWidgetTheme is kWidgetThemeAndroidRaised then
         return rounded rectangle path of rectangle [0, 0, mWidth-5, mHeight-5] with radius 2
      else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
         return circle path centered at point [mWidth/2, (mHeight-10)/2] with radius (mHeight-10)/2
      end if
   else if pObject is "border" then
      return rounded rectangle path of rectangle [0, 0, mWidth-5, mHeight-5] with radius 2
   end if
end handler

private handler fetchIconPath(in pIconName as String) returns Path
   variable tIconPath as Path
   put path iconSVGPathFromName(pIconName) into tIconPath

   variable tIconRect as Rectangle
   if mWidgetTheme is kWidgetThemeIos then
      put rectangle [0, mHeight/4, mWidth, 3*mHeight/4] into tIconRect
   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put rectangle [mWidth/2 - (mHeight-10)/2, (mHeight-10)/4, mWidth/2 + (mHeight-10)/2, 3*(mHeight-10)/4] into tIconRect
   end if

   setIconPath(tIconRect, tIconPath)
   return tIconPath
end handler

private handler fetchFont() returns Font
   if mWidgetTheme is kWidgetThemeIos then
      return font "Helvetica Neue" at size mIosFontSize
   else if mWidgetTheme contains "Android" then
      return font "Roboto Medium" at size mAndroidFontSize
   end if
end handler

private handler fetchAndroidColors() returns nothing

	put the empty array into mAndroidColors
	put "238,43,41" into mAndroidColors["Red"]
	put "224,0,81" into mAndroidColors["Pink"]
	put "137,0,161" into mAndroidColors["Purple"]
	put "83,33,168" into mAndroidColors["Deep Purple"]
	put "48,58,165" into mAndroidColors["Indigo"]
	put "30,128,240" into mAndroidColors["Blue"]
	put "20,150,241" into mAndroidColors["Light Blue"]
	put "22,175,202" into mAndroidColors["Cyan"]
	put "17,133,117" into mAndroidColors["Teal"]
	put "63,164,63" into mAndroidColors["Green"]
	put "122,186,58" into mAndroidColors["Light Green"]
	put "194,215,45" into mAndroidColors["Lime"]
	put "254,233,46" into mAndroidColors["Yellow"]
	put "253,182,13" into mAndroidColors["Amber"]
	put "253,133,9" into mAndroidColors["Orange"]
	put "251,63,28" into mAndroidColors["Deep Orange"]
	put "101,67,56" into mAndroidColors["Brown"]
	put "140,140,140" into mAndroidColors["Grey"]
	put "78,106,120" into mAndroidColors["Blue Grey"]

end handler
--------------------------------------------------------------------------------
--
--		Getting and Setting Properties
--
--------------------------------------------------------------------------------

private handler setWidgetTheme(in pWidgetTheme as String)
   if pWidgetTheme is mWidgetTheme then
      return
   end if

   variable tThemeList as List
   put [kWidgetThemeIos, kWidgetThemeAndroidFloatingAction, kWidgetThemeAndroidRaised, kWidgetThemeAndroidFlat] into tThemeList

   if not(pWidgetTheme is in tThemeList) then
      throw "invalid widget theme"
   end if

   put pWidgetTheme into mWidgetTheme

   variable tBackgroundColorString as String
   put getBackgroundColor() into tBackgroundColorString
   checkBackgroundColor(tBackgroundColorString)
   put stringToColor(tBackgroundColorString) into mBackgroundColor

   variable tLabelColorString as String
   put getLabelColor() into tLabelColorString
   checkTextColor(tLabelColorString)
   put stringToColor(tLabelColorString) into mLabelColor

   if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put kOpaqueBackground into mBackgroundOpacity
      put kLabelStyleIcon into mLabelStyle

   else if mWidgetTheme is kWidgetThemeAndroidRaised then
      put kOpaqueBackground into mBackgroundOpacity
      put kLabelStyleText into mLabelStyle

   else if mWidgetTheme is kWidgetThemeAndroidFlat then
      put kTransparentBackground into mBackgroundOpacity
      put kLabelStyleText into mLabelStyle

   end if

   redraw all
end handler

private handler setLabelStyle(in pStyle as String)
   if pStyle is mLabelStyle then
      return
   end if

   variable tStyleList as List
   put [kLabelStyleText, kLabelStyleIcon] into tStyleList

   if not(pStyle is in tStyleList) then
      throw "invalid label style"
   end if

   if mWidgetTheme is kWidgetThemeIos then
      put pStyle into mLabelStyle
   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put kLabelStyleIcon into mLabelStyle
   else if mWidgetTheme is kWidgetThemeAndroidRaised or mWidgetTheme is kWidgetThemeAndroidRaised then
      put kLabelStyleText into mLabelStyle
   end if

   redraw all
end handler

private handler setLabelText(in pText as String)
   put pText into mLabelText
   redraw all
end handler

private handler setLabelIcon(in pIconName as String)
   put pIconName into mLabelIcon
   redraw all
end handler

public handler getLabelColor() returns String
   return colorToString(mLabelColor)
end handler

public handler setLabelColor(in pLabelColor as String) returns nothing
   checkTextColor(pLabelColor)
   put stringToColor(pLabelColor) into mLabelColor
   redraw all
end handler

public handler getBackgroundColor() returns String
   return colorToString(mBackgroundColor)
end handler

public handler setBackgroundColor(in pBackgroundColor as String) returns nothing
   checkBackgroundColor(pBackgroundColor)
   put stringToColor(pBackgroundColor) into mBackgroundColor
   redraw all
end handler

private handler setBackgroundOpacity(in pOpacity as String)

   if pOpacity is mBackgroundOpacity then
      return
   end if

   variable tOpacityList as List
   put [kOpaqueBackground, kTranslucentBackground, kTransparentBackground] into tOpacityList

   if not(pOpacity is in tOpacityList) then
      throw "invalid background opacity"
   end if

   if mWidgetTheme is kWidgetThemeIos then
      put pOpacity into mBackgroundOpacity

      variable tColorString as String
      put colorToString(mBackgroundColor) into tColorString
      checkBackgroundColor(tColorString)
      put stringToColor(tColorString) into mBackgroundColor

   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction or mWidgetTheme is kWidgetThemeAndroidRaised then
      put kOpaqueBackground into mBackgroundOpacity

   else if mWidgetTheme is kWidgetThemeAndroidFlat then
      put kTransparentBackground into mBackgroundOpacity

   end if

   redraw all
end handler

private handler setColorScheme(in pColorScheme as String) returns nothing

   if pColorScheme is mColorScheme then
      return
   end if

   if pColorScheme is not among the keys of mAndroidColors then
      throw "invalid color scheme"
   end if

   put pColorScheme into mColorScheme
   redraw all

end handler

--------------------------------------------------------------------------------
--
--		Icon Paths
--
--------------------------------------------------------------------------------

-- Translate and scale xPath so that it fits within pTargetRect
private handler setIconPath(in pTargetRect as Rectangle, inout xPath as Path)

	-- Scale the icon appropriately
	variable tBounds
   variable tXScale as Real
   variable tYScale as Real

	put the bounding box of xPath into tBounds
	put the width of pTargetRect / the width of tBounds into tXScale
	put the height of pTargetRect / the height of tBounds into tYScale

	if tXScale > tYScale then
		put tYScale into tXScale
	else
		put tXScale into tYScale
	end if

    scale xPath by [tXScale, tYScale]

	variable tXTranslate as Real
	variable tYTranslate as Real

   put the bounding box of xPath into tBounds

	put the left of pTargetRect - the left of tBounds into tXTranslate
	put the top of pTargetRect - the top of tBounds into tYTranslate

    variable tXDiff as Real
    variable tYDiff as Real

    put the width of pTargetRect - the width of tBounds into tXDiff
    put the height of pTargetRect - the height of tBounds into tYDiff

	-- Align center
	divide tXDiff by 2
	divide tYDiff by 2

	translate xPath by [tXTranslate + tXDiff, tYTranslate + tYDiff]
end handler

--------------------------------------------------------------------------------
--
--		Checking Color Properties
--
--------------------------------------------------------------------------------

constant kWhiteColorString is "255,255,255"
constant kDefaultColorString is "0,121,255"

private handler checkTextColor(inout xTextColor as String) returns nothing

   if mWidgetTheme is kWidgetThemeAndroidRaised then
      if xTextColor is kWhiteColorString then
         put false into mShowBorder
         put mDefaultColor into mBackgroundColor
      else
         put true into mShowBorder
         put color [1,1,1] into mBackgroundColor
      end if

   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put kWhiteColorString into xTextColor

   else
      if xTextColor is kWhiteColorString then
         put kDefaultColorString into xTextColor
         put color [1,1,1] into mBackgroundColor
      end if
   end if
end handler

private handler checkBackgroundColor(inout xBackgroundColor as String) returns nothing

   if mWidgetTheme is kWidgetThemeIos then
      if mBackgroundOpacity is kOpaqueBackground then
         put kWhiteColorString into xBackgroundColor
      else if mBackgroundOpacity is kTranslucentBackground then
         put "255,255,255,204" into xBackgroundColor
      else if mBackgroundOpacity is kTransparentBackground then
         put "255,255,255,0" into xBackgroundColor
      end if

   else if mWidgetTheme is kWidgetThemeAndroidFloatingAction then
      put color [1,1,1] into mLabelColor
      if xBackgroundColor contains kWhiteColorString then
         put kDefaultColorString into xBackgroundColor
      end if

   else if mWidgetTheme is kWidgetThemeAndroidRaised then
      if xBackgroundColor contains kWhiteColorString then
         put true into mShowBorder
         if colorToString(mLabelColor) is kWhiteColorString then
            put mDefaultColor into mLabelColor
         end if
      else
         put false into mShowBorder
         put color [1,1,1] into mLabelColor
      end if

   else if  mWidgetTheme is kWidgetThemeAndroidFlat then
      put kWhiteColorString into xBackgroundColor

   end if
end handler

--------------------------------------------------------------------------------
--
--		Converting Data Types
--
--------------------------------------------------------------------------------

-- this handler converts a string of numbers to an RGBA color
private handler stringToColor(in pString as String) returns Color
   variable tRed as Real
	variable tGreen as Real
	variable tBlue as Real
	variable tAlpha as Real

	variable tComponentList as List
	split pString by "," into tComponentList

	variable tComponentCount
	put the number of elements in tComponentList into tComponentCount
	if tComponentCount is not 3 and tComponentCount is not 4 then
		-- Invalid number of components detected
		throw "Invalid color"
	end if

	put (element 1 of tComponentList) parsed as number into tRed
	put (element 2 of tComponentList) parsed as number into tGreen
	put (element 3 of tComponentList) parsed as number into tBlue

   if tComponentCount is 4 then
     put (element 4 of tComponentList) parsed as number into tAlpha
     return color [tRed/255, tGreen/255, tBlue/255, tAlpha/255]
  else
     return color [tRed/255, tGreen/255, tBlue/255]
  end if

end handler

-- this handler converts an RGBA color to a string of numbers
private handler colorToString(in pColor as Color) returns String

   variable tRed as String
   variable tGreen as String
   variable tBlue as String
   variable tAlpha as String

   put stripZeros((the rounded of ((the red of pColor) * 255)) formatted as string) into tRed
   put stripZeros((the rounded of ((the green of pColor) * 255)) formatted as string) into tGreen
   put stripZeros((the rounded of ((the blue of pColor) * 255)) formatted as string) into tBlue
   put stripZeros((the rounded of ((the alpha of pColor) * 255)) formatted as string) into tAlpha

   if tAlpha is "255" then
      return tRed & "," & tGreen & "," & tBlue
   else
      return tRed & "," & tGreen & "," & tBlue & "," & tAlpha
   end if

end handler

-- this handler strips the zeros when a integer is formatted as a string
private handler stripZeros(in tString as String) returns String
	if tString contains "." then
		variable tCount as Integer
		repeat while ((the last char of tString) is in ".0")
			if the last char of tString is "." then
				delete the last char of tString
				exit repeat
			else
				delete the last char of tString
			end if
		end repeat
	end if
	return tString
end handler

end widget
