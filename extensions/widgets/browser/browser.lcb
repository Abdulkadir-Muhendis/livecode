/*
Copyright (C) 2015 LiveCode Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
Module: com.livecode.extensions.livecode.browser

Type: widget

Description: This widget is a web browser.
*/

-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.browser
--

-- dependancy declarations
use com.livecode.foreign
use com.livecode.widget
use com.livecode.engine
use com.livecode.extensions.libbrowser
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "Browser"
metadata author is "Ian Macphail"
metadata version is "1.0.0"
--

property browserUrl get getUrl set setUrl
metadata browserUrl.editor is "com.livecode.pi.text"

property browserHtmltext get getHtmlText set setHtmlText
metadata browserHtmltext.editor is "com.livecode.pi.text"

property browserScrollbars get getScrollbars set setScrollbars
metadata browserScrollbars.editor is "com.livecode.pi.boolean"

property browserUseragent get getUserAgent set setUserAgent
metadata browserUseragent.editor is "com.livecode.pi.text"

property browserJavascripthandlers get getJavaScriptHandlers set setJavaScriptHandlers
metadata browserJavascripthandlers.editor is "com.livecode.pi.text"

--------------------------------------------------------------------------------

foreign handler MCHandlerGetFunctionPtr(in pHandler as any, out rFuncPtr as Pointer) returns CBool binds to "<builtin>"

--------------------------------------------------------------------------------

variable mBrowser as optional MCBrowserRef
variable mBrowserType as String
variable mProperties as optional Array

variable mContentSource as String

--

variable mRequestHandler
variable mJavaScriptHandler

variable mScriptObject as ScriptObject

--------------------------------------------------------------------------------

constant kPersistentProps is ["scrollbars", "allowNewWindows", "enableContextMenu", "userAgent", "javaScriptHandlers"]

--------------------------------------------------------------------------------

/* TODO - need to provide wrapper handler here as we can't (yet) get a pointer to a foreign native handler */
variable mWaitHandler
public handler doWait()
	MCEngineRunloopWait()
end handler

variable mRunloopAction as MCRunloopActionRef
public handler OnModuleLoad()
	/* UNCHECKED */ MCBrowserLibraryInitialize()

	put doWait into mWaitHandler

	variable tWait as Pointer
	MCHandlerGetFunctionPtr(mWaitHandler, tWait)
	MCBrowserLibrarySetWaitFunction(tWait)

	variable tCallback as MCRunloopActionCallback
	variable tContext as Pointer
	if MCBrowserLibraryGetRunloopCallback(tCallback, tContext) then
		MCEngineAddRunloopAction(tCallback, tContext, mRunloopAction)
	end if
end handler

public handler OnLoad(in pProperties as Array)
	loadProperties(pProperties)
end handler

public handler OnSave(out rProperties as Array)
	if mBrowser is not nothing then
		put saveProperties() into mProperties
	end if
	put mProperties into rProperties
end handler

----------

-- called when the widget is created
public handler OnCreate()
	OnModuleLoad()
	
	put OnBrowserRequestCallback into mRequestHandler
	put OnJavaScriptCallback into mJavaScriptHandler

	put the empty string into mBrowserType
	put the empty array into mProperties
	put the empty string into mContentSource
end handler

--

public handler OnOpen()
	variable tParent as Pointer
	/* UNCHECKED */
	MCWidgetGetMyStackNativeView(tParent)
	
	// TODO - add widget code to get stack window handler
	// put my native window into tParent

	variable tFactory as MCBrowserFactoryRef
	/* UNCHECKED */
	MCBrowserFactoryGet(mBrowserType, tFactory)
	
	variable tDisplay as Pointer
	/* UNCHECKED */
	MCWidgetGetMyStackNativeDisplay(tDisplay)
	
	/* UNCHECKED */
	MCBrowserFactoryCreateBrowser(tFactory, tDisplay, tParent, mBrowser)
	
	variable tBrowserView as Pointer
	/* UNCHECKED */
	put MCBrowserGetNativeLayer(mBrowser) into tBrowserView
	
	//set my native layer to tBrowserView
	/* UNCHECKED */
	MCWidgetSetMyNativeLayer(tBrowserView)
	
	variable tRequestCallback as Pointer
	variable tJavaScriptCallback as Pointer
	
	MCHandlerGetFunctionPtr(mRequestHandler, tRequestCallback)
	MCHandlerGetFunctionPtr(mJavaScriptHandler, tJavaScriptCallback)

	MCBrowserSetRequestHandler(mBrowser, tRequestCallback, nothing)
	MCBrowserSetJavaScriptHandler(mBrowser, tJavaScriptCallback, nothing)
	
	// Keep a reference to this widget's script object so we can post to it from
	//   the callbacks (which don't have a target widget when called).
	put my script object into mScriptObject
	
	loadProperties(mProperties)
end handler

--

public handler OnClose()
	// Save browser properties
	put saveProperties() into mProperties
	
	//set my native layer to nothing
	MCWidgetSetMyNativeLayer(nothing)
	
	MCBrowserRelease(mBrowser)
	put nothing into mBrowser
end handler

----------

private handler capitalize(in pString as String) returns String
	if pString is empty then
		return the empty string
	end if
	
	put (the upper of char 1 of pString) into char 1 of pString
	return pString
end handler

public handler OnBrowserRequestCallback(in pContext as optional Pointer, in pBrowser as MCBrowserRef, in pType as MCBrowserRequestType, in pState as MCBrowserRequestState, in pFrame as CBool, in pUrl as ZStringUTF8, in pError as optional ZStringUTF8) returns nothing
	variable tType as String
	put element (pType + 1) of kMCBrowserRequestTypeMap into tType
	
	variable tState as String
	put element (pState + 1) of kMCBrowserRequestStateMap into tState
	
	if pState is kMCBrowserRequestStateFailed then
		log "Failed: %@" with [pError]
	end if
	
	/* Dispatch browser message */
	variable tMessage as String
	if pFrame then
		put "browserFrame" & capitalize(tType) & capitalize(tState) into tMessage
	else
		put "browser" & capitalize(tType) & capitalize(tState) into tMessage
	end if
	
	variable tArgs as List
	if pState is kMCBrowserRequestStateFailed then
		put [pUrl, pError] into tArgs
	else
		put [pUrl] into tArgs
	end if
	
	post tMessage to mScriptObject with tArgs
end handler

public handler OnJavaScriptCallback(in pContext as optional Pointer, in pBrowser as MCBrowserRef, in pHandler as ZStringUTF8, in pParams as MCBrowserListRef)
	log "JS Call: %@ (%@)" with [pHandler, pParams]
	variable tList
	if browserListToLCBList(pParams, tList) then
		log "Params: %@" with [tList]
	end if
	post pHandler to mScriptObject with tList
end handler

----------

private handler getProperty(in pProperty as String) returns any
	if mBrowser is nothing then
		if pProperty is among the keys of mProperties then
			return mProperties[pProperty]
		else
			throw "can't access property: " & pProperty
		end if
	else
		return browserGetProperty(mBrowser, pProperty)
	end if
end handler

private handler setProperty(in pProperty as String, in pValue as any)
	if mBrowser is nothing then
		put pValue into mProperties[pProperty]
	else
		/* UNCHECKED */ browserSetProperty(mBrowser, pProperty, pValue)
	end if
end handler

--

public handler getUrl() returns String
	return getProperty("url")
end handler

public handler setUrl(in pUrl as String)
	put "url" into mContentSource
	if mBrowser is nothing then
		put pUrl into mProperties["url"]
	else
		MCBrowserGoToURL(mBrowser, pUrl)
	end if
end handler

--

public handler getHtmlText() returns String
	return getProperty("htmlText")
end handler

public handler setHtmlText(in pHtmlText as String)
	put "htmlText" into mContentSource
	setProperty("htmlText", pHtmlText)
end handler

--

public handler getUserAgent() returns String
	return getProperty("userAgent")
end handler

public handler setUserAgent(in pUserAgent as String)
	setProperty("userAgent", pUserAgent)
end handler

--

public handler getJavaScriptHandlers() returns String
	return getProperty("javaScriptHandlers")
end handler

public handler setJavaScriptHandlers(in pJavaScriptHandlers as String)
	setProperty("javaScriptHandlers", pJavaScriptHandlers)
end handler

--

public handler getScrollbars() returns Boolean
	return getProperty("scrollbars")
end handler

public handler setScrollbars(in pScrollbars as Boolean)
	setProperty("scrollbars", pScrollbars)
end handler

----------

private handler loadProperties(in pProperties as Array)
	variable tKey
	repeat for each element tKey in kPersistentProps
		if tKey is among the keys of pProperties then
			setProperty(tKey, pProperties[tKey])
		end if
	end repeat
	if "url" is among the keys of pProperties then
		setUrl(pProperties["url"])
	else if "htmlText" is among the keys of pProperties then
		setHtmlText(pProperties["htmltext"])
	end if
end handler

private handler saveProperties() returns Array
	variable tProps
	put the empty array into tProps
	
	variable tKey
	repeat for each element tKey in kPersistentProps
		put getProperty(tKey) into tProps[tKey]
	end repeat
	
	if mContentSource is not empty then
		put getProperty(mContentSource) into tProps[mContentSource]
	end if
	
	return tProps
end handler

----------

public handler OnLaunchUrl(in pUrl as String)
	if mBrowser is not nothing then
		/* UNCHECKED */ MCBrowserGoToURL(mBrowser, pUrl)
	end if
end handler

public handler OnGoBack()
	if mBrowser is not nothing then
		/* UNCHECKED */ MCBrowserGoBack(mBrowser)
	end if
end handler

public handler OnGoForward()
	if mBrowser is not nothing then
		/* UNCHECKED */ MCBrowserGoForward(mBrowser)
	end if
end handler

public handler OnDo(in pScript as String)
	browserEvaluateJavaScript(pScript)
end handler

public handler browserEvaluateJavaScript(in pScript as String) returns String
	if mBrowser is not nothing then
		variable tResult as String
		/* UNCHECKED */ MCBrowserEvaluateJavaScript(mBrowser, pScript, tResult)
		return tResult
	end if
	
	return the empty string
end handler

----------

end widget