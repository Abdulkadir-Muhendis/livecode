/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
Module: com.livecode.extension.livecode.browser

Type: widget

Description: This widget is a web browser.
*/

-- declaring extension as widget, followed by identifier
widget com.livecode.extensions.livecode.browser
--

-- dependancy declarations
use com.livecode.foreign
use com.livecode.widget
use com.livecode.engine
--

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "Browser"
metadata author is "Ian Macphail"
metadata version is "1.0.0"
--

property uri get getUrl set setUrl
metadata uri.editor is "com.livecode.pi.text"

property htmltext get getHtmlText set setHtmlText
metadata htmltext.editor is "com.livecode.pi.text"

property scrollbars get getScrollbars set setScrollbars
metadata scrollbars.editor is "com.livecode.pi.boolean"

property useragent get getUserAgent set setUserAgent
metadata useragent.editor is "com.livecode.pi.text"

property javascripthandlers get getJavaScriptHandlers set setJavaScriptHandlers
metadata javascripthandlers.editor is "com.livecode.pi.text"

--------------------------------------------------------------------------------

type MCBrowserFactoryRef is Pointer
type MCBrowserRef is Pointer

type MCBrowserProperty is CInt

--

foreign handler MCBrowserLibraryInitialize() returns CBool binds to "<builtin>"
foreign handler MCBrowserLibraryFinalize() returns nothing binds to "<builtin>"

foreign handler MCBrowserFactoryGet(in pFactoryId as NativeCString, out rFactory as MCBrowserFactoryRef) returns CBool binds to "<builtin>"
foreign handler MCBrowserFactoryCreateBrowser(in pFactory as MCBrowserFactoryRef, out rBrowser as MCBrowserRef) returns CBool binds to "<builtin>"

foreign handler MCBrowserRetain(in pBrowser as MCBrowserRef) returns MCBrowserRef binds to "<builtin>"
foreign handler MCBrowserRelease(in pBrowser as MCBrowserRef) returns nothing binds to "<builtin>"

foreign handler MCBrowserGetNativeLayer(in pBrowser as MCBrowserRef) returns Pointer binds to "<builtin>"

foreign handler MCBrowserGetBoolProperty(in pBrowser as MCBrowserRef, in pProperty as MCBrowserProperty, out rValue as CBool) returns CBool binds to "<builtin>"
foreign handler MCBrowserSetBoolProperty(in pBrowser as MCBrowserRef, in pProperty as MCBrowserProperty, in pValue as CBool) returns CBool binds to "<builtin>"

foreign handler MCBrowserGetStringProperty(in pBrowser as MCBrowserRef, in pProperty as MCBrowserProperty, out rValue as NativeCString) returns CBool binds to "<builtin>"
foreign handler MCBrowserSetStringProperty(in pBrowser as MCBrowserRef, in pProperty as MCBrowserProperty, in pValue as NativeCString) returns CBool binds to "<builtin>"

foreign handler MCBrowserGoBack(in pBrowser as MCBrowserRef) returns CBool binds to "<builtin>"
foreign handler MCBrowserGoForward(in pBrowser as MCBrowserRef) returns CBool binds to "<builtin>"
foreign handler MCBrowserGoToURL(in pBrowser as MCBrowserRef) returns CBool binds to "<builtin>"
foreign handler MCBrowserEvaluateJavaScript(in pBrowser as MCBrowserRef, in pScript as NativeCString, out rResult as NativeCString) returns CBool binds to "<builtin>"

// TODO - declare functions that accept callbacks (not sure of the format here)

--------------------------------------------------------------------------------

variable mBrowser as optional MCBrowserRef
variable mBrowserType as String
variable mProperties as optional Array

variable mContentSource as String

--------------------------------------------------------------------------------

constant kPropertyScrollbars is 0
constant kPropertyAllowNewWindows is 1
constant kPropertyEnableContextMenu is 2
constant kPropertyUrl is 3
constant kPropertyHtmlText is 4
constant kPropertyUserAgent is 5
constant kPropertyJavaScriptHandlers is 6

constant kPropertyMap is ["scrollbars", "allowNewWindows", "enableContextMenu", "url", "htmlText", "userAgent", "javaScriptHandlers"]

--

constant kStringProps is ["url", "htmlText", "userAgent", "javaScriptHandlers"]
constant kBoolProps is ["scrollbars", "allowNewWindows", "enableContextMenu"]
constant kPersistentProps is ["scrollbars", "allowNewWindows", "enableContextMenu", "userAgent", "javaScriptHandlers"]

--------------------------------------------------------------------------------

public handler OnModuleLoad()
	/* UNCHECKED */
	MCBrowserLibraryInitialize()
end handler

public handler OnLoad(in pProperties as Array)
	loadProperties(pProperties)
end handler

public handler OnSave(out rProperties as Array)
	if mBrowser is not nothing then
		put saveProperties() into mProperties
	end if
	put mProperties into rProperties
end handler

----------

-- called when the widget is created
public handler OnCreate()
	OnModuleLoad()

	put the empty string into mBrowserType
	put the empty array into mProperties
	put the empty string into mContentSource
end handler

--

public handler OnOpen()
	variable tParent as Pointer
	// TODO - add widget code to get stack window handler
	// put my native window into tParent

	variable tFactory as MCBrowserFactoryRef
	/* UNCHECKED */
	MCBrowserFactoryGet(mBrowserType, tFactory)
	
	/* UNCHECKED */
	MCBrowserFactoryCreateBrowser(tFactory, mBrowser)
	
	variable tBrowserView as Pointer
	/* UNCHECKED */
	put MCBrowserGetNativeLayer(mBrowser) into tBrowserView
	
	// TODO - add widget code to set native layer from view
	set my native layer to tBrowserView
	
	loadProperties(mProperties)
end handler

--

public handler OnClose()
	// Save browser properties
	put saveProperties() into mProperties
	
	set my native layer to nothing
	
	MCBrowserRelease(mBrowser)
	put nothing into mBrowser
end handler

----------

private handler getProperty(in pProperty as String) returns any
	if mBrowser is nothing then
		if pProperty is among the keys of mProperties then
			return mProperties[pProperty]
		else
			return nothing
		end if
	else
		return getBrowserProperty(pProperty)
	end if
end handler

private handler setProperty(in pProperty as String, in pValue as any)
	if mBrowser is nothing then
		put pValue into mProperties[pProperty]
	else
		setBrowserProperty(pProperty, pValue)
	end if
end handler

--

public handler getUrl() returns String
	return getProperty("url")
end handler

public handler setUrl(in pUrl as String)
	put "url" into mContentSource
	setProperty("url", pUrl)
end handler

--

public handler getHtmlText() returns String
	return getProperty("htmlText")
end handler

public handler setHtmlText(in pHtmlText as String)
	put "htmltext" into mContentSource
	setProperty("htmlText", pHtmlText)
end handler

--

public handler getUserAgent() returns String
	return getProperty("userAgent")
end handler

public handler setUserAgent(in pUserAgent as String)
	setProperty("userAgent", pUserAgent)
end handler

--

public handler getJavaScriptHandlers() returns String
	return getProperty("javaScriptHandlers")
end handler

public handler setJavaScriptHandlers(in pJavaScriptHandlers as String)
	setProperty("javaScriptHandlers", pJavaScriptHandlers)
end handler

--

public handler getScrollbars() returns Boolean
	return getProperty("scrollbars")
end handler

public handler setScrollbars(in pScrollbars as Boolean)
	setProperty("scrollbars", pScrollbars)
end handler

----------

private handler lookupProperty(in pProp as String, out rEnum as Integer) returns Boolean
	variable tIndex as Integer
	put the index of pProp in kPropertyMap into tIndex
	
	if tIndex is 0 then
		return false
	end if
	
	put tIndex - 1 into rEnum
	return true
end handler

----------

private handler getBrowserProperty(in pProperty as String) returns any
	variable tProperty as Integer
	if not lookupProperty(pProperty, tProperty) then
		return nothing
	end if
	
	variable tValue as optional any
	if pProperty is in kStringProps then
		/* UNCHECKED */
		MCBrowserGetStringProperty(mBrowser, tProperty, tValue)
	else if pProperty is in kBoolProps then
		/* UNCHECKED */
		MCBrowserGetBoolProperty(mBrowser, tProperty, tValue)
	end if
	
	return tValue
end handler

private handler setBrowserProperty(in pProperty as String, in pValue as any)
	variable tProperty as Integer
	if not lookupProperty(pProperty, tProperty) then
		return
	end if
	
	if pProperty is in kStringProps then
		/* UNCHECKED */
		MCBrowserSetStringProperty(mBrowser, tProperty, pValue)
	else if pProperty is in kBoolProps then
		/* UNCHECKED */
		MCBrowserSetBoolProperty(mBrowser, tProperty, pValue)
	end if
end handler

--

private handler loadProperties(in pProperties as Array)
	variable tKey
	repeat for each element tKey in kPersistentProps
		if tKey is among the keys of pProperties then
			setProperty(tKey, pProperties[tKey])
		end if
	end repeat
	if "url" is among the keys of pProperties then
		setUrl(pProperties["url"])
	else if "htmltext" is among the keys of pProperties then
		setHtmlText(pProperties["htmltext"])
	end if
end handler

private handler saveProperties() returns Array
	variable tProps
	put the empty array into tProps
	
	variable tKey
	repeat for each element tKey in kPersistentProps
		put getProperty(tKey) into tProps[tKey]
	end repeat
	
	if mContentSource is not nothing then
		put getProperty(mContentSource) into tProps[mContentSource]
	end if
	
	return tProps
end handler

end widget