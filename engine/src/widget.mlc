/* Copyright (C) 2003-2013 Runtime Revolution Ltd.
 
 This file is part of LiveCode.
 
 LiveCode is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License v3 as published by the Free
 Software Foundation.
 
 LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

/*
This library consists of the operations on widgets provided by LiveCode Builder.

Tags: Widget

Name: OnOpen
Type: message
Syntax: OnOpen
Summary: Sent when the widget is opened.
Example:
	public handler OnOpen()
		// do something
	end handler
Description:
Handle the OnOpen message to have the widget perform an action when it is opened in LiveCode.


Name: OnClose
Type: message
Syntax: OnClose
Summary: Sent when the widget is closed.


Name: OnAttach
Type: message
Syntax: OnAttach
Summary: Sent when the widget is attached.


Name: OnDetach
Type: message
Syntax: OnDetach
Summary: Sent when the widget is detached.


Name: OnPaint
Type: message
Syntax: OnPaint
Summary: Sent when the widget is drawn.


Name: OnGeometryChanged
Type: message
Syntax: OnPaint
Summary: Sent when the widget geometry changed.


Name: OnVisibilityChanged
Type: message
Syntax: OnVisibilityChanged <isVisible>
Summary: Sent when the widget visibility changed.
Parameters:
isVisible(bool): Whether the widget is now visible or not.


Name: OnSave
Type: message
Syntax: OnSave
Summary: Sent when the widget is saved.


Name: OnLoad
Type: message
Syntax: OnLoad
Summary: Sent when the widget is loaded.


Name: OnCreate
Type: message
Syntax: OnCreate
Summary: Sent when the widget is created.


Name: OnDestroy
Type: message
Syntax: OnDestroy
Summary: Sent when the widget is deleted.


Name: OnParentPropChanged
Type: message
Syntax: OnParentPropChanged
Summary: Sent when a property of the widget parent is changed.


Name: OnStopEditing
Type: message
Syntax: OnStopEditing
Summary: Sent when the browse tool is selected.


Name: OnStartEditing
Type: message
Syntax: OnStartEditing
Summary: Sent when the pointer tool is selected.


Name: OnLayerChanged
Type: message
Syntax: OnLayerChanged
Summary: Sent when the widget layer is changed.


Name: OnTimer
Type: message
Syntax: OnTimer
Summary: Sent when the widget layer is changed.


Name: OnMouseEnter
Type: message
Syntax: OnMouseEnter
Summary: Sent when the mouse pointer enters the widget's rect.


Name: OnMouseLeave
Type: message
Syntax: OnMouseLeave
Summary: Sent when the mouse pointer leaves the widget's rect.


Name: OnMouseMove
Type: message
Syntax: OnMouseMove
Summary: Sent when the mouse pointer moves within the widget's rect.


Name: OnMouseRelease
Type: message
Syntax: OnMouseRelease
Summary: Sent when the mouse button is released outside of the widget's rect.


Name: OnMouseDown
Type: message
Syntax: OnMouseDown
Summary: Sent when the mouse button is pushed within the widget's rect.


Name: OnMouseUp
Type: message
Syntax: OnMouseUp
Summary: Sent when the mouse button is released within the widget's rect.


Name: OnMouseScroll
Type: message
Syntax: OnMouseScroll
Summary: Sent when the mouse wheel is scrolled within the widget's rect.


Name: OnMouseStillDown
Type: message
Syntax: OnMouseStillDown
Summary: Sent when the mouse button is held down within the widget's rect.


Name: OnMouseHover
Type: message
Syntax: OnMouseHover
Summary: Sent when the mouse pointer hovers over the widget's rect.


Name: OnMouseStillHover
Type: message
Syntax: OnMouseHover
Summary: Sent when the mouse pointer continues to hover over the widget's rect.


Name: OnMouseCancelHover
Type: message
Syntax: OnMouseHover
Summary: Sent when the mouse pointer continues to hover outside of the widget's rect.


Name: OnTouchStart
Type: message
Syntax: OnTouchStart
Summary: Sent when a touch event begins within the widget's rect.


Name: OnTouchMove
Type: message
Syntax: OnTouchMove
Summary: Sent when a touch event moves within the widget's rect.


Name: OnTouchEnter
Type: message
Syntax: OnTouchEnter
Summary: Sent when a touch event moves into the widget's rect from outside.


Name: OnTouchLeave
Type: message
Syntax: OnTouchEnter
Summary: Sent when a touch event moves outside of the widget's rect from inside.


Name: OnTouchFinish
Type: message
Syntax: OnTouchFinish
Summary: Sent when a touch event finishes within the widget's rect.


Name: OnTouchCancel
Type: message
Syntax: OnTouchCancel
Summary: Sent when a touch event finishes outside of the widget's rect.


Name: OnFocusEnter
Type: message
Syntax: OnFocusEnter
Summary: Sent when the widget gains focus.


Name: OnFocusLeave
Type: message
Syntax: OnFocusLeave
Summary: Sent when the widget loses focus.


Name: OnKeyPress
Type: message
Syntax: OnKeyPress <keyText>
Summary: Sent when a key is pressed while the widget has focus.
Parameters:
keyText(string): The key pressed


Name: OnModifiersChanged
Type: message
Syntax: OnModifiersChanged
Summary: Sent when the keyboard modifiers are changed.


Name: OnActionKeyPress
Type: message
Syntax: OnActionKeyPress <keyText>
Summary: Sent when an action key is pressed while the widget has focus.
Parameters:
keyText(string): The key pressed


Name: OnDragEnter
Type: message
Syntax: OnDragEnter
Summary: Sent when an object is dragged onto the widget rect.


Name: OnDragLeave
Type: message
Syntax: OnDragEnter
Summary: Sent when an object is dragged outside of the widget rect.


Name: OnDragMove
Type: message
Syntax: OnDragMove
Summary: Sent when a dragged object is moved within the widget rect.


Name: OnDragDrop
Type: message
Syntax: OnDragDrop
Summary: Sent when a dragged object is released within the widget rect.


Name: OnDragStart
Type: message
Syntax: OnDragStart
Summary: Sent when the widget begins to be dragged


Name: OnDragFinish
Type: message
Syntax: OnDragStart
Summary: Sent when the widget finishes being dragged


Name: OnClick
Type: message
Syntax: OnClick
Summary: Sent when the widget is clicked.


Name: OnDoubleClick
Type: message
Syntax: OnDoubleClick
Summary: Sent when the widget is double-clicked.

*/

module com.livecode.widget

use com.livecode.canvas
use com.livecode.engine

// ---------- Widget commands ---------- //

public foreign handler MCWidgetExecRedrawAll() as undefined binds to "<builtin>"
public foreign handler MCWidgetExecScheduleTimerIn(in pTime as double) as undefined binds to "<builtin>"
public foreign handler MCWidgetExecCancelTimer() as undefined binds to "<builtin>"
public foreign handler MCWidgetEvalInEditMode(out rInEditMode as bool) as undefined binds to "<builtin>"
public foreign handler MCWidgetExecDispatch(in pIsFunction as bool, in pMessage as string) as any binds to "<builtin>"
public foreign handler MCWidgetExecDispatchWithArguments(in pIsFunction as bool, in pMessage as string, in pArguments as optional list) as any binds to "<builtin>"

/* 
Summary:	Redraws the widget.

Example:

Description:

References: OnPaint(message)
*/	

syntax RedrawAll is statement
  "redraw" "all"
begin
  MCWidgetExecRedrawAll()
end syntax

/* 
Summary:	Schedules a timer.
Time:		An expression which evaluates to a number.

Example:

Description:

References: OnTimer(message)
*/	

syntax ScheduleTimerIn is statement
  "schedule" "timer" "in" <Time: Expression> "seconds"
begin
  MCWidgetExecScheduleTimerIn(Time)
end syntax

/* 
Summary:	Cancels a timer.

Example:

Description:
Use to cancel a timer scheduled by the <ScheduleTimerIn|schedule> statement.

References: OnTimer(message), ScheduleTimerIn(statement)
*/	

syntax CancelTimer is statement
  "cancel" "timer"
begin
  MCWidgetExecCancelTimer()
end syntax

/* 
Summary:	Determines whether the IDE is in edit mode.

Example:

Description:

*/	


syntax IsEditMode is expression
  "in" "edit" "mode"
begin
  MCWidgetEvalInEditMode(output)
end syntax

/* 
Summary:	Dispatches a message to the widget script object.

Example:

Description:

*/	

syntax Dispatch is statement
    "dispatch" ( "function" <IsFunction=true> | "command" <IsFunction=false> | <IsFunction=false> ) <Message: Expression> [ "with" <Arguments: Expression> ]
begin
    MCWidgetExecDispatch(IsFunction, Message)
    MCWidgetExecDispatchWithArguments(IsFunction, Message, Arguments)
end syntax


// ---------- External properties of widgets ---------- //

public foreign handler MCWidgetGetScriptObject(out rObject as ScriptObject) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetRectangle(out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetFrame(out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetBounds(out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetWidth(out rWidth as real) as undefined binds to "<builtin>"
public foreign handler MCWidgetSetWidth(in pWidth as real) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetHeight(out rHeight as real) as undefined binds to "<builtin>"
public foreign handler MCWidgetSetHeight(in pHeight as real) as undefined binds to "<builtin>"

/* 
Summary:	Obtains a reference to the widget script object.

Returns:	The widget script object.

Example:

Description:

*/	

syntax MyScriptObject is expression
  "my" "script" "object"
begin
    MCWidgetGetScriptObject(output)
end syntax

/* 
Summary:	

Returns:	The rectangle of the widget script object.

Example:

Description:

*/	

syntax MyRectangle is expression
  "my" "rectangle"
begin
    MCWidgetGetRectangle(output)
end syntax

syntax MyFrame is expression
  "my" "frame"
begin
    MCWidgetGetFrame(output)
end syntax

syntax MyBounds is expression
  "my" "bounds"
begin
    MCWidgetGetBounds(output)
end syntax

syntax MyWidth is expression
  "my" "width"
begin
    MCWidgetGetWidth(output)
    MCWidgetSetWidth(input)
end syntax

syntax MyHeight is expression
  "my" "height"
begin
    MCWidgetGetHeight(output)
    MCWidgetSetHeight(input)
end syntax


// ---------- Synchronous and asynchronous ("current") event information ---------- //

//foreign type PressedState binds to "kMCPressedState"

public foreign handler MCWidgetGetMousePosition(in pCurrent as bool, out rLocation as Point) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetClickPosition(in pCurrent as bool, out rLocation as Point) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetMouseButtonState(in pIndex as uint, out rPressed /*as PressedState*/) as undefined binds to "<builtin>"
public foreign handler MCWidgetGetModifierKeys(in pCurrent as bool, out rKeys as list) as undefined binds to "<builtin>"

syntax TheMouseLocation is expression
  "the" ( "current" <IsCurrent=true> | <IsCurrent=false> ) "mouse" "position"
begin
    MCWidgetGetMousePosition(IsCurrent, output)
end syntax

syntax TheClickLocation is expression
  "the" ( "current" <IsCurrent=true> | <IsCurrent=false> ) "click" "position"
begin
    MCWidgetGetClickPosition(IsCurrent, output)
end syntax

syntax MouseButtonName is phrase
    ( "primary" <Index=1> | "secondary" <Index=2> | "left" <Index=1> | "right" <Index=2> | "middle" <Index=3> )
begin
end syntax

syntax TheMouseButtonState is expression
  "the" <Index: MouseButtonName> "mouse" "button"
begin
    MCWidgetGetMouseButtonState(Index, output)
end syntax

syntax TheModifierKeys is expression
  "the" ( "current" <IsCurrent=true> | <IsCurrent=false> ) "modifier" "keys"
begin
    MCWidgetGetModifierKeys(IsCurrent, output)
end syntax


// ---------- Syntactic sugar for "is [not] [currently] pressed" ---------- //

public foreign handler MCWidgetEvalStateIsPressed(in pState /*as PressedState*/, in pCurrently as bool, out rPressed as bool) as undefined binds to "<builtin>"
public foreign handler MCWidgetEvalStateIsNotPressed(in pState /*as PressedState*/, in pCurrently as bool, out rNotPressed as bool) as undefined binds to "<builtin>"

syntax IsPressed is postfix operator with precedence 5
  <mState: Expression> "is" ( "currently" <Currently=true> | <Currently=false> ) "pressed"
begin
    MCWidgetEvalStateIsPressed(mState, Currently, output)
end syntax

syntax IsNotPressed is postfix operator with precedence 5
  <mState: Expression> "is not" ( "currently" <Currently=true> | <Currently=false> ) "pressed"
begin
    MCWidgetEvalStateIsNotPressed(mState, Currently, output)
end syntax


// ---------- Syntactic sugar for points and rects ---------- //

public foreign handler MCWidgetEvalIsPointWithinRect(in pPoint as Point, in pRect as Rectangle, out rWithin as bool) as undefined binds to "<builtin>"
public foreign handler MCWidgetEvalIsPointNotWithinRect(in pPoint as Point, in pRect as Rectangle, out rNotWithin as bool) as undefined binds to "<builtin>"

/* 
Summary:	Determines whether a point is within a rectangle.
Point:		An expression that evaluates to a Point.
Rect: 		An expression that evaluates to a Rectangle.

Example:
	variable tClick as Point
	put the click position into tClick
	
	variable tRect as Rectangle
	put my bounds into tRect
	
	if tClick is within tRect then
		// click was within widget bounds
	end if
*/
	
syntax IsPointWithinRect is neutral binary operator with precedence 5
  <mPoint: Expression> "is" "within" <mRect: Expression>
begin
    MCWidgetEvalIsPointWithinRect(mPoint, mRect, output)
end syntax

/* 
Summary:	Determines whether a point is within a rectangle.
Point:		An expression that evaluates to a Point.
Rect: 		An expression that evaluates to a Rectangle.

Example:
	variable tClick as Point
	put the click position into tClick
	
	variable tRect as Rectangle
	put my bounds into tRect
	
	if tClick is not within tRect then
		// click was outside of widget bounds
	end if
*/
	
syntax IsPointNotWithinRect is neutral binary operator with precedence 5
  <Point: Expression> "is not" "within" <Rect: Expression>
begin
    MCWidgetEvalIsPointNotWithinRect(Point, Rect, output)
end syntax

end module
