/*  
This module specifies the syntax definitions and bindings for canvas drawing operations in modular LiveCode.
*/

module com.livecode.canvas

public type CanvasFloat is float

// Point
public foreign type Point binds to "kMCCanvasPointTypeInfo"

// Rectangle
public foreign type Rectangle binds to "kMCCanvasRectangleTypeInfo"

// Transform
public foreign type Transform binds to "kMCCanvasTransformTypeInfo"

// Color
public foreign type Color binds to "kMCCanvasColorTypeInfo"

// Paint (supertype of pattern, gradient, solidpaint)
public foreign type Paint binds to "kMCCanvasPaintTypeInfo"

// Solid Paint
public foreign type SolidPaint binds to "kMCCanvasSolidPaintTypeInfo"

// Pattern
public foreign type Pattern binds to "kMCCanvasPatternTypeInfo"

// Gradient
public foreign type Gradient binds to "kMCCanvasGradientTypeInfo"
public foreign type GradientStop binds to "kMCCanvasGradientStopTypeInfo"

// Image
public foreign type Image binds to "kMCCanvasImageTypeInfo"

// Path
public foreign type Path binds to "kMCCanvasPathTypeInfo"

// Effect
public foreign type Effect binds to "kMCCanvasEffectTypeInfo"

// Font
public foreign type Font binds to "kMCCanvasFontTypeInfo"

// Canvas
public foreign type Canvas binds to "kMCCanvasTypeInfo"

////////////////////////////////////////////////////////////////////////////////
// Rectangle

// Constructors

public foreign handler MCCanvasRectangleMakeWithLTRB(in pLeft as CanvasFloat, in pTop as CanvasFloat, in pRight as CanvasFloat, in pBottom as CanvasFloat, out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleMakeWithList(in pRect as list, out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetLeft(in pRect as Rectangle, out rLeft as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetLeft(in pLeft as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetTop(in pRect as Rectangle, out rTop as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetTop(in pTop as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetRight(in pRect as Rectangle, out rRight as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetRight(in pRight as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetBottom(in pRect as Rectangle, out rBottom as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetBottom(in pBottom as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetWidth(in pRect as Rectangle, out rWidth as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetWidth(in pWidth as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleGetHeight(in pRect as Rectangle, out rHeight as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasRectangleSetHeight(in pHeight as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"

/*
Summary:	Creates a new rectangle value.

mRect:		An expression which evaluates to a list of 4 numbers, the left, top, right and bottom edges of the rectangle.

Returns:	A new rectange with the given edges.

Example:
	variable tRect
	put rectangle [50, 50, 150, 100] into tRect

Tags:		Canvas
*/

syntax RectangleMake is prefix operator with precedence 2
	"rectangle" <mRect: Expression>
begin
    MCCanvasRectangleMakeWithList(mRect, output)
end syntax

/*
Summary:	The left edge of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The location along the x-axis of the left edge of the rectangle.

>*Note:* Setting the left of a rectangle will reposition it without altering the width or height.

Example:
	variable tLeft
	put the left of tRect into tLeft
	subtract 10 from tLeft
	set the left of tRect to tLeft

Tags:		Canvas
*/

syntax RectanglePropertyLeft is prefix operator with precedence 2
	"the" "left" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetLeft(mRect, output)
	MCCanvasRectangleSetLeft(input, mRect)
end syntax

syntax RectanglePropertyX is prefix operator with precedence 2
	"the" "x" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetLeft(mRect, output)
	MCCanvasRectangleSetLeft(input, mRect)
end syntax

/*
Summary:	The top edge of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The location along the y-axis of the top edge of the rectangle.

>*Note:* Setting the top of a rectangle will reposition it without altering the width or height.

Example:
	variable tTop
	put the top of tRect into tTop
	subtract 10 from tTop
	set the top of tRect to tTop

Tags:		Canvas
*/

syntax RectanglePropertyTop is prefix operator with precedence 2
	"the" "top" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetTop(mRect, output)
	MCCanvasRectangleSetTop(input, mRect)
end syntax

syntax RectanglePropertyY is prefix operator with precedence 2
	"the" "y" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetTop(mRect, output)
	MCCanvasRectangleSetTop(input, mRect)
end syntax

/*
Summary:	The right edge of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The location along the x-axis of the right edge of the rectangle.

>*Note:* Setting the right of a rectangle will reposition it without altering the width or height.

Example:
	variable tRight
	put the right of tRect into tRight
	add 10 to tRight
	set the right of tRect to tRight

Tags:		Canvas
*/

syntax RectanglePropertyRight is prefix operator with precedence 2
	"the" "right" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetRight(mRect, output)
	MCCanvasRectangleSetRight(input, mRect)
end syntax

/*
Summary:	The bottom edge of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The location along the y-axis of the bottom edge of the rectangle.

>*Note:* Setting the bottom of a rectangle will reposition it without altering the width or height.

Example:
	variable tBottom
	put the bottom of tRect into tBottom
	add 10 to tBottom
	set the bottom of tRect to tBottom

Tags:		Canvas
*/

syntax RectanglePropertyBottom is prefix operator with precedence 2
	"the" "bottom" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetBottom(mRect, output)
	MCCanvasRectangleSetBottom(input, mRect)
end syntax

/*
Summary:	The width of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The width of the rectangle.

>*Note:* Setting the width of a rectangle will resize it without moving the left edge, expanding or contracting from the right.

Example:
	variable tWidth
	put the width of tRect into tWidth
	add 10 to tWidth
	set the width of tRect to tWidth

Tags:		Canvas
*/

syntax RectanglePropertyWidth is prefix operator with precedence 2
	"the" "width" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetWidth(mRect, output)
	MCCanvasRectangleSetWidth(input, mRect)
end syntax

/*
Summary:	The height of a rectangle value.

mRect:		An expression which evaluates to a rectangle.

Description:
The height of the rectangle.

>*Note:* Setting the height of a rectangle will resize it without moving the top edge, expanding or contracting from the bottom.

Example:
	variable tHeight
	put the height of tRect into tHeight
	add 10 to tHeight
	set the height of tRect to tHeight

Tags:		Canvas
*/

syntax RectanglePropertyHeight is prefix operator with precedence 2
	"the" "height" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetHeight(mRect, output)
	MCCanvasRectangleSetHeight(input, mRect)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Point

// Constructors

public foreign handler MCCanvasPointMake(in pX as CanvasFloat, in pY as CanvasFloat, out rPoint as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasPointMakeWithList(in pPoint as list, out rPoint as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasPointGetX(in pPoint as Point, out rX as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPointSetX(in pX as CanvasFloat, inout xPoint as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasPointGetY(in pPoint as Point, out rY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPointSetY(in pY as CanvasFloat, inout xPoint as Point) as undefined binds to "<builtin>"

/*
Summary:	Creates a new point value.

mPoint:		An expression which evaluates to a list of 2 numbers, the x and y coordinates of the point.

Returns:	A new point with the given coordinates

Example:
	variable tPoint
	put point [50, 100] into tPoint

Tags:	Canvas
*/

syntax PointMake is prefix operator with precedence 2
	"point" <mPoint: Expression>
begin
	MCCanvasPointMakeWithList(mPoint, output)
end syntax

/*
Summary:	The x coordinate of a point value.

mPoint:		An expression which evaluates to a point.

Description:	The x coordinate of <mPoint>.

Example:
	variable tX
	put the x of tPoint into tX
	add 10 to tX
	set the x of tPoint to tX

Tags:	Canvas
*/

syntax PointPropertyX is prefix operator with precedence 2
	"the" "x" "of" <mPoint: Expression>
begin
	MCCanvasPointGetX(mPoint, output)
	MCCanvasPointSetX(input, mPoint)
end syntax

/*
Summary:	The y coordinate of a point value.

mPoint:		An expression which evaluates to a point.

Description:	The y coordinate of <mPoint>.

Example:
	variable tY
	put the y of tPoint into tY
	add 10 to tY
	set the y of tPoint to tY

Tags:	Canvas
*/

syntax PointPropertyY is prefix operator with precedence 2
	"the" "y" "of" <mPoint: Expression>
begin
	MCCanvasPointGetY(mPoint, output)
	MCCanvasPointSetY(input, mPoint)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Color

// Constructors

public foreign handler MCCanvasColorMakeRGBA(in pRed as CanvasFloat, in pGreen as CanvasFloat, in pBlue as CanvasFloat, in pAlpha as CanvasFloat, out rColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorMakeWithList(in pColor as list, out rColor as Color) as undefined binds to "<builtin>"
//public foreign handler MCCanvasColorMakeWithString(in pList as string, out rColor as Color)

/*
Summary:	Creates a new color value.

mColor:		An expression which evaluates to a list of 3 or 4 numbers, the red, green, blue, and (optional) alpha components of the color.

Returns:	A new color with the given RGBA values.

Description:
>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1. The alpha component represents the opacity of the color. If the alpha component is not specified then it is assumed to be 1 (fully opaque).

Example:
	variable tColor
	// Set tColor to opaque red
	put color [1.0, 0.0, 0.0] into tColor
	// Set tColor to partially transparent cyan
	put color [0.0, 1.0, 1.0, 0.75] into tColor

Tags: Canvas
*/

syntax ColorMake is prefix operator with precedence 4
	"color" <mColor: Expression>
begin
	MCCanvasColorMakeWithList(mColor, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasColorGetRed(in pColor as Color, out rRed as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorSetRed(in pRed as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorGetGreen(in pColor as Color, out rGreen as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorSetGreen(in pGreen as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorGetBlue(in pColor as Color, out rBlue as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorSetBlue(in pBlue as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorGetAlpha(in pColor as Color, out rAlpha as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasColorSetAlpha(in pAlpha as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"

/*
Summary:	The red component of a color value.

mColor:		An expression which evaluates to a color.

Description:
The red component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
	variable tRed
	// Store the old red value
	put the red of tColor into tRed
	// Invert the intensity of the red color component
	set the red of tColor to 1.0 - tRed

Tags: Canvas
*/

syntax ColorPropertyRed is prefix operator with precedence 4
	"the" "red" "of" <mColor: Expression>
begin
	MCCanvasColorGetRed(mColor, output)
	MCCanvasColorSetRed(input, mColor)
end syntax

/*
Summary:	The green component of a color value.

mColor:		An expression which evaluates to a color.

Description:
The green component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
	variable tGreen
	// Store the old green value
	put the green of tColor into tGreen
	// Remove any green component from the color
	set the green of tColor to 0

Tags: Canvas
*/

syntax ColorPropertyGreen is prefix operator with precedence 4
	"the" "green" "of" <mColor: Expression>
begin
	MCCanvasColorGetGreen(mColor, output)
	MCCanvasColorSetGreen(input, mColor)
end syntax

/*
Summary:	The blue component of a color value.

mColor:		An expression which evaluates to a color.

Description:
The blue component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
	variable tBlue
	// Store the old blue value
	put the blue of tColor into tBlue
	// Set the blue component of the color to full intensity
	set the blue of tColor to 1

Tags: Canvas
*/

syntax ColorPropertyBlue is prefix operator with precedence 4
	"the" "blue" "of" <mColor: Expression>
begin
	MCCanvasColorGetBlue(mColor, output)
	MCCanvasColorSetBlue(input, mColor)
end syntax

/*
Summary:	The alpha component of a color value.

mColor:		An expression which evaluates to a color.

Description:
The alpha component of <mColor>

>*Note:* The alpha value represents the opacity of the color, expressed as a real number between 0 (fully transparent) and 1 (fully opaque).

Example:
	variable tAlpha
	// Store the old alpha value
	put the alpha of tColor into tAlpha
	// Make the color semi-transparent
	set the alpha of tColor to 0.5

Tags: Canvas
*/

syntax ColorPropertyAlpha is prefix operator with precedence 4
	"the" "alpha" "of" <mColor: Expression>
begin
	MCCanvasColorGetAlpha(mColor, output)
	MCCanvasColorSetAlpha(input, mColor)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Transform

// Constructors

public foreign handler MCCanvasTransformMakeIdentity(out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeScale(in pScaleX as CanvasFloat, in pScaleY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeScaleWithList(in pScale as list, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeRotation(in pRotation as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeTranslation(in pX as CanvasFloat, in pY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeTranslationWithList(in pTranslation as list, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeWithMatrixValues(in pA as CanvasFloat, in pB as CanvasFloat, in pC as CanvasFloat, in pD as CanvasFloat, in pTX as CanvasFloat, in pTY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformMakeWithMatrixArray(in pMatrix as array, out rTransform as Transform) as undefined binds to "<builtin>"

/*
Summary:	The identity transform.

Returns:	A new identity transform.

Description:
The identity transform represents a coordinate transformation where the set of coordinates remain the same after it is applied. This can be useful when specifying that coordinates should not be altered, or as a starting point when combining transforms to produce a more complex one.

Example:
	variable tTransform
	put the identity transform into tTransform


Tags: Canvas
*/

syntax TransformMakeIdentity is expression
	"the" "identity" "transform"
begin
	MCCanvasTransformMakeIdentity(output)
end syntax

/*
Summary:	Creates a new scaling transform value.

mScale:		An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Returns:	A new scale transform.

Example:
	variable tTransform
	// Create x2 uniformly scaling transform
	put transform with scale 2 into tTransform
	// Create transform which only scales in the direction of the x axis
	put transform with scale [ 2, 1 ] into tTransform

Tags: Canvas
*/

syntax TransformMakeScale is prefix operator with precedence 4
	"transform" "with" "scale" <mScale: Expression>
begin
    MCCanvasTransformMakeScaleWithList(mScale, output)
end syntax

/*
Summary:	Creates a new rotation transform value.

mRotation:	An expression which evaluates to a number, the number of degrees of the rotation.

Returns:	A new rotation transform.

Example:
	variable tTransform
	// Create 30 degree rotation transform
	put transform with rotation by 30 into tTransform

Tags: Canvas
*/

syntax TransformMakeRotation is prefix operator with precedence 4
	"transform" "with" "rotation" "by" <mRotation: Expression>
begin
	MCCanvasTransformMakeRotation(mRotation, output)
end syntax

/*
Summary:		Creates a new translation transform.

mTranslation:	An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Returns:	A new translation transform.

Example:
	variable tTransform
	// Create translation transform to offset coordinates by 50,100
	put transform with translation [50,100] into tTransform

Tags: Canvas
*/

syntax TransformMakeTranslation is prefix operator with precedence 4
	"transform" "with" "translation" <mTranslation: Expression>
begin
    MCCanvasTransformMakeTranslationWithList(mTranslation, output)
end syntax

// TODO - define & implement remaining transform constructors

//////////

// Properties

public foreign handler MCCanvasTransformGetScaleAsList(in pTransform as Transform, out rScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformSetScaleAsList(in pScaleX as list, inout xTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformGetRotation(in pTransform as Transform, out rRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformSetRotation(in pRotation as CanvasFloat, inout xTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformGetSkewAsList(in pTransform as Transform, out rSkew as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformSetSkewAsList(in pSkew as list, inout xTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformGetTranslationAsList(in pTransform as Transform, out rTranslation as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformSetTranslationAsList(in pTranslation as list, inout xTransform as Transform) as undefined binds to "<builtin>"

public foreign handler MCCanvasTransformGetMatrix(in pTransform as Transform, out rMatrix as array) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformSetMatrix(in pMatrix as array, inout xTransform as Transform) as undefined binds to "<builtin>"

public foreign handler MCCanvasTransformGetInverse(in pTransform as Transform, out rInverse as Transform) as undefined binds to "<builtin>"

/*
Summary:		The scale component of a transform.

mTransform:		An expression which evaluates to a transform.

Description:	The scale of <mTransform> as a list of 2 numbers (the x and y scales)

Example:
	variable tScale
	// Store the old scale component
	put the scale of tTransform into tScale
	// Modify the scale by adding 1 to the x scale value
	set the scale of tTransform to [item 1 of tScale + 1, item 2 of tScale]

Tags: Canvas
*/

syntax TransformPropertyScale is prefix operator with precedence 4
	"the" "scale" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetScaleAsList(mTransform, output)
	MCCanvasTransformSetScaleAsList(input, mTransform)
end syntax

/*
Summary:		The rotation component of a transform.

mTransform:		An expression which evaluates to a transform.

Description:	The rotation of <mTransform> as a number of degrees.

Example:
	variable tRotation
	// Store the old rotation component
	put the rotation of tTransform into tRotation
	// Double the rotation
	set the rotation of tTransform to tRotation * 2

Tags: Canvas
*/

syntax TransformPropertyRotation is prefix operator with precedence 4
	"the" "rotation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetRotation(mTransform, output)
	MCCanvasTransformSetRotation(input, mTransform)
end syntax

/*
Summary:		The skew component of a transform.

mTransform:		An expression which evaluates to a transform.

Description:	The skew of <mTransform> as a list of 2 numbers (the x and y skew values).

Example:
	variable tSkew
	// Store the old skew component
	put the skew of tTransform into tSkew
	// Remove the skew
	set the skew of tTransform to [0,0]

Tags: Canvas
*/

syntax TransformPropertySkew is prefix operator with precedence 4
	"the" "skew" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetSkewAsList(mTransform, output)
	MCCanvasTransformSetSkewAsList(input, mTransform)
end syntax

/*
Summary:		The translation component of a transform.

mTransform:		An expression which evaluates to a transform.

Description:	The translation of <mTransform> as a list of 2 numbers (the x and y offset values).

Example:
	variable tTranslation
	// Store the old translation component
	put the translation of tTransform into tTranslation
	// Adjust the offset of the transformation
	set the translation of tTransform to [item 1 of tTranslation + tLeft, item 2 of tTranslation + tTop]

Tags: Canvas
*/

syntax TransformPropertyTranslation is prefix operator with precedence 4
	"the" "translation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetTranslationAsList(mTransform, output)
	MCCanvasTransformSetTranslationAsList(input, mTransform)
end syntax

/*
Summary:		The matrix values of a transform.

mTransform:		An expression which evaluates to a transform.

Description:	The matrix values of <mTransform> as an array with 3x3 multi-dimensional keys ranging from 0,0 to 2,2.

Example:
	variable tMatrix
	// Get the current transform matrix
	put the matrix of tTransform into tMatrix
	// Directly set the components
	put 2.5 into tMatrix[0,0]
	put 0 into tMatrix[1,0]
	put 0 into tMatrix[0,1]
	put 2.5 into tMatrix[1,1]
	// Update the transform with the new values
	set the matrix of tTransform to tMatrix

Tags: Canvas
*/

syntax TransformPropertyMatrix is prefix operator with precedence 4
	"the" "matrix" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetMatrix(mTransform, output)
	MCCanvasTransformSetMatrix(input, mTransform)
end syntax

/*
Summary:		The inverse of a transform.

mTransform:		An expression which evaluates to a transform.

Description:
The inverse of <mTransform>

>*Note:* The inverse of a transform matrix is the transform that reverses the effect of the original. Combining a transform with its inverse will produce the identity transform.

Example:
	variable tInverse
	// Get the inverse of the current transform
	put the inverse of tTransform into tInverse
	// Combine the transform with its inverse to produce the identity transform
	concat tTransform with tInverse

Tags: Canvas
*/

syntax TransformPropertyInverse is prefix operator with precedence 4
	"the" "inverse" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetInverse(mTransform, output)
end syntax

//////////

// Operations

public foreign handler MCCanvasTransformConcat(inout xTransformA as Transform, in pTransformB as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformScale(inout xTransform as Transform, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformScaleWithList(inout xTransform as Transform, in pScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformRotate(inout xTransform as Transform, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformTranslate(inout xTransform as Transform, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTransformTranslateWithList(inout xTransform as Transform, in pTranslation as list) as undefined binds to "<builtin>"

/*
Summary:		Concatenate transform a with transform b.

mTransformA:	An expression which evaluates to a transform.
mTransformB:	An expression which evaluates to a transform.

Description:
Concatenating transforms modifies the original transform to produce a single transform that is the equivalent of applying the original transform followed by the other. Changing the order of concatenation will result in a transform with different effects.

Example:
	variable tTransform
	variable tScale
	variable tRotation
	// Create a new scaling transform
	put transform with scale [5,10] into tScale
	// Create a new rotation transform
	put transform with rotation by 30 into tRotation
	// Create a transform representing a scale followed by a rotation
	put tScale into tTransform
	concat tTransform with tRotation

	// Create a transform representing a rotation followed by a scale
	put tRotation into tTransform
	concat tTransform with tScale

Tags: Canvas
*/

syntax TransformOperationConcat is statement
	"concat" <mTransformA: Expression> "with" <mTransformB: Expression>
begin
	MCCanvasTransformConcat(mTransformA, mTransformB)
end syntax

/*
Summary:		Apply a scale to a transform.

mTransform:		An expression which evaluates to a transform.
mScale:			An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Description:
Apply the given scale to <mTransform>

Example:
	variable tTransform
	// Create a new transform
	put the identity transform into tTransform
	// Apply a non-uniform scale to the transform
	scale tTransform by [2, 3]

Tags: Canvas
*/

syntax TransformOperationScale is statement
	"scale" <mTransform: Expression> "by" <mScale: Expression>
begin
    MCCanvasTransformScaleWithList(mTransform, mScale)
end syntax

/*
Summary:		Apply a rotation to a transform.

mTransform:		An expression which evaluates to a transform.
mRotation:		An expression which evaluates to a number of degrees.

Description:
Apply a rotation by <mRotation> degrees to <mTransform>

Example:
	variable tTransform
	// Create a new transform
	put the identity transform into tTransform
	// Rotate the transform by 90 degrees
	rotate tTransform by 90

Tags: Canvas
*/

syntax TransformOperationRotate is statement
	"rotate" <mTransform: Expression> "by" <mRotation: Expression>
begin
	MCCanvasTransformRotate(mTransform, mRotation)
end syntax

/*
Summary:		Apply a translation to a transform.

mTransform:		An expression which evaluates to a transform.
mTranslation:	An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Description:
Apply a translation to <mTransform>

Example:
	variable tTransform
	// Create a new transform
	put the identity transform into tTransform
	// Translate the transform to the top-left of tRect
	translate tTransform by [the left of tRect, the top of tRect]

Tags: Canvas
*/

syntax TransformOperationTranslate is statement
	"translate" <mTransform: Expression> "by" <mTranslation: Expression>
begin
    MCCanvasTransformTranslateWithList(mTransform, mTranslation)
end syntax

// TODO - add SkewTransform?

////////////////////////////////////////////////////////////////////////////////
// Solid Paint

// Constructors

/*
Summary:	Creates a new solid color paint.

mColor:		An expression which evaluates to a color.

Returns:	A new paint using <mColor>.

Example:
	variable tPaint
	// Create a new green paint
	put solid paint with color [0,1,0] into tPaint

Tags: Canvas
*/

public foreign handler MCCanvasSolidPaintMakeWithColor(in pColor as Color, out rSolid as SolidPaint) as undefined binds to "<builtin>"

syntax SolidPaintMake is prefix operator with precedence 4
	"solid" "paint" "with" <mColor: Expression>
begin
	MCCanvasSolidPaintMakeWithColor(mColor, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasSolidPaintGetColor(in pSolid as SolidPaint, out rColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasSolidPaintSetColor(in pColor as Color, inout pSolid as SolidPaint) as undefined binds to "<builtin>"

/*
Summary:	The color of a solid paint value.

mPaint:		An expression which evaluates to a solid paint.

Description:	The color of <mPaint>.

Example:
	variable tColor
	// Store the old color of tPaint
	put the color of tPaint into tColor
	// Set the color of tPaint to blue
	set the color of tPaint to color [0,0,1]

Tags:	Canvas
*/

syntax SolidPaintPropertyColor is prefix operator with precedence 4
	"the" "color" "of" <mSolid: Expression>
begin
	MCCanvasSolidPaintGetColor(mSolid, output)
	MCCanvasSolidPaintSetColor(input, mSolid)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Pattern

// Constructors

public foreign handler MCCanvasPatternMakeWithImage(in pImage as Image, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithTransformedImage(in pImage as Image, in pTransform as Transform, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithScaledImage(in pImage as Image, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithImageScaledWithList(in pImage as Image, in pScale as list, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithRotatedImage(in pImage as Image, in pRotation as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithTranslatedImage(in pImage as Image, in pX as CanvasFloat, in pY as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternMakeWithImageTranslatedWithList(in pImage as Image, in pTranslation as list, out rPattern as Pattern) as undefined binds to "<builtin>"

/*
Summary:	Creates a new pattern paint.

mImage:		An expression which evaluates to an image.

Returns:	A new pattern paint based on <mImage>.

Example:
	variable tPaint
	// Create a new pattern based on tImage
	put pattern with tImage into tPaint

Tags: Canvas
*/

syntax PatternMake is prefix operator with precedence 4
	"pattern" "with" <mImage: Expression>
begin
	MCCanvasPatternMakeWithImage(mImage, output)
end syntax

/*
Summary:	Creates a new transformed pattern paint.

mImage:		An expression which evaluates to an image.
mTransform:	An expression which evaluates to a transform.
mScale:		An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.
mRotation:		An expression which evaluates to a number of degrees.
mTranslation:	An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Returns:	A new pattern paint based on <mImage> with the specified transform applied.

Example:
	variable tPaint
	// Create a new pattern paint, applying a transform to the image
	put pattern with tImage transformed by tTransform into tPaint
	// Create a new pattern paint, rotating the image through 90 degrees
	put pattern with tImage rotated by 90 into tPaint
	// Create a new pattern paint, scaling the image to half size
	put pattern with tImage scaled by [0.5] into tPaint
	// Create a new pattern paint, offsetting the image to the top-left of tRect
	put pattern with tImage translated by [the left of tRect, the top of tRect] into tPaint

Tags: Canvas
*/

syntax PatternMakeTransformed is prefix operator with precedence 4
	"pattern" "with" <mImage: Expression> ( "transformed" "by" <mTransform: Expression> | "scaled" "by" <mScale: Expression> | "translated" "by" <mTranslation: Expression> | "rotated" "by" <mRotation: Expression> )
begin
	MCCanvasPatternMakeWithTransformedImage(mImage, mTransform, output)
	MCCanvasPatternMakeWithImageScaledWithList(mImage, mScale, output)
	MCCanvasPatternMakeWithImageTranslatedWithList(mImage, mTranslation, output)
	MCCanvasPatternMakeWithRotatedImage(mImage, mRotation, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasPatternGetImage(in pPattern as Pattern, out rImage as Image) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternSetImage(in pImage as Image, inout xPattern as Pattern) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternGetTransform(in pPattern as Pattern, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternSetTransform(in pTransform as Transform, inout xPattern as Pattern) as undefined binds to "<builtin>"

/*
Summary:	The image of a pattern value.

mPattern:		An expression which evaluates to a pattern.

Description:	The image of <mPattern>.

Example:
	variable tImage
	// Store the old image of tPattern
	put the image of tPattern into tImage
	// Set the pattern to draw the next image
	set the image of tPattern to tNextImage

Tags:	Canvas
*/

syntax PatternPropertyImage is prefix operator with precedence 4
	"the" "image" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetImage(mPattern, output)
	MCCanvasPatternSetImage(input, mPattern)
end syntax

/*
Summary:	The transform of a pattern value.

mPattern:		An expression which evaluates to a pattern.

Description:	The transform of <mPattern>.

Example:
	variable tTransform
	// Get the current transform
	put the transform of tPattern into tTransform
	// Modify the transform by rotation
	rotate tTransform by tDegrees
	// Set the pattern to the modified transform
	set the transform of tPattern to tTransform

Tags:	Canvas
*/

syntax PatternPropertyTransform is prefix operator with precedence 4
	"the" "transform" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetTransform(mPattern, output)
	MCCanvasPatternSetTransform(input, mPattern)
end syntax

//////////

// Operations

public foreign handler MCCanvasPatternTransform(inout xPattern as Pattern, in pTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternScale(inout xPattern as Pattern, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternScaleWithList(inout xPattern as Pattern, in pScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternRotate(inout xPattern as Pattern, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternTranslate(inout xPattern as Pattern, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPatternTranslateWithList(inout xPattern as Pattern, in pTranslation as list) as undefined binds to "<builtin>"

/*
Summary:		Apply a transform to a pattern.

mPattern:	An expression which evaluates to a pattern.
mTransform:	An expression which evaluates to a transform.

Description:
Modifies the transform of <mPattern> by concatentation with <mTransform>

Example:
	// Apply transform tTransform to the pattern.
	transform tPattern by tTransform

Tags: Canvas
*/

syntax PatternOperationTransform is statement
	"transform" <mPattern: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPatternTransform(mPattern, mTransform)
end syntax

/*
Summary:	Apply a scale to a pattern.

mPattern:	An expression which evaluates to a pattern.
mScale:		An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Description:
Scales the transform of <mPattern> by <mScale>

Example:
	// Scale the pattern to twice the current width
	scale tPattern by [2,1]

Tags: Canvas
*/

syntax PatternOperationScale is statement
	"scale" <mPattern: Expression> "by" <mScale: Expression>
begin
	MCCanvasPatternScaleWithList(mPattern, mScale)
end syntax

/*
Summary:	Apply a rotation to a pattern.

mPattern:	An expression which evaluates to a pattern.
mRotation:		An expression which evaluates to a number of degrees.

Description:
Rotates the transform of <mPattern> by <mRotation>

Example:
	// Rotate the pattern through 30 degrees
	rotate tPattern by 30

Tags: Canvas
*/

syntax PatternOperationRotate is statement
	"rotate" <mPattern: Expression> "by" <mRotation: Expression>
begin
	MCCanvasPatternRotate(mPattern, mRotation)
end syntax

/*
Summary:	Apply a translation to a pattern.

mPattern:	An expression which evaluates to a pattern.
mTranslation:	An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Description:
translates the transform of <mPattern> by <mTranslation>

Example:
	// Translate the pattern 20 units to the left.
	translate tPattern by [-20,0]

Tags: Canvas
*/

syntax PatternOperationTranslate is statement
	"translate" <mPattern: Expression> "by" <mTranslation: Expression>
begin
//	MCCanvasPatternTranslate(mPattern, mTranslation[0], mTranslation[1])
	MCCanvasPatternTranslateWithList(mPattern, mTranslation)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Gradient

public foreign handler MCCanvasGradientEvaluateType(in pType as int, out rType as int) as undefined binds to "<builtin>"

syntax GradientType is phrase
	( "linear" <mType=0> | "radial" <mType=1> | "conical" <mType=2> | "diamond" <mType=3> | "spiral" <mType=4> | "xy" <mType=5> | "sqrtxy" <mType=6> )
begin
	MCCanvasGradientEvaluateType(mType, output)
end syntax

// Constructors

public foreign handler MCCanvasGradientStopMake(in pOffset as CanvasFloat, in pColor as Color, out rStop as GradientStop) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientMakeWithRamp(in pType as int, in pRamp as list, out rGradient as Gradient) as undefined binds to "<builtin>"

/*
Summary:	Creates a new gradient stop.

mOffset:	An expression which evaluates to a number.
mColor:		An expression which evaluates to a color.

Returns:	A new gradient stop.

Example:
	// First gradient stop is red at position 0
	put gradient stop at offset 0 with color [1,0,0] into tStops[1]
	// Second stop is half-transparent green at position 0.5
	put gradient stop at offset 0.5 with color [0,1,0,0.5] into tStops[2]
	// Third stop is blue at position 1
	put gradient stop at offset 1 with color [0,0,1] into tStops[3]

Tags: Canvas
*/

syntax GradientStopMake is prefix operator with precedence 4
	"gradient" "stop" "at" <mOffset: Expression> "with" <mColor: Expression>
begin
	MCCanvasGradientStopMake(mOffset, mColor, output)
end syntax

/*
Summary:	Creates a new gradient paint.

mRamp:		An expression which evaluates to a list of gradient stops.

Returns:	A new gradient paint.

Example:
	// Set up gradient stops
	put gradient stop at offset 0 with color [1,0,0] into tStops[1]
	put gradient stop at offset 0.5 with color [0,1,0,0.5] into tStops[2]
	put gradient stop at offset 1 with color [0,0,1] into tStops[3]

	// Create new gradient paint
	put linear gradient with ramp [tStops[1], tStops[2], tStops[3]] into tGradient

Tags: Canvas
*/

syntax GradientMakeWithRamp is prefix operator with precedence 4
	<mType: GradientType> "gradient" "with" "ramp" <mRamp: Expression>
begin
	MCCanvasGradientMakeWithRamp(mType, mRamp, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasGradientStopGetOffset(in pStop as GradientStop, out rOffset as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientStopSetOffset(in pOffset as CanvasFloat, inout xStop as GradientStop) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientStopGetColor(in pStop as GradientStop, out rColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientStopSetColor(in pColor as Color, inout xStop as GradientStop) as undefined binds to "<builtin>"

public foreign handler MCCanvasGradientGetRamp(in pGradient as Gradient, out rRamp as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetRamp(in pRamp as list, inout xGradient as Gradient) as undefined binds to "<builtin>"
// public foreign handler MCCanvasGradientGetStops(in pGradient as Gradient, in pStart as integer, in pEnd as integer, out rStops as list) as undefined binds to "<builtin>"
// public foreign handler MCCanvasGradientSetStops(in pStart as integer, in pEnd as integer, in rStops as list, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetTypeAsString(in pGradient as Gradient, out rType as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetTypeAsString(in pType as string, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetRepeat(in pGradient as Gradient, out rRepeat as integer) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetRepeat(in pRepeat as integer, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetWrap(in pGradient as Gradient, out rWrap as boolean) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetWrap(in pWrap as boolean, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetMirror(in pGradient as Gradient, out rMirror as boolean) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetMirror(in pMirror as boolean, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetFrom(in pGradient as Gradient, out rFrom as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetFrom(in pFrom as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetTo(in pGradient as Gradient, out rTo as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetTo(in pTo as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetVia(in pGradient as Gradient, out rVia as Point) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetVia(in pVia as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientGetTransform(in pGradient as Gradient, out rTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientSetTransform(in pTransform as Transform, inout xGradient as Gradient) as undefined binds to "<builtin>"

/*
Summary:	The offset of a gradient stop value.

mStop:		An expression which evaluates to a gradient stop.

Description:	The offset of <mStop>.

Example:
	// Get the offset of a stop
	put the offset of tStop into tOffset
	// Move the stop to a new offset
	set the offset of tStop to 0.75

Tags:	Canvas
*/

syntax GradientStopPropertyOffset is prefix operator with precedence 4
	"the" "offset" "of" <mStop: Expression>
begin
	MCCanvasGradientStopGetOffset(mStop, output)
	MCCanvasGradientStopSetOffset(input, mStop)
end syntax

syntax GradientStopColorProperty is prefix operator with precedence 4
	"the" "color" "of" <mStop: Expression>
begin
	MCCanvasGradientStopGetColor(mStop, output)
	MCCanvasGradientStopSetColor(input, mStop)
end syntax

syntax GradientRampProperty is prefix operator with precedence 4
	"the" "ramp" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetRamp(mGradient, output)
	MCCanvasGradientSetRamp(input, mGradient)
end syntax

//syntax GradientStopsProperty is prefix operator with precedence 4
//	"stop" <mStart: Expression> [ "to" <mEnd: Expression> ] "of" <mGradient: Expression>
//begin
//	MCCanvasGradientGetStops(mGradient, mStart, mStart, output)
//	MCCanvasGradientSetStops(mGradient, mStart, mStart, input)
//	MCCanvasGradientGetStops(mGradient, mStart, mEnd, output)
//	MCCanvasGradientSetStops(mGradient, mStart, mEnd, input)
//end syntax

syntax GradientTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTypeAsString(mGradient, output)
	MCCanvasGradientSetTypeAsString(input, mGradient)
end syntax

syntax GradientRepeatProperty is prefix operator with precedence 4
	"the" "repeat" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetRepeat(mGradient, output)
	MCCanvasGradientSetRepeat(input, mGradient)
end syntax

syntax GradientWrapProperty is prefix operator with precedence 4
	"the" "wrap" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetWrap(mGradient, output)
	MCCanvasGradientSetWrap(input, mGradient)
end syntax

syntax GradientMirrorProperty is prefix operator with precedence 4
	"the" "mirror" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetMirror(mGradient, output)
	MCCanvasGradientSetMirror(input, mGradient)
end syntax

syntax GradientFromProperty is prefix operator with precedence 4
	"the" "from" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetFrom(mGradient, output)
	MCCanvasGradientSetFrom(input, mGradient)
end syntax

syntax GradientToProperty is prefix operator with precedence 4
	"the" "to" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTo(mGradient, output)
	MCCanvasGradientSetTo(input, mGradient)
end syntax

syntax GradientViaProperty is prefix operator with precedence 4
	"the" "via" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetVia(mGradient, output)
	MCCanvasGradientSetVia(input, mGradient)
end syntax

syntax GradientTransformProperty is prefix operator with precedence 4
	"the" "transform" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTransform(mGradient, output)
	MCCanvasGradientSetTransform(input, mGradient)
end syntax

//////////

// Operations

public foreign handler MCCanvasGradientAddStop(in pStop as GradientStop, inout xGradient as Gradient) as undefined binds to "<builtin>"

public foreign handler MCCanvasGradientTransform(inout xGradient as Gradient, in pTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientScale(inout xGradient as Gradient, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientScaleWithList(inout xGradient as Gradient, in pScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientRotate(inout xGradient as Gradient, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientTranslate(inout xGradient as Gradient, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasGradientTranslateWithList(inout xGradient as Gradient, in pTranslation as list) as undefined binds to "<builtin>"

syntax AddGradientStop is statement
	"add" <mStop: Expression> "to" <mGradient:Expression>
begin
	MCCanvasGradientAddStop(mStop, mGradient)
end syntax

syntax TransformGradient is statement
	"transform" <mGradient: Expression> "by" <mTransform: Expression>
begin
	MCCanvasGradientTransform(mGradient, mTransform)
end syntax

syntax ScaleGradient is statement
	"scale" <mGradient: Expression> "by" <mScale: Expression>
begin
//	MCCanvasGradientScale(mGradient, mScale[0], mScale[0])
//	MCCanvasGradientScale(mGradient, mScale[0], mScale[1])
	MCCanvasGradientScaleWithList(mGradient, mScale)
end syntax

syntax RotateGradient is statement
	"rotate" <mGradient: Expression> "by" <mRotation: Expression>
begin
	MCCanvasGradientRotate(mGradient, mRotation)
end syntax

syntax TranslateGradient is statement
	"translate" <mGradient: Expression> "by" <mTranslation: Expression>
begin
//	MCCanvasGradientTranslate(mGradient, mTranslation[0], mTranslation[1])
	MCCanvasGradientTranslateWithList(mGradient, mTranslation)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Image

// Constructors

public foreign handler MCCanvasImageMakeWithPath(in pPath as string, out rImage as Image) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageMakeWithData(in pData as data, out rImage as Image) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageMakeWithPixels(in pWidth as integer, in pHeight as integer, in pPixels as data, out rImage as Image) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageMakeWithPixelsWithSizeAsList(in pSize as list, in pPixels as data, out rImage as Image) as undefined binds to "<builtin>"

syntax MakeImage is prefix operator with precedence 4
	"image" "from" ( "file" <mPath: Expression> | "data" <mData: Expression> )
begin
	MCCanvasImageMakeWithPath(mPath, output)
	MCCanvasImageMakeWithData(mData, output)
end syntax

syntax MakeImageWithPixels is prefix operator with precedence 4
	"image" "of" "size" <mSize: Expression> "with" "pixels" <mPixels: Expression>
begin
//	MCCanvasImageMakeWithPixels(mSize[0], mSize[1], mPixels, output)
	MCCanvasImageMakeWithPixelsWithSizeAsList(mSize, mPixels, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasImageGetWidth(in pImage as Image, out rWidth as uint) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageGetHeight(in pImage as Image, out rHeight as uint) as undefined binds to "<builtin>"
// TODO - add support for metadata
//public foreign handler MCCanvasImageGetMetadata(in pImage as Image, out rMetadata as array) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageGetPixels(in pImage as Image, out rPixels as data) as undefined binds to "<builtin>"
// TODO - add image frame index property?

syntax ImageWidthProperty is prefix operator with precedence 2
	"the" "width" "of" <mImage: Expression>
begin
	MCCanvasImageGetWidth(mImage, output)
end syntax

syntax ImageHeightProperty is prefix operator with precedence 2
	"the" "height" "of" <mImage: Expression>
begin
	MCCanvasImageGetHeight(mImage, output)
end syntax

//syntax ImageMetadataProperty is prefix operator with precedence 4
//	"the" "metadata" "of" <mImage: Expression>
//begin
//	MCCanvasImageGetMetadata(mImage, output)
//end syntax

syntax ImagePixelsProperty is prefix operator with precedence 4
	"the" "pixels" "of" <mImage: Expression>
begin
	MCCanvasImageGetPixels(mImage, output)
end syntax

//////////

// Operations

// TODO - how to specify resize quality?
// TODO - add resize operation? "resize <image> to <width>,<height>"
// TODO - implement image operations

public foreign handler MCCanvasImageTransform(inout xImage as Image, in pTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageScale(inout xImage as Image, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageRotate(inout xImage as Image, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasImageCrop(inout xImage as Image, in pRight as Rectangle) as undefined binds to "<builtin>"

//syntax TransformImage is statement
//	"transform" <mImage: Expression> "by" <mTransform: Expression>
//begin
//	MCCanvasImageTransform(mImage, mTransform)
//end syntax
//
//syntax ScaleImage is statement
//	"scale" <mImage: Expression> "by" <mScale: Expression>
//begin
//	MCCanvasImageScale(mImage, mScale[0], mScale[0])
//	MCCanvasImageScale(mImage, mScale[0], mScale[1])
//end syntax
//
//syntax RotateImage is statement
//	"rotate" <mImage: Expression> "by" <mRotation: Expression>
//begin
//	MCCanvasImageRotate(mImage, mRotation)
//end syntax
//
//syntax CropImage is statement
//	"crop" <mImage: Expression> "to" <mRect: Expression>
//begin
//	MCCanvasImageCrop(mImage, mRect)
//end syntax

////////////////////////////////////////////////////////////////////////////////

// Path

// Constructors

public foreign handler MCCanvasPathMakeWithInstructionsAsString(in pString as string, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePath is prefix operator with precedence 4
	"path" <mString: Expression>
begin
	MCCanvasPathMakeWithInstructionsAsString(mString, output)
end syntax

// Primitive Constructors

public foreign handler MCCanvasPathMakeWithRoundedRectangle(in pRect as Rectangle, in pRadius as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithRoundedRectangleWithRadii(in pRect as Rectangle, in pRadiusX as CanvasFloat, in pRadiusY as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithRoundedRectangleWithRadiiAsList(in pRect as Rectangle, in pRadii as list, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithRectangle(in pRect as Rectangle, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithEllipse(in pCenter as Point, in pRadiusX as CanvasFloat, in pRadiusY as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithCircle(in pCenter as Point, in pRadius as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithEllipseWithRadiiAsList(in pCenter as Point, in pRadii as list, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithLine(in pStart as Point, in pEnd as Point, out rPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathMakeWithPoints(in pClose as boolean, in pPoints as list, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePathWithRoundedRectangle is prefix operator with precedence 4
	"rounded" "rectangle" "path" "of" <mRect: Expression> "with" ( "radius" <mRadius: Expression> | "radii" <mRadii: Expression> )
begin
	MCCanvasPathMakeWithRoundedRectangle(mRect, mRadius, output)
//	MCCanvasPathMakeWithRoundedRectangleWithRadii(mRect, mRadii[0], mRadii[1], output)
	MCCanvasPathMakeWithRoundedRectangleWithRadiiAsList(mRect, mRadii, output)
end syntax

syntax MakePathWithRectangle is prefix operator with precedence 4
	"rectangle" "path" "of" <mRect: Expression>
begin
	MCCanvasPathMakeWithRectangle(mRect, output)
end syntax

syntax MakePathWithCircle is prefix operator with precedence 4
	"circle" "path" "centered" "at" <mPoint: Expression> "with" "radius" <mRadius: Expression>
begin
//	MCCanvasPathMakeWithEllipse(mPoint, mRadius, mRadius, output)
	MCCanvasPathMakeWithCircle(mPoint, mRadius, output)
end syntax

syntax MakePathWithEllipse is prefix operator with precedence 4
	"ellipse" "path" "centered" "at" <mPoint: Expression> "with" "radii" <mRadii: Expression>
begin
//	MCCanvasPathMakeWithEllipse(mPoint, mRadii[0], mRadii[1], output)
	MCCanvasPathMakeWithEllipseWithRadiiAsList(mPoint, mRadii, output)
end syntax

syntax MakePathWithLine is prefix operator with precedence 4
	"line" "from" <mPointA: Expression> "to" <mPointB: Expression>
begin
	MCCanvasPathMakeWithLine(mPointA, mPointB, output)
end syntax

syntax MakePathWithPoints is prefix operator with precedence 4
	( "polygon" <mClosed=true> | "polyline" <mClosed=false> ) "path" "with" "points" <mPoints: Expression>
begin
	MCCanvasPathMakeWithPoints(mClosed, mPoints, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasPathGetSubpaths(in pStart as integer, in pEnd as integer, in pPath as Path, out rSubpaths as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathGetSubpath(in pIndex as integer, in pPath as Path, out rSubpaths as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathGetBoundingBox(in pPath as Path, out rRect as Rectangle) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathGetInstructionsAsString(in pPath as Path, out rInstructions as string) as undefined binds to "<builtin>"

syntax PathSubpathProperty is prefix operator with precedence 4
	"subpath" <mStart: Expression> [ "to" <mEnd: Expression> ] "of" <mPath: Expression>
begin
	MCCanvasPathGetSubpaths(mStart, mEnd, mPath, output)
//	MCCanvasPathGetSubpaths(mStart, mStart, mPath, output)
	MCCanvasPathGetSubpath(mStart, mPath, output)
end syntax

syntax PathBoundingBoxProperty is prefix operator with precedence 4
	"bounding" "box" "of" <mPath: Expression>
begin
	MCCanvasPathGetBoundingBox(mPath, output)
end syntax

syntax PathInstructionsProperty is prefix operator with precedence 4
	"the" "instructions" "of" <mPath: Expression>
begin
	MCCanvasPathGetInstructionsAsString(mPath, output)
end syntax

//////////

// Operations

public foreign handler MCCanvasPathTransform(inout xPath as Path, in pTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathScale(inout xPath as Path, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathScaleWithList(inout xPath as Path, in pScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathRotate(inout xPath as Path, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathTranslate(inout xPath as Path, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathTranslateWithList(inout xPath as Path, in pTranslation as list) as undefined binds to "<builtin>"

public foreign handler MCCanvasPathAddPath(in pSource as Path, inout xDest as Path) as undefined binds to "<builtin>"

public foreign handler MCCanvasPathMoveTo(in pPoint as Point, inout xPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathLineTo(in pPoint as Point, inout xPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathCurveThroughPoint(in pThrough as Point, in pTo as Point, inout xPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathCurveThroughPoints(in pThroughA as Point, in pThroughB as Point, in pTo as Point, inout xPath as Path) as undefined binds to "<builtin>"
public foreign handler MCCanvasPathClosePath(inout xPath as Path) as undefined binds to "<builtin>"

syntax PathMoveTo is statement
	"move" "to" <mPoint: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathMoveTo(mPoint, mPath)
end syntax

syntax PathLineTo is statement
	"line" "to" <mPoint: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathLineTo(mPoint, mPath)
end syntax

syntax PathCurveThrough is statement
	"curve" "through" <mThroughA: Expression> [ "then" <mThroughB: Expression> ] "to" <mTo: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathCurveThroughPoint(mThroughA, mTo, mPath)
	MCCanvasPathCurveThroughPoints(mThroughA, mThroughB, mTo, mPath)
end syntax

syntax PathClosePath is statement
	"close" "path" "on" <mPath: Expression>
begin
	MCCanvasPathClosePath(mPath)
end syntax

syntax TransformPath is statement
	"transform" <mPath: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPathTransform(mPath, mTransform)
end syntax

syntax ScalePath is statement
	"scale" <mPath: Expression> "by" <mScale: Expression>
begin
//	MCCanvasPathScale(mPath, mScale[0], mScale[0])
//	MCCanvasPathScale(mPath, mScale[0], mScale[1])
	MCCanvasPathScaleWithList(mPath, mScale)
end syntax

syntax RotatePath is statement
	"rotate" <mPath: Expression> "by" <mRotation: Expression>
begin
	MCCanvasPathRotate(mPath, mRotation)
end syntax

syntax TranslatePath is statement
	"translate" <mPath: Expression> "by" <mTranslation: Expression>
begin
//	MCCanvasPathTranslate(mPath, mTranslation[0], mTranslation[1])
	MCCanvasPathTranslateWithList(mPath, mTranslation)
end syntax

syntax AddPath is statement
	"add" <mSource: Expression> "to" <mDest: Expression>
begin
	MCCanvasPathAddPath(mSource, mDest)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Graphic Effect

public foreign handler MCCanvasEffectEvaluateType(in pType as int, out rType as int) as undefined binds to "<builtin>"

syntax EffectType is phrase
	( "color" "overlay" <mType=0> | "inner" "shadow" <mType=1> | "outer" "shadow" <mType=2> | "inner" "glow" <mType=3> | "outer" "glow" <mType=4> )
begin
	MCCanvasEffectEvaluateType(mType, output)
end syntax

// Constructors

public foreign handler MCCanvasEffectMakeWithPropertyArray(in pType as integer, in pProperties as array, out rEffect as Effect) as undefined binds to "<builtin>"

syntax MakeEffectWithProperties is prefix operator with precedence 4
	<mType: EffectType> <mProperties: Expression>
begin
	MCCanvasEffectMakeWithPropertyArray(mType, mProperties, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasEffectGetTypeAsString(in pEffect as Effect, out rType as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetColor(in pEffect as Effect, out rColor as Color) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetColor(in pColor as Color, inout xEffect as Effect) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetBlendModeAsString(in pEffect as Effect, out rBlendMode as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetBlendModeAsString(in pBlendMode as string, inout xEffect as Effect) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetOpacity(in pEffect as Effect, out rOpacity as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetOpacity(in pOpacity as CanvasFloat, inout xEffect as Effect) as undefined binds to "<builtin>"

//MCCanvasEffectGetFilterAsString(in pEffect as Effect, out rFilter as string) as undefined binds to "<builtin>"
//MCCanvasEffectSetFilterAsString(in pFilter as string, inout xEffect as Effect) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetSize(in pEffect as Effect, out rSize as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetSize(in pSize as CanvasFloat, inout xEffect as Effect) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetSpread(in pEffect as Effect, out rSpread as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetSpread(in pSpread as CanvasFloat, inout xEffect as Effect) as undefined binds to "<builtin>"

public foreign handler MCCanvasEffectGetDistance(in pEffect as Effect, out rDistance as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetDistance(in pDistance as CanvasFloat, inout xEffect as Effect) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectGetAngle(in pEffect as Effect, out rAngle as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasEffectSetAngle(in pAngle as CanvasFloat, inout xEffect as Effect) as undefined binds to "<builtin>"

syntax EffectTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetTypeAsString(mEffect, output)
end syntax

syntax EffectColorProperty is prefix operator with precedence 4
	"the" "color" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetColor(mEffect, output)
	MCCanvasEffectSetColor(input, mEffect)
end syntax

syntax EffectBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetBlendModeAsString(mEffect, output)
	MCCanvasEffectSetBlendModeAsString(input, mEffect)
end syntax

syntax EffectOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetOpacity(mEffect, output)
	MCCanvasEffectSetOpacity(input, mEffect)
end syntax

syntax EffectSizeProperty is prefix operator with precedence 4
	"the" "size" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetSize(mEffect, output)
	MCCanvasEffectSetSize(input, mEffect)
end syntax

syntax EffectSpreadProperty is prefix operator with precedence 4
	"the" "spread" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetSpread(mEffect, output)
	MCCanvasEffectSetSpread(input, mEffect)
end syntax

syntax EffectDistanceProperty is prefix operator with precedence 4
	"the" "distance" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetDistance(mEffect, output)
	MCCanvasEffectSetDistance(input, mEffect)
end syntax

syntax EffectAngleProperty is prefix operator with precedence 4
	"the" "angle" "of" <mEffect: Expression>
begin
	MCCanvasEffectGetAngle(mEffect, output)
	MCCanvasEffectSetAngle(input, mEffect)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Font

// Constructors

public foreign handler MCCanvasFontMake(in pName as string, out rFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontMakeWithStyle(in pName as string, in pBold as bool, in pItalic as bool, out rFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontMakeWithSize(in pName as string, in pBold as bool, in pItalic as bool, in pSize as int, out rFont as Font) as undefined binds to "<builtin>"

syntax FontMake is prefix operator with precedence 4
	"font" <mName: Expression>
begin
	MCCanvasFontMake(mName, output)
end syntax

syntax FontMakeWithSize is prefix operator with precedence 4
	"font" <mName: Expression> <mBold=false> <mItalic=false> "at" "size" <mSize: Expression>
begin
	MCCanvasFontMakeWithSize(mName, mBold, mItalic, mSize, output)
end syntax

syntax FontMakeWithStyle is expression
	"font" <mName: Expression> "with" ( "bold" <mBold=true> <mItalic=false> | "italic" <mBold=false> <mItalic=true> | "bold" "italic" <mBold=true> <mItalic=true> ) "style"
begin
	MCCanvasFontMakeWithStyle(mName, mBold, mItalic, output)
end syntax

syntax FontMakeWithStyleAndSize is prefix operator with precedence 4
	"font" <mName: Expression> "with" ( "bold" <mBold=true> <mItalic=false> | "italic" <mBold=false> <mItalic=true> | "bold" "italic" <mBold=true> <mItalic=true> ) "style" "at" "size" <mSize: Expression>
begin
	MCCanvasFontMakeWithStyle(mName, mBold, mItalic, output)
	MCCanvasFontMakeWithSize(mName, mBold, mItalic, mSize, output)
end syntax

//////////

// Properties

public foreign handler MCCanvasFontGetName(in pFont as Font, out rName as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontSetName(in pName as string, inout xFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontGetBold(in pFont as Font, out rBold as bool) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontSetBold(in pBold as bool, inout xFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontGetItalic(in pFont as Font, out rItalic as bool) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontSetItalic(in pItalic as bool, inout xFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontGetSize(in pFont as Font, out rSize as int) as undefined binds to "<builtin>"
public foreign handler MCCanvasFontSetSize(in pSize as int, inout xFont as Font) as undefined binds to "<builtin>"

syntax FontPropertyName is prefix operator with precedence 4
	"the" "name" "of" <mFont:Expression>
begin
	MCCanvasFontGetName(mFont, output)
	MCCanvasFontSetName(input, mFont)
end syntax

syntax FontPropertyBold is prefix operator with precedence 4
	"the" "bold" "of" <mFont:Expression>
begin
	MCCanvasFontGetBold(mFont, output)
	MCCanvasFontSetBold(input, mFont)
end syntax

syntax FontPropertyItalic is prefix operator with precedence 4
	"the" "italic" "of" <mFont:Expression>
begin
	MCCanvasFontGetItalic(mFont, output)
	MCCanvasFontSetItalic(input, mFont)
end syntax

syntax FontPropertySize is prefix operator with precedence 4
	"the" "size" "of" <mFont:Expression>
begin
	MCCanvasFontGetSize(mFont, output)
	MCCanvasFontSetSize(input, mFont)
end syntax

// Operations

public foreign handler MCCanvasFontMeasureText(in pText as string, in pFont as Font, out pRect as Rectangle) as undefined binds to "<builtin>"

syntax FontOperationMeasureText is prefix operator with precedence 4
  "the" "bounds" "of" "text" <mText: Expression> "with" <mFont: Expression>
begin
	MCCanvasFontMeasureText(mText, mFont, output)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Canvas

public foreign handler MCCanvasAlignmentEvaluate(in pHAlign as int, pVAlign as int, out rAlign as int) as undefined binds to "<builtin>"

syntax CanvasTextAlignment is phrase
	( "top left" <mHAlign=-1> <mVAlign=-1> | "top" <mHAlign=0> <mVAlign=-1> | "top right" <mHAlign=1> <mVAlign=-1> | "left" <mHAlign=-1> <mVAlign=0> | "center" <mHAlign=0> <mVAlign=0> | "right" <mHAlign=1> <mVAlign=0> | "bottom left" <mHAlign=-1> <mVAlign=1> | "bottom" <mHAlign=0> <mVAlign=1> | "bottom right" <mHAlign=1> <mVAlign=1> )
begin
	MCCanvasAlignmentEvaluate(mHAlign, mVAlign, output)
end syntax

// Properties

public foreign handler MCCanvasGetPaint(in pCanvas as Canvas, out rPaint as Paint) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetPaint(in pPaint as Paint, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetFillRuleAsString(in pCanvas as Canvas, out rFillRule as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetFillRuleAsString(in pFillRule as string, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetAntialias(in pCanvas as Canvas, out rAntialias as boolean) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetAntialias(in pAntialias as boolean, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetOpacity(in pCanvas as Canvas, out rOpacity as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetOpacity(in pOpacity as CanvasFloat, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetBlendModeAsString(in pCanvas as Canvas, out rBlendMode as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetBlendModeAsString(in pBlendMode as string, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetStippled(in pCanvas as Canvas, out rStippled as boolean) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetStippled(in pStippled as boolean, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetImageResizeQualityAsString(in pCanvas as Canvas, out rQuality as string) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetImageResizeQualityAsString(in pQuality as string, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetStrokeWidth(in pCanvas as Canvas, out rStrokeWidth as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetStrokeWidth(in pStrokeWidth as CanvasFloat, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasGetFont(in pCanvas as Canvas, out rFont as Font) as undefined binds to "<builtin>"
public foreign handler MCCanvasSetFont(in pFont as Font, in pCanvas as Canvas) as undefined binds to "<builtin>"

syntax CanvasPaintProperty is prefix operator with precedence 4
	"the" "paint" "of" <mCanvas: Expression>
begin
	MCCanvasGetPaint(mCanvas, output)
	MCCanvasSetPaint(input, mCanvas)
end syntax

syntax CanvasFillRuleProperty is prefix operator with precedence 4
	"the" "fill" "rule" "of" <mCanvas: Expression>
begin
	MCCanvasGetFillRuleAsString(mCanvas, output)
	MCCanvasSetFillRuleAsString(input, mCanvas)
end syntax

syntax CanvasAntialiasProperty is prefix operator with precedence 4
	"the" "antialias" "of" <mCanvas: Expression>
begin
	MCCanvasGetAntialias(mCanvas, output)
	MCCanvasSetAntialias(input, mCanvas)
end syntax

syntax CanvasOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mCanvas: Expression>
begin
	MCCanvasGetOpacity(mCanvas, output)
	MCCanvasSetOpacity(input, mCanvas)
end syntax

syntax CanvasBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mCanvas: Expression>
begin
	MCCanvasGetBlendModeAsString(mCanvas, output)
	MCCanvasSetBlendModeAsString(input, mCanvas)
end syntax

syntax CanvasStippledProperty is prefix operator with precedence 4
	"the" "stippled" "of" <mCanvas: Expression>
begin
	MCCanvasGetStippled(mCanvas, output)
	MCCanvasSetStippled(input, mCanvas)
end syntax

syntax CanvasImageResizeQuality is prefix operator with precedence 4
	"the" "image" "resize" "quality" "of" <mCanvas: Expression>
begin
	MCCanvasGetImageResizeQualityAsString(mCanvas, output)
	MCCanvasSetImageResizeQualityAsString(input, mCanvas)
end syntax

syntax CanvasStrokeWidth is prefix operator with precedence 4
	"the" "stroke" "width" "of" <mCanvas: Expression>
begin
	MCCanvasGetStrokeWidth(mCanvas, output)
	MCCanvasSetStrokeWidth(input, mCanvas)
end syntax

syntax CanvasPropertyFont is prefix operator with precedence 4
	"the" "font" "of" <mCanvas:Expression>
begin
	MCCanvasGetFont(mCanvas, output)
	MCCanvasSetFont(input, mCanvas)
end syntax

//////////

// Operations

public foreign handler MCCanvasTransform(in pCanvas as Canvas, in pTransform as Transform) as undefined binds to "<builtin>"
public foreign handler MCCanvasScale(in pCanvas as Canvas, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasScaleWithList(in pCanvas as Canvas, in pScale as list) as undefined binds to "<builtin>"
public foreign handler MCCanvasRotate(in pCanvas as Canvas, in pRotation as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTranslate(in pCanvas as Canvas, in pX as CanvasFloat,in pY as CanvasFloat) as undefined binds to "<builtin>"
public foreign handler MCCanvasTranslateWithList(in pCanvas as Canvas, in pTranslation as list) as undefined binds to "<builtin>"

public foreign handler MCCanvasSaveState(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasRestoreState(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasBeginLayer(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasBeginLayerWithEffect(in pEffect as Effect, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasEndLayer(in pCanvas as Canvas) as undefined binds to "<builtin>"

public foreign handler MCCanvasFill(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasFillPath(in pPath as Path, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasStroke(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasStrokePath(in pPath as Path, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasClipToRect(in pClip as Rectangle, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasAddPath(in pPath as Path, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasDrawImage(in pImage as Image, in pDest as Rectangle, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasDrawRectOfImage(in pSrc as Rectangle, in pImage as Image, in pDst as Rectangle, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasMoveTo(in pPoint as Point, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasLineTo(in pPoint as Point, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasCurveThroughPoint(in pThrough as Point, in pTo as Point, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasCurveThroughPoints(in pThroughA as Point, in pThroughB as Point, in pTo as Point, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasClosePath(in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasFillText(in pText as string, in pPoint as Point, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasFillTextAligned(in pText as string, in pAlignment as int, in pRect as Rectangle, in pCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasMeasureText(in pText as string, in pCanvas as Canvas) as Rectangle binds to "<builtin>"

syntax TransformCanvas is statement
	"transform" <mCanvas: Expression> "by" <mTransform: Expression>
begin
	MCCanvasTransform(mCanvas, mTransform)
end syntax

syntax ScaleCanvas is statement
	"scale" <mCanvas: Expression> "by" <mScale: Expression>
begin
//	MCCanvasScale(mCanvas, mScale[0], mScale[0])
//	MCCanvasScale(mCanvas, mScale[0], mScale[1])
	MCCanvasScaleWithList(mCanvas, mScale)
end syntax

syntax RotateCanvas is statement
	"rotate" <mCanvas: Expression> "by" <mRotation: Expression>
begin
	MCCanvasRotate(mCanvas, mRotation)
end syntax

syntax TranslateCanvas is statement
	"translate" <mCanvas: Expression> "by" <mTranslation: Expression>
begin
//	MCCanvasTranslate(mCanvas, mTranslation[0], mTranslation[1])
	MCCanvasTranslateWithList(mCanvas, mTranslation)
end syntax

syntax CanvasSaveState is statement
	"save" "state" "of" <mCanvas: Expression>
begin
	MCCanvasSaveState(mCanvas)
end syntax

syntax CanvasRestoreState is statement
	"restore" "state" "of" <mCanvas: Expression>
begin
	MCCanvasRestoreState(mCanvas)
end syntax

syntax CanvasBeginLayer is statement
	"begin" "layer" [ "with" <mEffect: Expression> ] "on" <mCanvas: Expression>
begin
	MCCanvasBeginLayer(mCanvas)
	MCCanvasBeginLayerWithEffect(mEffect, mCanvas)
end syntax

syntax CanvasEndLayer is statement
	"end" "layer" "on" <mCanvas: Expression>
begin
	MCCanvasEndLayer(mCanvas)
end syntax

syntax CanvasFill is statement
	"fill" [ <mPath: Expression> "on" ] <mCanvas: Expression>
begin
	MCCanvasFill(mCanvas)
	MCCanvasFillPath(mPath, mCanvas)
end syntax

syntax CanvasStroke is statement
	"stroke" [ <mPath: Expression> "on" ] <mCanvas: Expression>
begin
	MCCanvasStroke(mCanvas)
	MCCanvasStrokePath(mPath, mCanvas)
end syntax

syntax CanvasClip is statement
	"clip" "to" <mRect: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasClipToRect(mRect, mCanvas)
end syntax

syntax CanvasAddPath is statement
	"add" <mPath: Expression> "to" <mCanvas: Expression>
begin
	MCCanvasAddPath(mPath, mCanvas)
end syntax

syntax ImageResizeQuality is phrase
	( "low" <mQuality=1> | "medium" <mQuality=2> | "high" <mQuality=3> )
begin
end syntax

syntax CanvasDrawImage is statement
	"draw" [ "rect" <mSrcRect: Expression> "of" ] <mImage: Expression> "into" <mDestRect: Expression> "of" <mCanvas: Expression>
begin
	MCCanvasDrawImage(mImage, mDestRect, mCanvas)
	MCCanvasDrawRectOfImage(mSrcRect, mImage, mDestRect, mCanvas)
end syntax

syntax CanvasMoveTo is statement
	"move" "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasMoveTo(mPoint, mCanvas)
end syntax

syntax CanvasLineTo is statement
	"line" "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasLineTo(mPoint, mCanvas)
end syntax

syntax CanvasCurveThrough is statement
	"curve" "through" <mThroughA: Expression> [ "then" <mThroughB: Expression> ] "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasCurveThroughPoint(mThroughA, mPoint, mCanvas)
	MCCanvasCurveThroughPoints(mThroughA, mThroughB, mPoint, mCanvas)
end syntax

syntax CanvasClosePath is statement
	"close" "path" "on" <mCanvas: Expression>
begin
	MCCanvasClosePath(mCanvas)
end syntax

syntax CanvasOperationFillText is statement
	"fill" "text" <mText: Expression> "at" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasFillText(mText, mPoint, mCanvas)
end syntax

syntax CanvasOperationFillTextAligned is statement
	"fill" "text" <mText: Expression> "at" <mAlignment: CanvasTextAlignment> "of" <mRect: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasFillTextAligned(mText, mAlignment, mRect, mCanvas)
end syntax

syntax CanvasOperationMeasureText is statement
	"measure" <mText: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasMeasureText(mText, mCanvas)
end syntax

////////////////////////////////////////////////////////////////////////////////

public foreign handler MCCanvasThisCanvas(out rCanvas as Canvas) as undefined binds to "<builtin>"
public foreign handler MCCanvasPretendToAssignThisCanvas(in pCanvas as Canvas) as undefined binds to "<builtin>"

syntax ThisCanvas is expression
    "this" "canvas"
begin
    MCCanvasThisCanvas(output)
    MCCanvasPretendToAssignThisCanvas(input)
end syntax

////////////////////////////////////////////////////////////////////////////////

end module
