/*  
This module specifies the syntax definitions and bindings for canvas drawing operations in modular LiveCode.
*/

module com.livecode.canvas

type CanvasFloat is float

// Point
foreign type Point binds to "kMCCanvasPointTypeInfo"

// Rectangle
foreign type Rectangle binds to "kMCCanvasRectangleTypeInfo"

// Transform
foreign type Transform binds to "kMCCanvasTransformTypeInfo"

// Color
foreign type Color binds to "kMCCanvasColorTypeInfo"

// Paint (supertype of pattern, gradient, solidpaint)
foreign type Paint binds to "kMCCanvasPaintTypeInfo"

// Solid Paint
type SolidPaint is Paint

// Pattern
type Pattern is Paint

// Gradient
foreign type GradientStop binds to "kMCCanvasGradientStopTypeInfo"
type Gradient is Paint

// Image
foreign type Image binds to "kMCCanvasImageTypeInfo"

// Path
foreign type Path binds to "kMCCanvasPathTypeInfo"

// Effect
foreign type GraphicEffect binds to "kMCCanvasEffectTypeInfo"

// Canvas
foreign type Canvas binds to "kMCCanvasTypeInfo"

////////////////////////////////////////////////////////////////////////////////
// Rectangle

// Constructors

foreign handler MCCanvasRectangleMakeWithLTRB(in pLeft as CanvasFloat, in pTop as CanvasFloat, in pRight as CanvasFloat, in pBottom as CanvasFloat, out rRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetLeft(in pRect as Rectangle, out rLeft as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetLeft(in pLeft as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetTop(in pRect as Rectangle, out rTop as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetTop(in pTop as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetRight(in pRect as Rectangle, out rRight as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetRight(in pRight as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetBottom(in pRect as Rectangle, out rBottom as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetBottom(in pBottom as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetWidth(in pRect as Rectangle, out rWidth as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetWidth(in pWidth as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleGetHeight(in pRect as Rectangle, out rHeight as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasRectangleSetHeight(in pHeight as CanvasFloat, inout xRect as Rectangle) as undefined binds to "<builtin>"

syntax MakeRect is prefix operator with precedence 4
	"rectangle" <mRect: ExpressionList>
begin
	MCCanvasRectangleMakeWithLTRB(mRect[0], mRect[1], mRect[2], mRect[3], output)
end syntax

syntax LeftRectangleProperty is prefix operator with precedence 4
	"the" ( "left" | "x" ) "of" <mRect:Expression>
begin
	MCCanvasRectangleGetLeft(mRect, output)
	MCCanvasRectangleSetLeft(input, mRect)
end syntax

syntax TopRectangleProperty is prefix operator with precedence 4
	"the" ( "top" | "y" ) "of" <mRect:Expression>
begin
	MCCanvasRectangleGetTop(mRect, output)
	MCCanvasRectangleSetTop(input, mRect)
end syntax

syntax RightRectangleProperty is prefix operator with precedence 4
	"the" "right" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetRight(mRect, output)
	MCCanvasRectangleSetRight(input, mRect)
end syntax

syntax BottomRectangleProperty is prefix operator with precedence 4
	"the" "bottom" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetBottom(mRect, output)
	MCCanvasRectangleSetBottom(input, mRect)
end syntax

syntax WidthRectangleProperty is prefix operator with precedence 4
	"the" "width" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetWidth(mRect, output)
	MCCanvasRectangleSetWidth(input, mRect)
end syntax

syntax HeightRectangleProperty is prefix operator with precedence 4
	"the" "height" "of" <mRect:Expression>
begin
	MCCanvasRectangleGetHeight(mRect, output)
	MCCanvasRectangleSetHeight(input, mRect)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Point

// Constructors

foreign handler MCCanvasPointMake(in pX as CanvasFloat, in pY as CanvasFloat, out rPoint as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasPointGetX(in pPoint as Point, out rX as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPointSetX(in pX as CanvasFloat, inout xPoint as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasPointGetY(in pPoint as Point, out rY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPointSetY(in pY as CanvasFloat, inout xPoint as Point) as undefined binds to "<builtin>"

syntax MakePoint is prefix operator with precedence 4
	"point" <mPoint: ExpressionList>
begin
	MCCanvasPointMake(mPoint[0], mPoint[1], output)
end syntax

syntax PointXProperty is prefix operator with precedence 4
	"the" "x" "of" <mPoint: Expression>
begin
	MCCanvasPointGetX(mPoint, output)
	MCCanvasPointSetX(input, mPoint)
end syntax

syntax PointYProperty is prefix operator with precedence 4
	"the" "y" "of" <mPoint: Expression>
begin
	MCCanvasPointGetY(mPoint, output)
	MCCanvasPointSetY(input, mPoint)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Color

// Constructors

foreign handler MCCanvasColorMakeRGBA(in pRed as CanvasFloat, in pGreen as CanvasFloat, in pBlue as CanvasFloat, in pAlpha as CanvasFloat, out rColor as Color) as undefined binds to "<builtin>"
//foreign handler MCCanvasColorMakeWithString(in pList as string, out rColor as Color)

syntax MakeColor is prefix operator with precedence 4
	"color" <mVal: ExpressionList>
begin
//	MCCanvasColorMakeWithString(mVal[0], output)
//	MCCanvasColorMakeWithList(mVal[0], output)
	MCCanvasColorMakeRGBA(mVal[0], mVal[1], mVal[2], 1.0, output)
	MCCanvasColorMakeRGBA(mVal[0], mVal[1], mVal[2], mVal[3], output)
end syntax

//////////

// Properties

foreign handler MCCanvasColorGetRed(in pColor as Color, out rRed as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetRed(in pRed as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetGreen(in pColor as Color, out rGreen as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetGreen(in pGreen as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetBlue(in pColor as Color, out rBlue as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetBlue(in pBlue as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetAlpha(in pColor as Color, out rAlpha as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetAlpha(in pAlpha as CanvasFloat, inout xColor as Color) as undefined binds to "<builtin>"

syntax RedColorProperty is prefix operator with precedence 4
	"the" "red" "of" <mColor: Expression>
begin
	MCCanvasColorGetRed(mColor, output)
	MCCanvasColorSetRed(input, mColor)
end syntax

syntax GreenColorProperty is prefix operator with precedence 4
	"the" "green" "of" <mColor: Expression>
begin
	MCCanvasColorGetGreen(mColor, output)
	MCCanvasColorSetGreen(input, mColor)
end syntax

syntax BlueColorProperty is prefix operator with precedence 4
	"the" "blue" "of" <mColor: Expression>
begin
	MCCanvasColorGetBlue(mColor, output)
	MCCanvasColorSetBlue(input, mColor)
end syntax

syntax AlphaColorProperty is prefix operator with precedence 4
	"the" "alpha" "of" <mColor: Expression>
begin
	MCCanvasColorGetAlpha(mColor, output)
	MCCanvasColorSetAlpha(input, mColor)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Transform

// Constructors

foreign handler MCCanvasTransformMakeIdentity(out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeScale(in pScaleX as CanvasFloat, in pScaleY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeRotation(in pRadians as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeTranslation(in pX as CanvasFloat, in pY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeWithMatrixValues(in pA as CanvasFloat, in pB as CanvasFloat, in pC as CanvasFloat, in pD as CanvasFloat, in pTX as CanvasFloat, in pTY as CanvasFloat, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeWitHMatrixArray(in pMatrix as array, out rTransform as Transform) as undefined binds to "<builtin>"

syntax MakeIdentityTransform is expression
//	"the" "identity" "transform"
	"identity" "transform"
begin
	MCCanvasTransformMakeIdentity(output)
end syntax

syntax MakeScaleTransform is prefix operator with precedence 4
	"transform" "with" "scale" <mScale: ExpressionList>
begin
	MCCanvasTransformMakeScale(mScale[0], mScale[0], output)
	MCCanvasTransformMakeScale(mScale[0], mScale[1], output)
end syntax

syntax MakeRotationTranform is prefix operator with precedence 4
	"transform" "with" "rotation" "by" <mRadians: Expression>
begin
	MCCanvasTransformMakeRotation(mRadians, output)
end syntax

syntax MakeTranslationTransform is prefix operator with precedence 4
	"transform" "with" "translation" <mTranslation: ExpressionList>
begin
	MCCanvasTransformMakeTranslation(mTranslation[0], mTranslation[1], output)
end syntax

//////////

// Properties

foreign handler MCCanvasTransformGetScale(in pTransform as Transform, out rScaleXY as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetScale(in pScaleX as Point, inout xTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetRotation(in pTransform as Transform, out rRotation as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetRotation(in pRotation as CanvasFloat, inout xTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetSkew(in pTransform as Transform, out rSkewXY as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetSkew(in pSkewXY as Point, inout xTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetTranslation(in pTransform as Transform, out rTransXY as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetTranslation(in pTransXY as Point, inout xTransform as Transform) as undefined binds to "<builtin>"

foreign handler MCCanvasTransformGetMatrix(in pTransform as Transform, out rMatrix as array) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetMatrix(in pMatrix as array, inout xTransform as Transform) as undefined binds to "<builtin>"

foreign handler MCCanvasTransformGetInverse(in pTransform as Transform, out rInverse as Transform) as undefined binds to "<builtin>"

syntax ScaleTransformProperty is prefix operator with precedence 4
	"the" "scale" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetScale(mTransform, output)
	MCCanvasTransformSetScale(input, mTransform)
end syntax

syntax RotationTransformProperty is prefix operator with precedence 4
	"the" "rotation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetRotation(mTransform, output)
	MCCanvasTransformSetRotation(mTransform, input, mTransform)
end syntax

syntax SkewTransformProperty is prefix operator with precedence 4
	"the" "skew" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetSkew(mTransform, output)
	MCCanvasTransformSetSkew(input, mTransform)
end syntax

syntax TranslationTransformProperty is prefix operator with precedence 4
	"the" "translation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetTranslation(mTransform, output)
	MCCanvasTransformSetTranslation(input, mTransform)
end syntax


syntax MatrixTransformProperty is prefix operator with precedence 4
	"the" "matrix" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetMatrix(mTransform, output)
	MCCanvasTransformSetMatrix(input, mTransform)
end syntax

syntax InverseTransformProperty is prefix operator with precedence 4
	"the" "inverse" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetInverse(mTransform, output)
end syntax

//////////

// Operations

foreign handler MCCanvasTransformConcat(inout xTransformA as Transform, in pTransformB as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformScale(inout xTransform as Transform, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformRotate(inout xTransform as Transform, in pRadians as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformTranslate(inout xTransform as Transform, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"

syntax ConcatTransform is statement
	"concat" <mTransformA: Expression> "with" <mTransformB: Expression>
begin
	MCCanvasTransformConcat(mTransformA, mTransformB)
end syntax

syntax ScaleTransform is statement
	"scale" <mTransform: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasTransformScale(mTransform, mScale[0], mScale[1])
	MCCanvasTransformScale(mTransform, mScale[0], mScale[0])
end syntax

syntax RotateTransform is statement
	"rotate" <mTransform: Expression> "by" <mRadians: Expression>
begin
	MCCanvasTransformRotate(mTransform, mRadians)
end syntax

syntax TranslateTransform is statement
	"translate" <mTransform: Expression> "by" <mTranslate: ExpressionList>
begin
	MCCanvasTransformTranslate(mTransform, mTranslate[0], mTranslate[1])
end syntax

////////////////////////////////////////////////////////////////////////////////
// Solid Paint

// Constructors

foreign handler MCCanvasSolidPaintMakeWithColor(in pColor as Color, out rSolid as SolidPaint) as undefined binds to "<builtin>"

syntax MakeSolidPaint is prefix operator with precedence 4
	"solid" "paint" "with" <mColor: Expression>
begin
	MCCanvasSolidPaintMakeWithColor(mColor, output)
end syntax

//////////

// Properties

foreign handler MCCanvasSolidPaintGetColor(in pSolid as SolidPaint, out rColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasSolidPaintSetColor(in pColor as Color, inout pSolid as SolidPaint) as undefined binds to "<builtin>"

syntax SolidPaintColorProperty is prefix operator with precedence 4
	"the" "color" "of" <mSolid: Expression>
begin
	MCCanvasSolidPaintGetColor(mSolid, output)
	MCCanvasSolidPaintSetColor(input, mSolid)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Pattern

// Constructors

foreign handler MCCanvasPatternMakeWithImage(in pImage as Image, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithTransformedImage(in pImage as Image, in pTransform as Transform, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithScaledImage(in pImage as Image, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithRotatedImage(in pImage as Image, in pRadians as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithTranslatedImage(in pImage as Image, in pX as CanvasFloat, in pY as CanvasFloat, out rPattern as Pattern) as undefined binds to "<builtin>"

syntax MakePattern is prefix operator with precedence 4
	"pattern" "with" <mImage: Expression> [ ( "transformed" "by" <mTransform: Expression> | "scaled" "by" <mScale: ExpressionList> | "translated" "by" <mTranslation: ExpressionList> | "rotated" "by" <mRadians: Expression> ) ]
begin
	MCCanvasPatternMakeWithImage(mImage, output)
	MCCanvasPatternMakeWithTransformedImage(mImage, mTransform, output)
	MCCanvasPatternMakeWithScaledImage(mImage, mScale[0], mScale[0], output)
	MCCanvasPatternMakeWithScaledImage(mImage, mScale[0], mScale[1], output)
	MCCanvasPatternMakeWithTranslatedImage(mImage, mTranslation[0], mTranslation[1], output)
	MCCanvasPatternMakeWithRotatedImage(mImage, mRadians, output)
end syntax

//////////

// Properties

foreign handler MCCanvasPatternGetImage(in pPattern as Pattern, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternSetImage(in pImage as Image, inout xPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternGetTransform(in pPattern as Pattern, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternSetTransform(in pTransform as Transform, inout xPattern as Pattern) as undefined binds to "<builtin>"

syntax PatternImageProperty is prefix operator with precedence 4
	"the" "image" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetImage(mPattern, output)
	MCCanvasPatternSetImage(input, mPattern)
end syntax

syntax PatternTransformProperty is prefix operator with precedence 4
	"the" "transform" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetTransform(mPattern, output)
	MCCanvasPatternSetTransform(input, mPattern)
end syntax

//////////

// Operations

foreign handler MCCanvasPatternTransform(inout xPattern as Pattern, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternScale(inout xPattern as Pattern, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternRotate(inout xPattern as Pattern, in pRadians as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternTranslate(inout xPattern as Pattern, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"

syntax TransformPattern is statement
	"transform" <mPattern: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPatternTransform(mPattern, mTransform)
end syntax

syntax ScalePattern is statement
	"scale" <mPattern: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasPatternScale(mPattern, mScale[0], mScale[0])
	MCCanvasPatternScale(mPattern, mScale[0], mScale[1])
end syntax

syntax RotatePattern is statement
	"rotate" <mPattern: Expression> "by" <mRadians: Expression>
begin
	MCCanvasPatternRotate(mPattern, mRadians)
end syntax

syntax TranslatePattern is statement
	"translate" <mPattern: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasPatternTranslate(mPattern, mTranslation[0], mTranslation[1])
end syntax

////////////////////////////////////////////////////////////////////////////////

// Gradient

// Constructors

foreign handler MCCanvasGradientStopMake(in pOffset as CanvasFloat, in pColor as Color, out rStop as GradientStop) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientMakeWithRamp(in pType as integer, in pRamp as list of GradientStop, out rGradient as Gradient) as undefined binds to "<builtin>"

syntax MakeGradientStop is prefix operator with precedence 4
	"gradient" "stop" "at" <mOffset: Expression> "with" <mColor: Expression>
begin
	MCCanvasGradientStopMake(mOffset, mColor, output)
end syntax

constant kGradientTypeLinear is 0
constant kGradientTypeRadial is 1
constant kGradientTypeConical is 2
constant kGradientTypeDiamond is 3
constant kGradientTypeSpiral is 4
constant kGradientTypeXY is 5
constant kGradientTypeSqrtXY is 6

syntax GradientType is phrase
	( "linear" <mType=0> | "radial" <mType=1> | "conical" <mType=2> | "diamond" <mType=3> | "spiral" <mType=4> | "xy" <mType=5> | "sqrtxy" <mType=6> )
begin
end syntax

syntax MakeGradientWithRamp is prefix operator with precedence 4
	<mType: GradientType> "gradient" "with" "ramp" <mRamp: ExpressionList>
begin
	MCCanvasGradientMakeWithRamp(mType, mRamp, output)
end syntax

//////////

// Properties

foreign handler MCCanvasGradientGetRamp(in pGradient as Gradient, out rRamp as list of GradientStop) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetRamp(in pRamp as list of GradientStop, inout xGradient as Gradient) as undefined binds to "<builtin>"
// foreign handler MCCanvasGradientGetStops(in pGradient as Gradient, in pStart as integer, in pEnd as integer, out rStops as list of GradientStop) as undefined binds to "<builtin>"
// foreign handler MCCanvasGradientSetStops(in pStart as integer, in pEnd as integer, in rStops as list of GradientStop, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTypeAsString(in pGradient as Gradient, out rType as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTypeAsString(in pType as string, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetRepeat(in pGradient as Gradient, out rRepeat as integer) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetRepeat(in pRepeat as integer, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetWrap(in pGradient as Gradient, out rWrap as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetWrap(in pWrap as boolean, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetMirror(in pGradient as Gradient, out rMirror as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetMirror(in pMirror as boolean, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetFrom(in pGradient as Gradient, out rFrom as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetFrom(in pFrom as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTo(in pGradient as Gradient, out rTo as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTo(in pTo as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetVia(in pGradient as Gradient, out rVia as Point) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetVia(in pVia as Point, inout xGradient as Gradient) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTransform(in pGradient as Gradient, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTransform(in pTransform as Transform, inout xGradient as Gradient) as undefined binds to "<builtin>"

syntax GradientRampProperty is prefix operator with precedence 4
	"the" "ramp" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetRamp(mGradient, output)
	MCCanvasGradientSetRamp(input, mGradient)
end syntax

//syntax GradientStopsProperty is prefix operator with precedence 4
//	"stop" <mStart: Expression> [ "to" <mEnd: Expression> ] "of" <mGradient: Expression>
//begin
//	MCCanvasGradientGetStops(mGradient, mStart, mStart, output)
//	MCCanvasGradientSetStops(mGradient, mStart, mStart, input)
//	MCCanvasGradientGetStops(mGradient, mStart, mEnd, output)
//	MCCanvasGradientSetStops(mGradient, mStart, mEnd, input)
//end syntax

syntax GradientTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTypeAsString(mGradient, output)
	MCCanvasGradientSetTypeAsString(input, mGradient)
end syntax

syntax GradientRepeatProperty is prefix operator with precedence 4
	"the" "repeat" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetRepeat(mGradient, output)
	MCCanvasGradientSetRepeat(input, mGradient)
end syntax

syntax GradientWrapProperty is prefix operator with precedence 4
	"the" "wrap" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetWrap(mGradient, output)
	MCCanvasGradientSetWrap(input, mGradient)
end syntax

syntax GradientMirrorProperty is prefix operator with precedence 4
	"the" "mirror" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetMirror(mGradient, output)
	MCCanvasGradientSetMirror(input, mGradient)
end syntax

syntax GradientFromProperty is prefix operator with precedence 4
	"the" "from" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetFrom(mGradient, output)
	MCCanvasGradientSetFrom(input, mGradient)
end syntax

syntax GradientToProperty is prefix operator with precedence 4
	"the" "to" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTo(mGradient, output)
	MCCanvasGradientSetTo(input, mGradient)
end syntax

syntax GradientViaProperty is prefix operator with precedence 4
	"the" "via" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetVia(mGradient, output)
	MCCanvasGradientSetVia(input, mGradient)
end syntax

syntax GradientTransformProperty is prefix operator with precedence 4
	"the" "transform" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTransform(mGradient, output)
	MCCanvasGradientSetTransform(input, mGradient)
end syntax

//////////

// Operations

//foreign handler MCCanvasGradientAddStop(inout xGradient as Gradient, in pOffset as CanvasFloat, in pColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientAddStop(inout xGradient as Gradient, in pStop as GradientStop) as undefined binds to "<builtin>"

foreign handler MCCanvasGradientTransform(inout xGradient as Gradient, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientScale(inout xGradient as Gradient, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientRotate(inout xGradient as Gradient, in pRadians as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientTranslate(inout xGradient as Gradient, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"

syntax AddGradientStop is statement
//	"add" "stop" "at" <mOffset: Expression> "with" <mColor: Expression> "to" <mGradient: Expression>
	"add" <mStop: Expression> "to" <mGradient:Expression>
begin
//	MCCanvasGradientAddStop(mGradient, mOffset, mColor)
	MCCanvasGradientAddStop(mGradient, mStop)
end syntax

syntax TransformGradient is statement
	"transform" <mGradient: Expression> "by" <mTransform: Expression>
begin
	MCCanvasGradientTransform(mGradient, mTransform)
end syntax

syntax ScaleGradient is statement
	"scale" <mGradient: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasGradientScale(mGradient, mScale[0], mScale[0])
	MCCanvasGradientScale(mGradient, mScale[0], mScale[1])
end syntax

syntax RotateGradient is statement
	"rotate" <mGradient: Expression> "by" <mRadians: Expression>
begin
	MCCanvasGradientRotate(mGradient, mRadians)
end syntax

syntax TranslateGradient is statement
	"translate" <mGradient: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasGradientTranslate(mGradient, mTranslation[0], mTranslation[1])
end syntax

////////////////////////////////////////////////////////////////////////////////

// Image

// Constructors

foreign handler MCCanvasImageMakeWithPath(in pPath as string, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasImageMakeWithData(in pData as data, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasImageMakeWithPixels(in pWidth as integer, in pHeight as integer, in pPixels as data, out rImage as Image) as undefined binds to "<builtin>"

syntax MakeImage is prefix operator with precedence 4
	"image" "from" ( "file" <mPath: Expression> | "data" <mData: Expression> )
begin
	MCCanvasImageMakeWithPath(mPath, output)
	MCCanvasImageMakeWithData(mData, output)
end syntax

syntax MakeImageWithPixels is prefix operator with precedence 4
	"image" "of" "size" <mSize: ExpressionList> "with" "pixels" <mPixels: Expression>
begin
	MCCanvasImageMakeWithPixels(mSize[0], mSize[1], mPixels, output)
end syntax

//////////

// Properties

foreign handler MCCanvasImageGetWidth(in pImage as Image, out rWidth as uint) as undefined binds to "<builtin>"
foreign handler MCCanvasImageGetHeight(in pImage as Image, out rHeight as uint) as undefined binds to "<builtin>"
// TODO - add support for metadata
//foreign handler MCCanvasImageGetMetadata(in pImage as Image, out rMetadata as array) as undefined binds to "<builtin>"
foreign handler MCCanvasImageGetPixels(in pImage as Image, out rPixels as data) as undefined binds to "<builtin>"
// TODO - add image frame index property?

syntax ImageWidthProperty is prefix operator with precedence 4
	"the" "width" "of" <mImage: Expression>
begin
	MCCanvasImageGetWidth(mImage, output)
end syntax

syntax ImageHeightProperty is prefix operator with precedence 4
	"the" "height" "of" <mImage: Expression>
begin
	MCCanvasImageGetHeight(mImage, output)
end syntax

//syntax ImageMetadataProperty is prefix operator with precedence 4
//	"the" "metadata" "of" <mImage: Expression>
//begin
//	MCCanvasImageGetMetadata(mImage, output)
//end syntax

syntax ImagePixelsProperty is prefix operator with precedence 4
	"the" "pixels" "of" <mImage: Expression>
begin
	MCCanvasImageGetPixels(mImage, output)
end syntax

//////////

// Operations

// TODO - how to specify resize quality?
// TODO - add resize operation? "resize <image> to <width>,<height>"

foreign handler MCCanvasImageTransform(inout xImage as Image, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasImageScale(inout xImage as Image, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasImageRotate(inout xImage as Image, in pRadians as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasImageCrop(inout xImage as Image, in pRight as Rectangle) as undefined binds to "<builtin>"

syntax TransformImage is statement
	"transform" <mImage: Expression> "by" <mTransform: Expression>
begin
	MCCanvasImageTransform(mImage, mTransform)
end syntax

syntax ScaleImage is statement
	"scale" <mImage: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasImageScale(mImage, mScale[0], mScale[0])
	MCCanvasImageScale(mImage, mScale[0], mScale[1])
end syntax

syntax RotateImage is statement
	"rotate" <mImage: Expression> "by" <mRadians: Expression>
begin
	MCCanvasImageRotate(mImage, mRadians)
end syntax

syntax CropImage is statement
	"crop" <mImage: Expression> "to" <mRect: Expression>
begin
	MCCanvasImageCrop(mImage, mRect)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Path

// Constructors

foreign handler MCCanvasPathMakeWithInstructionsAsString(in pString as string, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePath is prefix operator with precedence 4
	"path" <mString: Expression>
begin
	MCCanvasPathMakeWithInstructionsAsString(mString, output)
end syntax

// Primitive Constructors

foreign handler MCCanvasPathMakeWithRoundedRectangle(in pRect as Rectangle, in pRadiusX as CanvasFloat, in pRadiusY as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithRectangle(in pRect as Rectangle, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithEllipse(in pCenter as Point, in pRadiusX as CanvasFloat, in pRadiusY as CanvasFloat, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithLine(in pStart as Point, in pEnd as Point, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithPoints(in pPoints as list of Point, in pClose as boolean, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePathWithRoundedRectangle is prefix operator with precedence 4
	"rounded" "rectangle" "path" "of" <mRect: Expression> "with" ( "radius" <mRadius: Expression> | "radii" <mRadii: ExpressionList> )
begin
	MCCanvasPathMakeWithRoundedRectangle(mRect, mRadius, mRadius, output)
	MCCanvasPathMakeWithRoundedRectangle(mRect, mRadii[0], mRadii[1], output)
end syntax

syntax MakePathWithRectangle is prefix operator with precedence 4
	"rectangle" "path" "of" <mRect: ExpressionList>
begin
	MCCanvasPathMakeWithRectangle(mRect, output)
end syntax

syntax MakePathWithCircle is prefix operator with precedence 4
	"circle" "path" "centered" "at" <mPoint: Expression> "with" "radius" <mRadius: Expression>
begin
	MCCanvasPathMakeWithEllipse(mPoint, mRadius, mRadius, output)
end syntax

syntax MakePathWithEllipse is prefix operator with precedence 4
	"ellipse" "path" "centered" "at" <mPoint: Expression> "with" "radii" <mRadii: ExpressionList>
begin
	MCCanvasPathMakeWithEllipse(mPoint, mRadii[0], mRadii[1], output)
end syntax

syntax MakePathWithLine is prefix operator with precedence 4
	"line" "from" <mPointA: Expression> "to" <mPointB: Expression>
begin
	MCCanvasPathMakeWithLine(mPointA, mPointB, output)
end syntax

syntax MakePathWithPoints is prefix operator with precedence 4
	( "polygon" <mClosed=true> | "polyline" <mClosed=false> ) "path" "with" "points" <mPoints: Expression>
begin
	MCCanvasPathMakeWithPoints(mPoints, mClosed, output)
end syntax

//////////

// Properties

foreign handler MCCanvasPathGetSubpaths(in pPath as Path, in pStart as integer, in pEnd as integer, out rSubpaths as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathGetBoundingBox(in pPath as Path, out rRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasPathGetInstructionsAsString(in pPath as Path, out rInstructions as string) as undefined binds to "<builtin>"

syntax PathSubpathProperty is prefix operator with precedence 4
	"subpath" <mStart: Expression> [ "to" <mEnd: Expression> ] "of" <mPath: Expression>
begin
	MCCanvasPathGetSubpaths(mPath, mStart, mEnd, output)
	MCCanvasPathGetSubpaths(mPath, mStart, mStart, output)
end syntax

syntax PathBoundingBoxProperty is prefix operator with precedence 4
	"bounding" "box" "of" <mPath: Expression>
begin
	MCCanvasPathGetBoundingBox(mPath, output)
end syntax

syntax PathInstructionsProperty is prefix operator with precedence 4
	"the" "instructions" "of" <mPath: Expression>
begin
	MCCanvasPathGetInstructionsAsString(mPath, output)
end syntax

//////////

// Operations

foreign handler MCCanvasPathTransform(inout xPath as Path, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPathScale(inout xPath as Path, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPathRotate(inout xPath as Path, in pRadians as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasPathTranslate(inout xPath as Path, in pX as CanvasFloat, in pY as CanvasFloat) as undefined binds to "<builtin>"

foreign handler MCCanvasPathAddPath(in pSource as Path, inout xDest as Path) as undefined binds to "<builtin>"

foreign handler MCCanvasPathMoveTo(in pPoint as Point, inout xPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathLineTo(in pPoint as Point, inout xPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathCurveThroughPoint(in pThrough as Point, in pTo as Point, inout xPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathCurveThroughPoints(in pThroughA as Point, in pThroughB as Point, in pTo as Point, inout xPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathClosePath(inout xPath as Path) as undefined binds to "<builtin>"

syntax PathMoveTo is statement
	"move" "to" <mPoint: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathMoveTo(mPoint, mPath)
end syntax

syntax PathLineTo is statement
	"line" "to" <mPoint: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathLineTo(mPoint, mPath)
end syntax

syntax PathCurveThrough is statement
	"curve" "through" <mThroughA: Expression> [ "and" <mThroughB: Expression> ] "to" <mTo: Expression> "on" <mPath: Expression>
begin
	MCCanvasPathCurveThroughPoint(mThroughA, mTo, mPath)
	MCCanvasPathCurveThroughPoints(mThroughA, mThroughB, mTo, mPath)
end syntax

syntax PathClosePath is statement
	"close" "path" "on" <mPath: Expression>
begin
	MCCanvasPathClosePath(mPath)
end syntax

syntax TransformPath is statement
	"transform" <mPath: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPathTransform(mPath, mTransform)
end syntax

syntax ScalePath is statement
	"scale" <mPath: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasPathScale(mPath, mScale[0], mScale[0])
	MCCanvasPathScale(mPath, mScale[0], mScale[1])
end syntax

syntax RotatePath is statement
	"rotate" <mPath: Expression> "by" <mRadians: Expression>
begin
	MCCanvasPathRotate(mPath, mRadians)
end syntax

syntax TranslatePath is statement
	"translate" <mPath: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasPathTranslate(mPath, mTranslation[0], mTranslation[1])
end syntax

syntax AddPath is statement
	"add" <mSource: Expression> "to" <mDest: Expression>
begin
	MCCanvasPathAddPath(mSource, mDest)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Graphic Effect

// Constructors

foreign handler MCCanvasGraphicEffectMakeWithPropertyArray(in pType as integer, in pProperties as array, out rGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

syntax GraphicEffectType is phrase
	( "color" "overlay" <mType=0> | "inner" "shadow" <mType=1> | "outer" "shadow" <mType=2> | "inner" "glow" <mType=3> | "outer" "glow" <mType=4> )
begin
end syntax

syntax MakeGraphicEffectWithProperties is prefix operator with precedence 4
	<mType: GraphicEffectType> <mProperties: Expression>
begin
	MCCanvasGraphicEffectMakeWithPropertyArray(mType, mProperties, output)
end syntax

//////////

// Properties

foreign handler MCCanvasGraphicEffectGetTypeAsString(in pGraphicEffect as GraphicEffect, out rType as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetColor(in pGraphicEffect as GraphicEffect, out rColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetColor(in pColor as Color, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetBlendModeAsString(in pGraphicEffect as GraphicEffect, out rBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetBlendModeAsString(in pBlendMode as string, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetOpacity(in pGraphicEffect as GraphicEffect, out rOpacity as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetOpacity(in pOpacity as CanvasFloat, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

//MCCanvasGraphicEffectGetFilterAsString(in pGraphicEffect as GraphicEffect, out rFilter as string) as undefined binds to "<builtin>"
//MCCanvasGraphicEffectSetFilterAsString(in pFilter as string, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetSize(in pGraphicEffect as GraphicEffect, out rSize as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetSize(in pSize as CanvasFloat, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetSpread(in pGraphicEffect as GraphicEffect, out rSpread as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetSpread(in pSpread as CanvasFloat, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

foreign handler MCCanvasGraphicEffectGetDistance(in pGraphicEffect as GraphicEffect, out rDistance as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetDistance(in pDistance as CanvasFloat, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetAngle(in pGraphicEffect as GraphicEffect, out rAngle as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetAngle(in pAngle as CanvasFloat, inout xGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

syntax GraphicEffectTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetTypeAsString(mGraphicEffect, output)
end syntax

syntax GraphicEffectColorProperty is prefix operator with precedence 4
	"the" "color" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetColor(mGraphicEffect, output)
	MCCanvasGraphicEffectSetColor(input, mGraphicEffect)
end syntax

syntax GraphicEffectBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetBlendModeAsString(mGraphicEffect, output)
	MCCanvasGraphicEffectSetBlendModeAsString(input, mGraphicEffect)
end syntax

syntax GraphicEffectOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetOpacity(mGraphicEffect, output)
	MCCanvasGraphicEffectSetOpacity(input, mGraphicEffect)
end syntax

syntax GraphicEffectSizeProperty is prefix operator with precedence 4
	"the" "size" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetSize(mGraphicEffect, output)
	MCCanvasGraphicEffectSetSize(input, mGraphicEffect)
end syntax

syntax GraphicEffectSpreadProperty is prefix operator with precedence 4
	"the" "spread" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetSpread(mGraphicEffect, output)
	MCCanvasGraphicEffectSetSpread(input, mGraphicEffect)
end syntax

syntax GraphicEffectDistanceProperty is prefix operator with precedence 4
	"the" "distance" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetDistance(mGraphicEffect, output)
	MCCanvasGraphicEffectSetDistance(input, mGraphicEffect)
end syntax

syntax GraphicEffectAngleProperty is prefix operator with precedence 4
	"the" "angle" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetAngle(mGraphicEffect, output)
	MCCanvasGraphicEffectSetAngle(input, mGraphicEffect)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Canvas

// Properties

foreign handler MCCanvasGetPaint(in pCanvas as Canvas, out rPaint as Paint) as undefined binds to "<builtin>"
foreign handler MCCanvasSetPaint(in pPaint as Paint, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetFillRuleAsString(in pCanvas as Canvas, out rFillRule as string) as undefined binds to "<builtin>"
foreign handler MCCanvasSetFillRuleAsString(in pFillRule as string, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetAntialias(in pCanvas as Canvas, out rAntialias as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasSetAntialias(in pAntialias as boolean, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetOpacity(in pCanvas as Canvas, out rOpacity as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasSetOpacity(in pOpacity as CanvasFloat, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetBlendModeAsString(in pCanvas as Canvas, out rBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasSetBlendModeAsString(in pBlendMode as string, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetStippled(in pCanvas as Canvas, out rStippled as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasSetStippled(in pStippled as boolean, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasGetImageResizeQualityAsString(in pCanvas as Canvas, out rQuality as string) as undefined binds to "<builtin>"
foreign handler MCCanvasSetImageResizeQualityAsString(in pQuality as string, inout xCanvas as Canvas) as undefined binds to "<builtin>"

syntax CanvasPaintProperty is prefix operator with precedence 4
	"the" "paint" "of" <mCanvas: Expression>
begin
	MCCanvasGetPaint(mCanvas, output)
	MCCanvasSetPaint(input, mCanvas)
end syntax

syntax CanvasFillRuleProperty is prefix operator with precedence 4
	"the" "fill" "rule" "of" <mCanvas: Expression>
begin
	MCCanvasGetFillRuleAsString(mCanvas, output)
	MCCanvasSetFillRuleAsString(input, mCanvas)
end syntax

syntax CanvasAntialiasProperty is prefix operator with precedence 4
	"the" "antialias" "of" <mCanvas: Expression>
begin
	MCCanvasGetAntialias(mCanvas, output)
	MCCanvasSetAntialias(input, mCanvas)
end syntax

syntax CanvasOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mCanvas: Expression>
begin
	MCCanvasGetOpacity(mCanvas, output)
	MCCanvasSetOpacity(input, mCanvas)
end syntax

syntax CanvasBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mCanvas: Expression>
begin
	MCCanvasGetBlendModeAsString(mCanvas, output)
	MCCanvasSetBlendModeAsString(input, mCanvas)
end syntax

syntax CanvasStippledProperty is prefix operator with precedence 4
	"the" "stippled" "of" <mCanvas: Expression>
begin
	MCCanvasGetStippled(mCanvas, output)
	MCCanvasSetStippled(input, mCanvas)
end syntax

syntax CanvasImageResizeQuality is prefix operator with precedence 4
	"the" "image" "resize" "quality" "of" <mCanvas: Expression>
begin
	MCCanvasGetImageResizeQualityAsString(mCanvas, output)
	MCCanvasSetImageResizeQualityAsString(input, mCanvas)
end syntax

//////////

// Operations

foreign handler MCCanvasCanvasTransform(inout xCanvas as Canvas, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasScale(inout xCanvas as Canvas, in pScaleX as CanvasFloat, in pScaleY as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasRotate(inout xCanvas as Canvas, in pAngle as CanvasFloat) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasTranslate(inout xCanvas as Canvas, in pX as CanvasFloat,in pY as CanvasFloat) as undefined binds to "<builtin>"

foreign handler MCCanvasCanvasSaveState(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasRestoreState(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasBeginLayer(inout xCanvas as Canvas) as undefined binds to "<builtin>"
// TODO - begin layer with effect foo in rect bar of baz?
foreign handler MCCanvasCanvasBeginLayerWithEffect(inout xCanvas as Canvas, in pEffect as GraphicEffect, in pRect as Rectangle) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasEndLayer(inout xCanvas as Canvas) as undefined binds to "<builtin>"

foreign handler MCCanvasCanvasFill(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasFillPath(in pPath as Path, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasStroke(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasStrokePath(in pPath as Path, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasClipToRect(in pClip as Rectangle, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasAddPath(in pPath as Path, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasDrawImage(in pImage as Image, in pDest as Rectangle, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasDrawRectOfImage(in pSrc as Rectangle, in pImage as Image, in pDst as Rectangle, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasMoveTo(in pPoint as Point, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasLineTo(in pPoint as Point, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasCurveThroughPoint(in pThrough as Point, in pTo as Point, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasCurveThroughPoints(in pThroughA as Point, in pThroughB as Point, in pTo as Point, inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasClosePath(inout xCanvas as Canvas) as undefined binds to "<builtin>"

syntax TransformCanvas is statement
	"transform" <mCanvas: Expression> "by" <mTransform: Expression>
begin
	MCCanvasCanvasTransform(mCanvas, mTransform)
end syntax

syntax ScaleCanvas is statement
	"scale" <mCanvas: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasCanvasScale(mCanvas, mScale[0], mScale[0])
	MCCanvasCanvasScale(mCanvas, mScale[0], mScale[1])
end syntax

syntax RotateCanvas is statement
	"rotate" <mCanvas: Expression> "by" <mAngle: Expression>
begin
	MCCanvasCanvasRotate(mCanvas, mAngle)
end syntax

syntax TranslateCanvas is statement
	"translate" <mCanvas: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasCanvasTranslate(mCanvas, mTranslation[0], mTranslation[1])
end syntax

syntax CanvasSaveState is statement
	"save" "state" "of" <mCanvas: Expression>
begin
	MCCanvasCanvasSaveState(mCanvas)
end syntax

syntax CanvasRestoreState is statement
	"restore" "state" "of" <mCanvas: Expression>
begin
	MCCanvasCanvasRestoreState(mCanvas)
end syntax

syntax CanvasBeginLayer is statement
	"begin" "layer" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasBeginLayer(mCanvas)
end syntax

syntax CanvasEndLayer is statement
	"endlayer" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasEndLayer(mCanvas)
end syntax

syntax CanvasFill is statement
	"fill" ( <mPath: Expression> "on" ) <mCanvas: Expression>
begin
	MCCanvasCanvasFill(mCanvas)
	MCCanvasCanvasFillPath(mPath, mCanvas)
end syntax

syntax CanvasStroke is statement
	"stroke" ( <mPath: Expression> "on" ) <mCanvas: Expression>
begin
	MCCanvasCanvasStroke(mCanvas)
	MCCanvasCanvasStrokePath(mPath, mCanvas)
end syntax

syntax CanvasClip is statement
	"clip" "to" <mRect: ExpressionList> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasClipToRect(mRect, mCanvas)
end syntax

syntax CanvasAddPath is statement
	"add" <mPath: Expression> "to" <mCanvas: Expression>
begin
	MCCanvasCanvasAddPath(mPath, mCanvas)
end syntax

syntax ImageResizeQuality is phrase
	( "low" <mQuality=1> | "medium" <mQuality=2> | "high" <mQuality=3> )
begin
end syntax

syntax CanvasDrawImage is statement
	"draw" [ <mSrcRect: Expression> "of" ] <mImage: Expression> "into" <mDestRect: Expression> "of" <mCanvas: Expression>
begin
	MCCanvasCanvasDrawImage(mImage, mDestRect, mCanvas)
	MCCanvasCanvasDrawRectOfImage(mSrcRect, mImage, mDestRect, mCanvas)
end syntax

syntax CanvasMoveTo is statement
	"move" "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasMoveTo(mPoint, mCanvas)
end syntax

syntax CanvasLineTo is statement
	"line" "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasLineTo(mPoint, mCanvas)
end syntax

syntax CanvasCurveThrough is statement
	"curve" "through" <mThroughA: Expression> [ "and" <mThroughB: Expression> ] "to" <mPoint: Expression> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasCurveThroughPoint(mThroughA, mPoint, mCanvas)
	MCCanvasCanvasCurveThroughPoints(mThroughA, mThroughB, mPoint, mCanvas)
end syntax

syntax CanvasClosePath is statement
	"close" "path" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasClosePath(mCanvas)
end syntax

////////////////////////////////////////////////////////////////////////////////

end module
