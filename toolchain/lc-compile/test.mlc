module test

public handler test()
    variable tResults as list
    put the empty list into tResults

    variable tDelimiter as string
    put newline into tDelimiter

    testLogic(tResults)
    testList(tResults)
    testSort(tResults)
    testArithmetic(tResults)
	testChar(tResults)
	testBitwise(tResults)
	testArray(tResults)
	
    variable tResultString as string
    put the empty string into tResultString
    combine tResults with tDelimiter into tResultString

    return tResultString
end handler

public handler testLog(in pModule as string, in pTest as string, in pResult as bool, inout xResults as list)
    variable tStringResult as string
    if pResult then
        put "SUCCESS" into tStringResult
    else
        put "FAILURE" into tStringResult
    end if

    push pModule & "_" & pTest & ":" && tStringResult onto xResults
end handler

public handler boolWithSideEffect(in tResult as bool, inout tVar as string) as bool
	put "a" into tVar
	return tResult
end handler

public handler testArray(inout xResults as list)
	variable tArray as array
	put the empty array into tArray
	
	
	
	--put "value1" into tArray[ "key1" ]
	--put "value2" into tArray["key2"]
	--put "value3" into tArray["key3"]
	
	variable tKeys as list
	put the keys of tArray into tKeys
	
	variable tKeysString as string
	combine tKeys with "," into tKeysString
	
	testLog("", "", tKeysString is the empty string, xResults)
	
	--testLog("Array", "ArrayKeysOf", tKeysString contains "key1", xResults)
	--testLog("Array", "ArrayKeysOf", tKeysString contains "key2", xResults)
	--testLog("Array", "ArrayKeysOf", tKeysString contains "key3", xResults)
	
end handler

public handler testBitwise(inout xResults as list)
	variable tVar as integer
	
	put 3 bitwise and 6 into tVar
	testLog("Bitwise", "BitwiseAnd", tVar is 2, xResults)
	
	put 3 bitwise or 6 into tVar
	testLog("Bitwise", "BitwiseOr", tVar is 7, xResults)
	
	put 3 bitwise xor 6 into tVar
	testLog("Bitwise", "BitwiseXor", tVar is 5, xResults)
	
	--put bitwise not 0 into tVar

	put 7 shifted by 2 bitwise into tVar 
	testLog("Bitwise", "BitwiseShift", tVar is 28, xResults)
	
end handler

public handler testLogic(inout xResults as list)
    variable tVar as bool
    put not false into tVar

    testLog("Logic", "Not", tVar, xResults)
    
    // test boolean short circuit
    
    variable tString as string
    put the empty string into tString
    if (false and boolWithSideEffect(true, tString)) then
    	testLog("Logic", "And", false, xResults)
    else
        testLog("Logic", "And", true, xResults)
    end if	
    
    testLog("Logic", "AndShortCut", not (tString is "a"), xResults)
    
    if (true and boolWithSideEffect(true, tString)) then
    	testLog("Logic", "And", true, xResults)
    else
      	testLog("Logic", "And", false, xResults)  
    end if		
    
    testLog("Logic", "AndShortCut", tString is "a", xResults)
    
    variable tString2 as string
    put the empty string into tString2
    if (true or boolWithSideEffect(false, tString2)) then
    	testLog("Logic", "Or", true, xResults)
    else
        testLog("Logic", "Or", false, xResults)	
    end if	
    
    testLog("Logic", "OrShortCut", not (tString2 is "a"), xResults)
    
    if (false or boolWithSideEffect(false, tString2)) then
    	testLog("Logic", "Or", false, xResults)
    else
    	testLog("Logic", "Or", true, xResults)
    end if		
    
    testLog("Logic", "OrShortCut", tString2 is "a", xResults)	
    
end handler

public handler testChar(inout xResults as list) as undefined
	variable tString as string
	put "abcde" into tString
	
	testLog("Char", "CountCharsOf", the number of chars in tString is 5, xResults)
	testLog("Char", "FetchCharOf", char 5 of tString is "e", xResults)
	
	put "abcd" into char 5 of tString
	
	testLog("Char", "StoreCharOf", tString is "abcdabcd", xResults)
	
	testLog("Char", "FetchCharRangeOf", char 5 to 8 of tString is "abcd", xResults)
	
	put "e" into char 5 to 8 of tString
	
	testLog("Char", "StoreCharRangeOf", tString is "abcde", xResults)
	
	testLog("Char", "CharIsIn", "a" is in "abc", xResults)

	put "abcde" before char 1 of tString
	
	testLog("Char", "BeforeCharOf", tString is "abcdeabcde", xResults)
	
	put "abcde" after char 5 of tString
	
	testLog("Char", "AfterCharOf", tString is "abcdeabcdeabcde", xResults)

	variable tOffset as integer
	put the first offset of "abcde" in tString into tOffset
	
	testLog("Char", "CharOffset", tOffset is 1, xResults)
	
	put the first offset of "abcdef" in tString into tOffset
	testLog("Char", "CharOffset", tOffset is 0, xResults)
	
	put the offset of chars "abcde" after 1 in tString into tOffset
	
	testLog("Char", "CharOffsetAfter", tOffset is 5, xResults)
	
	put the first offset of chars "abcde" after 11 in tString into tOffset
	testLog("Char", "CharOffsetAfter", tOffset is 0, xResults)
	
	variable tLastDot as integer
	variable tAddress as string
	variable tTLD as string
	put "http://www.livecode.com/index.html" into tAddress
	put the last offset of "." in tAddress into tLastDot
	put the offset of "." before tLastDot in tAddress into tOffset
	put char tOffset + 1 to tOffset + 3 of tAddress into tTLD
	
	testLog("Char", "CharOffsetBefore", tTLD is "com", xResults)
	
	variable tVar as string
	put "123" into tVar
	
	variable tCount as integer
	put the number of chars in tVar into tCount
	subtract 1 from tCount
	
	repeat tCount times
		put "," after char tCount of tVar
		subtract 1 from tCount
	end repeat 	
	
	testLog("Char", "CharExample", tVar is "1,2,3", xResults)	
end handler

public handler testArithmetic(inout xResults as list) as undefined

	variable tInt as int
	variable tReal as double
	variable tNumber
	
	put 10 into tInt
	put 10 into tReal
	put 10 into tNumber
	
	add 2 to tInt
	add 2 to tReal
	add 2 to tNumber
	
	testLog("Arithmetic", "AddToInt", tInt is 12, xResults)
	testLog("Arithmetic", "AddToReal", tReal is 12, xResults)
	testLog("Arithmetic", "AddToNum", tNumber is 12, xResults)

	subtract 2 from tInt
	subtract 2 from tReal
	subtract 2 from tNumber
	
	testLog("Arithmetic", "SubtractFromInt", tInt is 10, xResults)
	testLog("Arithmetic", "SubtractFromReal", tReal is 10, xResults)
	testLog("Arithmetic", "SubtractFromNum", tNumber is 10, xResults)
	
	multiply tInt by 2
	multiply tReal by 2
	multiply tNumber by 2

	testLog("Arithmetic", "MultiplyInt", tInt is 20, xResults)
	testLog("Arithmetic", "MultiplyReal", tReal is 20, xResults)
	testLog("Arithmetic", "MultiplyNum", tNumber is 20, xResults)	

	divide tInt by 40
	divide tReal by 40
	divide tNumber by 40
	
	testLog("Arithmetic", "DivideInt", tInt is 0, xResults)
	testLog("Arithmetic", "DivideReal", tReal is 0.5, xResults)
	testLog("Arithmetic", "DivideNum", tNumber is 0.5, xResults)		

end handler

public handler testList(inout xResults as list) as undefined
    variable tTestList as list
    put the empty list into tTestList

	variable tCount as integer
	put the number of elements in tTestList into tCount
	testLog("List", "EmptyList", tCount is 0, xResults)

    push "xyz" onto tTestList
    push 2 onto tTestList
    push "abcd" onto tTestList
    push 1 onto tTestList

    testLog("List", "NumberOfElements", the number of elements in tTestList is 4, xResults)
   	testLog("List", "HeadOf", the head of tTestList is "xyz", xResults)
	testLog("List", "TailOf", the tail of tTestList is 1, xResults)

    testLog("List", "ElementOf", element 2 of tTestList is 2, xResults)
   	testLog("List", "ElementRangeOf", element 2 of element 3 to -1 of tTestList is 1, xResults)

    variable tSubList as list
    put element -2 to -1 of tTestList into tSubList
    testLog("List", "Contains", tTestList contains element -2 to -1 of tTestList, xResults)

    testLog("List", "IsIn", "abcd" is in tSubList, xResults)
    testLog("List", "IsNotIn", not tSubList is in tTestList, xResults)

    variable tString as string
    pop front of tSubList into tString

    testLog("List", "Pop", tString is "abcd", xResults)
    testLog("List", "Pop", the number of elements in tSubList is 1, xResults)

    splice tTestList after element 1 of tSubList

    testLog("List", "SpliceAfter", the number of elements in tSubList is 5, xResults)
    testLog("List", "SpliceAfter", the tail of tSubList is 1, xResults)
    testLog("List", "SpliceAfter", tSubList contains tTestList, xResults)

	--put "ZZZZ" into tTestList[1]
	--testLog("List", "SingletonElement", tTestList[1] is "ZZZZ", xResults)

end handler

public handler testSort(inout xResults as list) as undefined
    variable tTestList as list
    put the empty list into tTestList

    push "xyz" onto tTestList
    push 2 onto tTestList
    push "abcd" onto tTestList
    push 1 onto tTestList

    sort tTestList in ascending numeric order

    testLog("Sort", "AscendingNumeric", the head of tTestList is 1, xResults)
    testLog("Sort", "NumericStable", the tail of tTestList is "abcd", xResults)

    sort tTestList in ascending text order

    testLog("Sort", "AscendingText", the head of tTestList is "abcd", xResults)
    testLog("Sort", "TextStable", the tail of tTestList is 2, xResults)

end handler

end module