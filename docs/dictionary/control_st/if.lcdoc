Name: if

Type: control structure

Syntax: if <condition> then <statementList> [else <elseStatementList>]

Syntax:if <condition> then
 <statementList>
 [else if <condition> then
   <elseifStatementList>]
 [else 
   <elseStatementList>]
end if


Summary:
A <conditional statement> following an <if> or an optional series of <condtional statement|conditional statments> 
following an <else if> that if true will <execute> the <statement list|statementList> 
that follows that <conditional statement>.  If none of the <condtional statement|conditional statments> 
are true then the <statement list|elseStatementList> following the <else> keyword, if present,
will execute. If the <if> <control structure> contains more than one line the <if><control structure> must end with an 
<end if> keyword.

Introduced: 1.0

OS: mac, windows, linux, ios, android

Platforms: desktop, server, mobile

Example:
if tSpeed &lt; 2 then
   answer "That is slow"
else if tSpeed &lt; 5 then
   answer "That is pretty fast"
else if tSpeed &lt; 10 then
   answer "That is a rocket"
else
   answer "You are traveling at the speed of light"
end if

Parameters:
condition (bool):
Any <expression>. (If the <condition> <evaluate|evaluates> to true, 
the <statement|statements> execute for that <condition>.
If the <condition> <evaluate|evaluates> to false, the <statement> or 
<statement list|statementList> following that <condition> is
skipped.)

statement|statementList:
Of one or more <LiveCode> <statement|statements>, and can also include
<if>, <switch>, <try>, or <repeat> <control structure|control
structures>. 

elseIfStatement|elseIfStatementList:
Of one or more <LiveCode> <statement|statements>, and can also include
<if>, <switch>, <try>, or <repeat> <control structure|control
structures>. 

elseStatement|elseStatementList:
Of one or more <LiveCode> <statement|statements>, and can also include
<if>, <switch>, <try>, or <repeat> <control structure|control
structures>. 

Description:
Use the <if> <control structure> to <execute> a <statement>
(or <list of statements|statementList>) only under certain circumstances. 

The <if> <control structure> always begins with the <word> if. There are four forms of the <if> <control structure>:

    if condition then statementList [else elseStatementList]

This form may have a line break before the words `then` or `else` or both.

    if condition then
       statementList 
    [else
       elseStatementList]
    end if
    
    -- OR
    if condition 
    then statement 
    [else
       elseStatementList]
    end if

    -- OR
    if condition then
       statementList 
    else elseStatement
    end if

If the <condition> <evaluate|evaluates> to true, the statement or
<statementList> is <execute|executed>; if the <condition>
<evaluate|evaluates> to false, the statement or <statementList> is
skipped. 

If the <if> <control structure> contains an <else> clause, the
elseStatement or <elseStatementList> is <execute|executed> if the
<condition> is false.

If one <if> <control structure> is nested inside another, use of the
second form described above is recommended, since the other forms may
cause ambiguities in interpreting which <else> clause belongs with which
<if> statement.

The <if> <control structure> is most suitable when you want to check a
single <condition>. If you need to check for multiple possibilities,
doing something different for each one, use 
a <switch> <control structure> instead.

>*Note:* The <if> <control structure> is implemented internally as a
> <command> and appears in the <commandNames>.

References: switch (control structure), commandNames (function),
statement (glossary), command (glossary), evaluate (glossary),
execute (glossary), control structure (glossary), then (keyword),
else (keyword), else if (keyword), end if (keyword), word (keyword)

