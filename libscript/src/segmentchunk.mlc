module com.livecode.segmentchunk

foreign handler FetchSegmentOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreSegmentOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchSegmentRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreSegmentRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfSegmentsIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheSegmentsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalIsNotAmongTheSegmentsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"

foreign handler EvalOffsetOfSegmentIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

--

syntax SingletonSegmentOf is prefix operator with precedence 1
	"segment" <Index: Expression> "of" <Target: Expression>
begin
	FetchSegmentOf(Index, Target, output)
	StoreSegmentOf(input, Index, Target)
end syntax

syntax RangeSegmentOf is prefix operator with precedence 1
	"segment" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchSegmentRangeOf(Start, Finish, Target, output)
	StoreSegmentRangeOf(input, Start, Finish, Target)
end syntax

syntax CountSegmentsOf is prefix operator with precedence 1
	"the" "number" "of" "segments" "in" <Target: Expression>
begin
	EvalNumberOfSegmentsIn(Target, output)
end syntax

syntax AmongSegmentsOf is left binary operator with precedence 1
	<Needle: Expression> "is" "among" "the" "segments" "of" <Target: Expression>
begin
	EvalIsAmongTheSegmentsOf(Needle, Target, output)
end syntax

syntax NotAmongSegmentsOf is left binary operator with precedence 1
	<Needle: Expression> "is" "not" "among" "the" "segments" "of" <Target: Expression>
begin
	EvalIsNotAmongTheSegmentsOf(Needle, Target, output)
end syntax

syntax SegmentOffset is prefix operator with precedence 1
	"the" "offset" "of" "segment" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfSegmentIn(Needle, Target, output)
end syntax

--

end module