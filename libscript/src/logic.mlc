module com.livecode.logic

//foreign handler MCLogicEvalAnd(in Left as bool, in Right as bool, out Value as bool) as undefined binds to "<builtin>"
//foreign handler MCLogicEvalOr(in Left as bool, in Right as bool, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCLogicEvalNot(in Operand as bool, out Value as bool) as undefined binds to "<builtin>"

--

/*
Summary:    Returns the boolean-logical value of the expression '<Left> and <Right>'

Left:       An expression that evaluates to a boolean value
Right:      An expression that evaluates to a boolean value
output:     If the left hand expression evaluates to false, the value of the expression is false.
            Otherwise, the operator evaluates to the value of the right hand expression.
            Note that the right hand expression is only evaluated if the left hand expression is true.
*/

//syntax LogicOr is left binary operator of precedence 2
//    <Left: Expression> "or" <Right: Expression>
//begin
//    EvalOr(Left, Right, output)
//end syntax

/*
Summary:    Returns the boolean-logical value of the expression '<Left> or <Right>'

Left:       An expression that evaluates to a boolean value
Right:      An expression that evaluates to a boolean value
output:     If the left hand expression evaluates to true, the value of the expression is true.
            Otherwise, the operator evaluates to the value of the right hand expression.
            Note that the right hand expression is only evaluated if the left hand expression is false.
*/

//syntax LogicAnd is left binary operator of precedence 1
//    <Left: Expression> "and" <Right: Expression>
//begin
//    EvalAnd(Left, Right, output)
//end syntax

/*
Summary:    Returns the boolean-logical value of the expression 'not <Operand>'

Operand:    An expression that evaluates to a boolean value
output:     If the operand expression evaluates to true, the value of the expression is false. 
            Otherwise, the value of the expression is true.
*/

syntax LogicNot is prefix operator with precedence 1
    "not" <Operand: Expression>
begin
    MCLogicEvalNot(Operand, output)
end syntax

--

end module