/* 
This library consists of the operations for performing complex type conversion in modular LiveCode 
*/

module com.livecode.typeconvert

public foreign handler MCTypeConvertExecSplitStringByDelimiter(in Target as string, in Delimiter as string, out Value as list) as undefined binds to "<builtin>"
public foreign handler MCTypeConvertExecCombineListWithDelimiter(in Target as list, in Delimiter as string, out Value as string) as undefined binds to "<builtin>"

--

/*
Summary:        Splits the string in <Target> into a list of strings, using <Delimiter>
                as the delimiter.

Target:         An expression that evaluates to a string container.
Delimiter:      An expression that evaluates to a string.

Example:
	variable tVar as string
    put "first,second,third,fourth,fifth" into tVar
    variable tSplit as list
    split tVar by "," into tSplit
    put element 1 of tSplit into tFirstElement // tFirstElement contains "first"
    
Description:
Use the split command to convert a string representation of a list into a genuine (ordered) list.

Tags: Type conversion
*/

syntax StringSplitBy is statement
"split" <Target: Expression> "by" <Delimiter : Expression> "into" <Value: Expression>
begin
    MCTypeConvertExecSplitStringByDelimiter(Target, Delimiter, Value)
end syntax

/*
Summary:        Combines the list of strings in <Target>, using <Delimiter>
                as the delimiter. 
                
Target:         An expression that evaluates to a list container.
Delimiter:      An expression that evaluates to a string.

Example:
	variable tDigits as list
	put [1,2,3,4,5,6,7,8,9] into tDigits
	
	variable tString as string
    combine tDigits with "|" into tString // tString contains "1|2|3|4|5|6|7|8|9"
            
Description:
Use the combine command to convert a list into a string representation of the list.

>*Note:* The list *must* consist entirely of string elements, otherwise the combine command will throw an error.

Tags: Type conversion
*/

syntax CombineListWith is statement
    "combine" <Target: Expression> "with" <Delimiter : Expression> "into" <Value: Expression>
begin
    MCTypeConvertExecCombineListWithDelimiter(Target, Delimiter, Value)
end syntax

--

end module