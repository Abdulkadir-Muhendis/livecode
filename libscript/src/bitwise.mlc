/*  
This module specifies the bitwise operations on integers included in the standard library of modular LiveCode.
*/

module com.livecode.bitwise

public foreign handler MCBitwiseEvalBitwiseAnd(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseOr(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseNot(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseXor(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"

public foreign handler MCBitwiseEvalBitwiseShift(in Target as int, in Shift as int, out Value as int) as undefined binds to "<builtin>"

--

/*
Summary:        Performs a bitwise AND operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.

Returns: 	The integer whose binary representation is the result of the bitwise AND operation.

Example:
	variable tVar as number
	put 3 bitwise and 6 into tVar -- tVar contains 2
	
Description:
Each bit of <Left> bitwise and <Right> is 1 if and only if both the corresponding bit of the binary representation of <Left> and that of <Right> is 1. Otherwise it is 0.

Tags: Bitwise operations

*/

syntax BitwiseAnd is left binary operator with precedence 2
    <Left: Expression> "bitwise and" <Right: Expression>
begin
    MCBitwiseEvalBitwiseAnd(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise OR operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.

Returns: 	The integer whose binary representation is the result of the bitwise OR operation.
                

Example:
	variable tVar as number
	put 3 bitwise or 6 into tVar -- tVar contains 7
	
Description:
Each bit of <Left> bitwise or <Right> is 0 if and only if both the corresponding bit of the binary representation of <Left> and that of <Right> is 0. Otherwise it is 1.

Tags: Bitwise operations
*/

syntax BitwiseOr is left binary operator with precedence 4
    <Left: Expression> "bitwise or" <Right: Expression>
begin
    MCBitwiseEvalBitwiseOr(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise XOR operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.

Returns: 	The integer whose binary representation is the result of the bitwise XOR operation.

Example:
	variable tVar as number
	put 3 bitwise xor 6 into tVar -- tVar contains 5
	
Description:
Each bit of <Left> bitwise xor <Right> is 1 if and only if exactly one of the corresponding bits of the binary representation of <Left> and that of <Right> is 1. Otherwise it is 0.

Tags: Bitwise operations
*/

syntax BitwiseXor is left binary operator with precedence 3
    <Left: Expression> "bitwise xor" <Right: Expression>
begin
    MCBitwiseEvalBitwiseXor(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise NOT operation on the binary representation of <Operand>.

Operand:        An expression which evaluates to an integer.

Returns: 	The integer whose binary representation is the result of the bitwise NOT operation.

Example:
	variable tVar as number
	put bitwise not -5 into tVar -- tVar contains 4

Description:
Bitwise not returns the complement of <Operand> as a signed 32-bit integer, thus is equivalent to -(x + 1).

Tags: Bitwise operations
*/

syntax BitwiseNot is prefix operator with precedence 1
    "bitwise" "not" <Operand: Expression>
begin
    MCBitwiseEvalBitwiseNot(Operand, output)
end syntax

--

/*
Summary:       Shifts the bits of <Operand> left or right.

Operand:        An expression which evaluates to an integer.
Shift:          An expression which evaluates to an integer.

Returns: 	The result of bit-shifting <Operand> by <Shift> places.

Example:
	variable tVar
	put 7 shifted by 2 bitwise into tVar -- tVar contains 28

Description:
Shifting the bits of <Operand> by x is equivalent to multiplying by 2^x

Tags: Bitwise operations
*/

syntax BitwiseShift is postfix operator with precedence 1
    <Operand: Expression> "shifted" "by" <Shift: Expression> "bitwise"
begin
    MCBitwiseEvalBitwiseShift(Operand, Shift, output)
end syntax

--

//syntax BitwiseRotate is postfix operator with precedence 1
//    <Operand: Expression> "rotated" "by" <Shift: Expression> "bitwise"
//begin
//    EvalBitwiseRotate(Operand, Shift, output)
//end syntax

end module