/*  
This module specifies the syntax definitions and bindings for bitwise operations on integers in modular LiveCode.
*/

module com.livecode.bitwise

public foreign handler MCBitwiseEvalBitwiseAnd(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseOr(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseNot(in Operand as integer, out Value as integer) as undefined binds to "<builtin>"
public foreign handler MCBitwiseEvalBitwiseXor(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"

public foreign handler MCBitwiseEvalBitwiseShift(in Target as integer, in Shift as integer, out Value as integer) as undefined binds to "<builtin>"

--

/*
Summary:        Performs a bitwise AND operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.
output:         The integer whose binary representation is the result of the bitwise AND operation
                on the binary representations of <Left> and <Right> - i.e each bit of the result is 
                1 if and only if the corresponding bit of <Left> and of <Right> is 1. Otherwise it is 0.

*/

syntax BitwiseAnd is left binary operator with precedence 2
    <Left: Expression> "bitwise" "and" <Right: Expression>
begin
    MCBitwiseEvalBitwiseAnd(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise OR operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.
output:         The integer whose binary representation is the result of the bitwise OR operation
                on the binary representations of <Left> and <Right> - i.e each bit of the result is 
                0 if and only if the corresponding bit of <Left> and of <Right> is 0. Otherwise it is 1.

*/

syntax BitwiseOr is left binary operator with precedence 4
    <Left: Expression> "bitwise" "or" <Right: Expression>
begin
    MCBitwiseEvalBitwiseOr(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise XOR operation on the binary representations of <Left> and <Right>.

Left:           An expression which evaluates to an integer.
Right:          An expression which evaluates to an integer.
output:         The integer whose binary representation is the result of the bitwise XOR operation
                on the binary representations of <Left> and <Right> - i.e each bit of the result is 
                1 if and only if exactly one of the corresponding bits of <Left> and <Right> is 1. Otherwise 
                it is 0.

*/

syntax BitwiseXor is left binary operator with precedence 3
    <Left: Expression> "bitwise" "xor" <Right: Expression>
begin
    MCBitwiseEvalBitwiseXor(Left, Right, output)
end syntax

/*
Summary:        Performs a bitwise NOT operation on the binary representation of <Operand>.

Operand:        An expression which evaluates to an integer.
output:         The integer whose binary representation is the result of the bitwise NOT operation
                on the binary representation of <Operand> - i.e each bit of the result is 0 if and 
                only if the corresponding bit of <Operand> is 1. Otherwise it is 1.

*/

syntax BitwiseNot is prefix operator with precedence 1
    "bitwise" "not" <Operand: Expression>
begin
    MCBitwiseEvalBitwiseNot(Operand, output)
end syntax

--

/*
Summmary:       Shifts the bits of <Operand> left or right.

Operand:        An expression which evaluates to an integer.
Shift:          An expression which evaluates to an integer.
output:         The integer whose binary representation is the result of shifting the bits of the 
                binary representation of <Operand> by <Shift> places left or right.

*/

syntax BitwiseShift is postfix operator with precedence 1
    <Operand: Expression> "shifted" "by" <Shift: Expression> "bitwise"
begin
    MCBitwiseEvalBitwiseShift(Operand, Shift, output)
end syntax

--

//syntax BitwiseRotate is postfix operator with precedence 1
//    <Operand: Expression> "rotated" "by" <Shift: Expression> "bitwise"
//begin
//    EvalBitwiseRotate(Operand, Shift, output)
//end syntax

end module