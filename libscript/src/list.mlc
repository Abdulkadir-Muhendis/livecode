module com.livecode.list

public foreign handler MCListEvalHeadOf(in Target as list, out Value as any) as undefined binds to "<builtin>"
public foreign handler MCListEvalTailOf(in Target as list, out Value as any) as undefined binds to "<builtin>"

public foreign handler MCListExecPushSingleElementOnto(in Value as any, in IsFront as bool, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListExecPopElementInto(in IsFront as bool, inout Source as list, out Target as any) as undefined binds to "<builtin>"

public foreign handler MCListEvalNumberOfElementsIn(in Target as list, out Count as index) as undefined binds to "<builtin>"

public foreign handler MCListEvalIsAmongTheElementsOf(in Needle as any, in Target as list, out Result as bool) as undefined binds to "<builtin>"
public foreign handler MCListEvalContainsElements(in Target as list, in Needle as list, out Result as bool) as undefined binds to "<builtin>"

public foreign handler MCListFetchElementOf(in Index as int, in Target as list, out Value as any) as undefined binds to "<builtin>"
public foreign handler MCListStoreElementOf(in Value as any, in Index as int, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListFetchElementRangeOf(in Start as int, in Finish as int, in Target as list, out Value as list) as undefined binds to "<builtin>"
public foreign handler MCListStoreElementRangeOf(in Value as any, in Start as int, in Finish as int, inout Target as list) as undefined binds to "<builtin>"

public foreign handler MCListFetchIndexOf(in Target as list, in Index as int, out Value as any) as undefined binds to "<builtin>"
public foreign handler MCListStoreIndexOf(in Value as any, inout Target as list, in Index as int) as undefined binds to "<builtin>"

public foreign handler MCListStoreBeforeElementOf(in Value as any, in Index as int, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListStoreAfterElementOf(in Value as any, in Index as int, inout Target as list) as undefined binds to "<builtin>"

public foreign handler MCListSpliceIntoElementRangeOf(in Source as list, in Start as int, in Finish as int, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListSpliceIntoElementOf(in Source as list, in Index as int, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListSpliceBeforeElementOf(in Source as list, in Index as int, inout Target as list) as undefined binds to "<builtin>"
public foreign handler MCListSpliceAfterElementOf(in Source as list, in Index as int, inout Target as list) as undefined binds to "<builtin>"

public foreign handler MCListEvalEmpty(out Value as list) as undefined binds to "<builtin>"

--

/*
Summary:        Returns the first element of <Target>.
Target:         An expression which evaluates to a list.
output:			The first element of <Target>

Example:
	variable tVar as list
	put the empty list into tVar
	push "first element" onto tVar
	
	variable tResult as string
	if the head of tVar is "first element" then
		put "success" into tResult
	end if
	
Description:
Returns the first element of the list <Target> without modifying <Target>.
	the head of tVar
is equivalent to 
	tVar[1]
*/

syntax HeadOf is prefix operator with precedence 1
    "the" "head" "of" <Target: Expression>
begin
    MCListEvalHeadOf(Target, output)
end syntax

/* 
Summary:        Returns the last element of <Target>.
Target:         An expression which evaluates to a list.
output:			The last element of <Target>

Example:
	variable tVar as list
	put the empty list into tVar
	push "first element" onto tVar
	push "last element" onto tVar
	
	variable tResult as string
	if the tail of tVar is "last element" then
		put "success" into tResult
	end if
	
Description:
Returns the first element of the list <Target> without modifying <Target>.

	the tail of tVar
	
is equivalent to 

	tVar[-1]
*/

syntax TailOf is prefix operator with precedence 1
    "the" "tail" "of" <Target: Expression>
begin
    MCListEvalTailOf(Target, output)
end syntax

--

/* 
Summary:        Pushes <Value> onto <Target>.
Value:          Any expression.
Target:         An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	push "something" onto tVar
	push "something else" onto front of tVar
	
	variable tResult as string
	if tVar[1] is "something else" then
		put "success" into tResult
	end if

Description:
When <Value> is pushed onto <Target>, <Value> (by default) becomes the tail of the list, with an index one greater than the previous tail.
Use the 'front of' variant to push onto the front of a list instead.

*/

syntax PushOntoList is statement
    "push" <Value: Expression> "onto" ( "front" "of" <IsFront=true> | "back" "of" <IsFront=false> | <IsFront=false> ) <Target:Expression>
begin
    MCListExecPushSingleElementOnto(Value, IsFront, Target)
end syntax

/* 
Summary:        Pops the last element from <Source> into <Target>
Source:         An expression which evaluates to a list.
Target:         An expression which evaluates to a container.

Example:
	variable tVar as list
	put the empty list into tVar
	push "something" onto tVar
	push "something else" onto tVar
	
	variable tPopped as string
	pop tVar into tPopped -- tPopped contains "something else"

Description:
When <Source> is popped into <Target>, the last element of the list <Source> is removed and put into the container <Target>.
Use the 'front of' variant to pop from the front of a list instead.

*/

syntax PopList is statement
    "pop" ( "front" "of" <IsFront=true> | "back" "of" <IsFront=false> | <IsFront=false> ) <Source: Expression> "into" <Target: Expression>
begin
    MCListExecPopElementInto(IsFront, Source, Target)
end syntax

--

/*
Summary:        Returns the number of elements in <Target>
Target:         An expression which evaluates to a list.
output:			The number of elements in the list <Target>.
*/

syntax CountElementsOf is prefix operator with precedence 1
    "the" "number" "of" "elements" "in" <Target: Expression>
begin
    MCListEvalNumberOfElementsIn(Target, output)
end syntax

--

/* 
Summary:        Determines if a given element is in <Target>
Needle:         Any expression.
Target:         An expression which evaluates to a list.
output:         Returns true if <Needle> can be found among the elements of <Target>.

Example:
	variable tList as list
	put [ "a", "b", "c", "d" ] into tList
	
	variable tIsIn as bool
	put "a" is in tList into tIsIn -- tIsIn contains true

Description:
<Needle> must be an element of <Target> rather than a sublist, or contained within a list element of <Target>.
*/
                
syntax IsInElements is neutral binary operator with precedence 1
    <Needle: Expression> "is" "in" <Target: Expression>
begin
    MCListEvalIsAmongTheElementsOf(Needle, Target, output)
end syntax

/* 
Summary:        Determines if <Target> contains <Needle> as a subsequence.
Needle:         Any expression which evaluates to a list.
Target:         An expression which evaluates to a list.
output:         Returns true if <Target> contains <Needle>.

Example:
	variable tList as list
	put [ "a", "b", "c", "d" ] into tList
	
	variable tContains as bool
	put tList contains tList[1] into tContains -- tContains is false
	
	put tList contains element 1 to 2 of tList into tContains -- tContains is true

Description:
<Target> contains <Needle> if and only if the elements of <Needle> occur as a subsequence of the elements of <Target>.

>*Note:* Since "" is a subsequence of elements of every list, every list contains the empty list.
*/
                
syntax ContainsElements is neutral binary operator with precedence 1
    <Target: Expression> "contains" <Needle: Expression>
begin
    MCListEvalContainsElements(Target, Needle, output)
end syntax

--

/*

Summary:            Designates the element at index <Index> in <Target>.
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.

Description:     
Either locates the element container at the given index for use as the target container of another operation, or evaluates the element at the given index as the source of another operation.
                                        
>*Note:* It is an error if <Index> is out of range.
*/

syntax SingletonElementOf is prefix operator with precedence 1
	"element" <Index: Expression> "of" <Target: Expression>
begin
    MCListFetchElementOf(Index, Target, output)
    MCListStoreElementOf(input, Index, Target)
end syntax

/*

Summary:            Designates the element at index <Index> in <Target>.
Synonym:            SingletonElementOf
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.

Description:     
Either locates the element container at the given index for use as the target container of another operation, or evaluates the element at the given index as the source of another operation.
                                        
>*Note:* It is an error if <Index> is out of range.
*/

syntax SingletonArrElementOf is postfix operator with precedence 1
    <Target: Expression> "[" <Index: Expression> "]"
begin
    MCListFetchIndexOf(Target, Index, output)
    MCListStoreIndexOf(input, Target, Index)
end syntax

/*

Summary:            Designates the elements between indices <Start> and <Finish> in <Target>.

Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to binary data.
    
Description:     
Either locates the element containers between the given indices for use as a list container for the target of another operation, or evaluates the elements between the given indices as a list.
                                        
>*Note:* It is an error if either <Start> or <Finish> are out of range.
*/

syntax RangeElementsOf is prefix operator with precedence 1
	"element" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
    MCListFetchElementRangeOf(Start, Finish, Target, output)
    MCListStoreElementRangeOf(input, Start, Finish, Target)
end syntax

--

/* 
Summary:			Designates the location beween element <Index> - 1 and <Index> of <Target>

Index:				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	push 1 onto tVar
	push 3 onto tVar
	put 2 before element 2 of tVar -- tVar is the list [1,2,3]

Description:
Use with the put statement to insert an element in the specified location without removal. 
After executing 

	put tVar before element 5 of tList
	
tVar is the element at index 5 of tList, and every subsequent element has its index incremented by 1.

>*Note:* It is an error if <Index> is out of range.
*/
syntax BeforeElementOf is prefix operator with precedence 1
    "before" "element" <Index: Expression> "of" <Target: Expression>
begin
    MCListStoreBeforeElementOf(input, Index, Target)
end syntax


/* 
Summary:			Designates the location beween element <Index> and <Index> + 1 of <Target>

Index:				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	push 1 onto tVar
	push 3 onto tVar
	put 2 after element 1 of tVar -- tVar is the list [1,2,3]

Description:
Use with the put statement to insert an element in the specified location without removal. 
After executing 

	put tVar after element 5 of tList
	
tVar is the element at index 6 of tList, and every subsequent element has its index incremented by 1.

>*Note:* It is an error if <Index> is out of range.
*/

syntax AfterElementOf is prefix operator with precedence 1
    "after" "element" <Index: Expression> "of" <Target: Expression>
begin
    MCListStoreAfterElementOf(input, Index, Target)
end syntax

--

/*

Summary:            Removes the elements of <Target> from <Start > to <Finish> and inserts each of the elements of
                    <Source> into <Target> at <Start>.
Source:             An expression which evaluates to a list.
Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	
	variable tCount as int
	put 1 into tCount
	repeat 3 times
		push tCount onto tVar
	end repeat
	
	variable tVar2 as list
	push "these" onto tVar2
	push "are" onto tVar2
	push "unwanted" onto tVar2
	push 4 onto tVar2
	
	splice tVar into element 1 to 3 of tVar2 -- tVar2 contains the list [1,2,3,4]
	

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList into element 1 to 3 of tList2``` results in the removal of elements 1 to 3 of tList2 and the insertion of tList **as an element**, i.e. tList2 becomes the list [tList,element 4 of tList2, element 5 of tList2 ...]

>*Note:* It is an error if either <Start> or <Finish> is out of range.
*/

syntax SpliceIntoRange is statement
    "splice" <Source: Expression> "into" "element" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
    MCListSpliceIntoElementRangeOf(Source, Start, Finish, Target)
end syntax

/*

Summary:            Removes the element of <Target> at <Index> and inserts each of the elements of <Source> into
                    <Target> at <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	
	variable tCount as int
	put 1 into tCount
	repeat 3 times
		push tCount onto tVar
	end repeat
	
	variable tVar2 as list
	push "this is unwanted" onto tVar2
	push 4 onto tVar2
	
	splice tVar into element 1 of tVar2 -- tVar2 contains the list [1,2,3,4]
	

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList into element 1 of tList2``` results in the removal of element 1 of tList2 and the insertion of tList **as an element**, i.e. tList2 becomes the list [tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.

*/

syntax SpliceIntoElement is statement
    "splice" <Source: Expression> "into" "element" <Index: Expression> "of" <Target: Expression>
begin
    MCListSpliceIntoElementOf(Source, Index, Target)
end syntax

/*

Summary:            Inserts each of the elements of <Source> into <Target> before element at index <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	
	variable tCount as int
	put 2 into tCount
	repeat 3 times
		push tCount onto tVar
	end repeat
	
	variable tVar2 as list
	push 1 onto tVar2
	push 5 onto tVar2
	
	splice tVar before element 2 of tVar2 -- tVar2 contains the list [1,2,3,4,5]
	

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList before element 2 of tList2``` results in the insertion of tList **as an element**, i.e. tList2 becomes the list [element 1 of tList2,tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.
*/

syntax SpliceBeforeElement is statement
    "splice" <Source: Expression> "before" "element" <Index: Expression> "of" <Target: Expression>
begin
    MCListSpliceBeforeElementOf(Source, Index, Target)
end syntax

/*

Summary:            Inserts each of the elements of <Source> into <Target> after element at index <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

Example:
	variable tVar as list
	put the empty list into tVar
	
	variable tCount as int
	put 2 into tCount
	repeat 3 times
		push tCount onto tVar
	end repeat
	
	variable tVar2 as list
	push 1 onto tVar2
	push 5 onto tVar2
	
	splice tVar after element 1 of tVar2 -- tVar2 contains the list [1,2,3,4,5]
	

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList after element 1 of tList2``` results in the insertion of tList **as an element**, i.e. tList2 becomes the list [element 1 of tList2,tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.
*/

syntax SpliceAfterElement is statement
    "splice" <Source: Expression> "after" "element" <Index: Expression> "of" <Target: Expression>
begin
    MCListSpliceAfterElementOf(Source, Index, Target)
end syntax

--

/* 

Summary: 		Designates the list of zero elements

Example:
	variable tVar as list
	variable tCount as int
	put the empty list into tVar
	put the number of elements in tVar into tCount -- tCount is 0
	
Description:
Use ```the empty list``` to initialise a list variable.

*/


syntax EmptyList is expression
	"the" "empty" "list"
begin
	MCListEvalEmpty(output)
end syntax

end module