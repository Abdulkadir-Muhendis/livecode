module com.livecode.arithmetic

--

public foreign handler MCArithmeticExecAddIntegerToInteger(in Value as int, inout Target as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecAddRealToReal(in Value as double, inout Target as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecAddNumberToNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractIntegerFromInteger(in Value as int, inout Target as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractRealFromReal(in Value as real, inout Target as real) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecSubtractNumberFromNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyIntegerByInteger(inout Target as int, in Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyRealByReal(inout Target as double, in Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecMultiplyNumberByNumber(inout Target as number, in Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideIntegerByInteger(inout Target as int, in Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideRealByReal(inout Target as double, in Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticExecDivideNumberByNumber(inout Target as number, in Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalPlusInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalPlusReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalPlusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalMinusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerPlusInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealPlusReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberPlusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerMinusInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealMinusReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberMinusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerTimesInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealTimesReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberTimesNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerOverInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealOverReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberOverNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerModInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealModReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberModNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerWrapInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealWrapReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberWrapNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCArithmeticEvalIntegerIsGreaterThanInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsGreaterThanReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsGreaterThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsGreaterThanOrEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsGreaterThanOrEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsGreaterThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsLessThanInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsLessThanReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsLessThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalIntegerIsLessThanOrEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalRealIsLessThanOrEqualToReal(in Left as double, in Right as double, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalNumberIsLessThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"


public foreign handler MCArithmeticEvalEqualToInteger(in Left as int, in Right as int, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalEqualToReal(in Left as real, in Right as real, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCArithmeticEvalEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
--

/*
Summary:    Adds <Value> to <Target>.
Target:     An expression that evaluates to a numeric container.
Value:      An expression that evaluates to a number.   

Example:
    variable tVar as int
    put 2 into tVar
    add 10 to tVar -- tVar contains 12

Description:
Adds the number <Value> to <Target>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.
*/

syntax AddNumberTo is statement
    "add" <Value: Expression> "to" <Target: Expression>
begin
    MCArithmeticExecAddNumberToNumber(Value, Target)
    MCArithmeticExecAddRealToReal(Value, Target)
    MCArithmeticExecAddIntegerToInteger(Value, Target)
end syntax


/*
Summary:    Subtracts <Value> from <Target>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar as real
	put 10 into tVar
	subtract 2.5 from tVar -- tVar contains 7.5

Description:
Subtracts the number <Value> from <Target>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

*/

syntax SubtractNumberFrom is statement
    "subtract" <Value: Expression> "from" <Target: Expression>
begin
    MCArithmeticExecSubtractIntegerFromInteger(Value, Target)
    MCArithmeticExecSubtractRealFromReal(Value, Target)
    MCArithmeticExecSubtractNumberFromNumber(Value, Target)
end syntax

/*
Summary:    Multiplies <Target> by <Value>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar as int
	put 2 into tVar
	multiply tVar by 2 -- tVar contains 4

Description:
Multiplies the number <Target> by <Value>.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.
*/

syntax MultiplyNumberBy is statement
    "multiply" <Target: Expression> "by" <Value: Expression>
begin
    MCArithmeticExecMultiplyIntegerByInteger(Target, Value)
    MCArithmeticExecMultiplyRealByReal(Target, Value)
    MCArithmeticExecMultiplyNumberByNumber(Target, Value)
end syntax

/*
Summary:    Divides <Target> by <Value>.
Target:     An expression that evaluates to a numeric variable.
Value:      An expression that evaluates to a number.   

Example:
	variable tVar
	put 3 into tVar
	divide tVar by 2 -- tVar contains 1.5

Example:
	// int gets truncated
	variable tVar as int
	put 3 into tVar
	divide tVar by 2 -- tVar contains 1

Description:
Divides the number <Target> by <Value>.

>*Note:* If tVar is typed as an int, then the result will be truncated.

>*Note:* It is a syntax error if <Target> does not evaluate to a variable.

*/

syntax DivideNumberBy is statement
    "divide" <Target: Expression> "by" <Value: Expression>
begin
    MCArithmeticExecDivideIntegerByInteger(Target, Value)
    MCArithmeticExecDivideRealByReal(Target, Value)
    MCArithmeticExecDivideNumberByNumber(Target, Value)
end syntax

--

/*
Summary:    Unary plus operator.
Operand:    An expression that evaluates to a number.
output:     The result of evaluating <Operand>.

*/

syntax PlusUnaryOperator is prefix operator with precedence 1
    "+" <Operand: Expression>
begin
    MCArithmeticEvalPlusInteger(Operand, output)
    MCArithmeticEvalPlusReal(Operand, output)
    MCArithmeticEvalPlusNumber(Operand, output)
end syntax

/*
Summary:    Unary minus operator.
Operand:    An expression that evaluates to a number.
output:     The negated result of evaluating <Operand>.

*/

syntax MinusUnaryOperator is prefix operator with precedence 1
    "-" <Operand: Expression>
begin
    MCArithmeticEvalMinusInteger(Operand, output)
    MCArithmeticEvalMinusReal(Operand, output)
    MCArithmeticEvalMinusNumber(Operand, output)
end syntax

--

/*
Summary:    Binary plus operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The result of adding the numbers <Left> and <Right>.
*/

syntax PlusOperator is left binary operator with precedence 2
    <Left: Expression> "+" <Right: Expression>
begin
    MCArithmeticEvalIntegerPlusInteger(Left, Right, output)
    MCArithmeticEvalRealPlusReal(Left, Right, output)
    MCArithmeticEvalNumberPlusNumber(Left, Right, output)
end syntax

/*
Summary:    Binary minus operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The result of subtracting the number <Right> from <Left>.
*/

syntax MinusOperator is left binary operator with precedence 2
    <Left: Expression> "-" <Right: Expression>
begin
    MCArithmeticEvalIntegerMinusInteger(Left, Right, output)
    MCArithmeticEvalRealMinusReal(Left, Right, output)
    MCArithmeticEvalNumberMinusNumber(Left, Right, output)
end syntax

/*
Summary:    Binary multiplication operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The result of multiplying the numbers <Left> and <Right>.
*/

syntax TimesOperator is left binary operator with precedence 1
    <Left: Expression> "*" <Right: Expression>
begin
    MCArithmeticEvalIntegerTimesInteger(Left, Right, output)
    MCArithmeticEvalRealTimesReal(Left, Right, output)
    MCArithmeticEvalNumberTimesNumber(Left, Right, output)
end syntax

/*
Summary:    Binary division operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The result of dividing the number <Left> by <Right>.
*/

syntax OverOperator is left binary operator with precedence 1
    <Left: Expression> "/" <Right: Expression>
begin
    MCArithmeticEvalIntegerOverInteger(Left, Right, output)
    MCArithmeticEvalRealOverReal(Left, Right, output)
    MCArithmeticEvalNumberOverNumber(Left, Right, output)
end syntax

--

/*
Summary:    Mod operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The remainder on dividing <Left> by <Right>.
*/

syntax ModOperator is neutral binary operator with precedence 1
    <Left: Expression> "mod" <Right: Expression>
begin
    MCArithmeticEvalIntegerModInteger(Left, Right, output)
    MCArithmeticEvalRealModReal(Left, Right, output)
    MCArithmeticEvalNumberModNumber(Left, Right, output)
end syntax

/*
Summary:    Wrap operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
*/

syntax WrapOperator is neutral binary operator with precedence 1
    <Left: Expression> "wrap" <Right: Expression>
begin
    MCArithmeticEvalIntegerWrapInteger(Left, Right, output)
    MCArithmeticEvalRealWrapReal(Left, Right, output)
    MCArithmeticEvalNumberWrapNumber(Left, Right, output)
end syntax

--

/*
Summary:    Greater than relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     True if <Left> is greater than <Right>, and false otherwise.
*/

syntax IsGreaterThan is neutral binary operator with precedence 3
    <Left: Expression> ">" <Right: Expression>
begin
    MCArithmeticEvalIntegerIsGreaterThanInteger(Left, Right, output)
    MCArithmeticEvalRealIsGreaterThanReal(Left, Right, output)
    MCArithmeticEvalNumberIsGreaterThanNumber(Left, Right, output)
end syntax

/*
Summary:    Greater than or equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     True if <Left> is greater than or equal to <Right>, and false otherwise.
*/

syntax IsGreaterThanOrEqualTo is neutral binary operator with precedence 3
    <Left: Expression> ">=" <Right: Expression>
begin
    MCArithmeticEvalIntegerIsGreaterThanOrEqualToInteger(Left, Right, output)
    MCArithmeticEvalRealIsGreaterThanOrEqualToReal(Left, Right, output)
    MCArithmeticEvalNumberIsGreaterThanOrEqualToNumber(Left, Right, output)
end syntax

/*
Summary:    Less than relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     True if <Left> is less than <Right>, and false otherwise.
*/

syntax IsLessThan is neutral binary operator with precedence 3
    <Left: Expression> "<" <Right: Expression>
begin
    MCArithmeticEvalIntegerIsLessThanInteger(Left, Right, output)
    MCArithmeticEvalRealIsLessThanReal(Left, Right, output)
    MCArithmeticEvalNumberIsLessThanNumber(Left, Right, output)
end syntax

/*
Summary:    Less than or equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     True if <Left> is less than or equal to <Right>, and false otherwise.
*/


syntax IsLessThanOrEqualTo is neutral binary operator with precedence 3
    <Left: Expression> "<=" <Right: Expression>
begin
    MCArithmeticEvalIntegerIsLessThanOrEqualToInteger(Left, Right, output)
    MCArithmeticEvalRealIsLessThanOrEqualToReal(Left, Right, output)
    MCArithmeticEvalNumberIsLessThanOrEqualToNumber(Left, Right, output)
end syntax

--

/*
Summary:    Equal to relation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     True if <Left> is equal to <Right>, and false otherwise.
*/


syntax IsEqualTo is neutral binary operator with precedence 4
    <Left: Expression> "=" <Right: Expression>
begin
    MCArithmeticEvalEqualToInteger(Left, Right, output)
    MCArithmeticEvalEqualToReal(Left, Right, output)
    MCArithmeticEvalEqualToNumber(Left, Right, output)
end syntax


syntax IsNumber is neutral binary operator with precedence 5
    <Left: Expression> "is" <Right: Expression>
begin
    --MCArithmeticEvalEqualToInteger(Left, Right, output)
    MCArithmeticEvalEqualToReal(Left, Right, output)
    MCArithmeticEvalEqualToNumber(Left, Right, output)
end syntax

end module