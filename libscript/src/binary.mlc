/*  
This module specifies the syntax definitions and bindings for operations on binary data in modular LiveCode.
*/

module com.livecode.binary

public foreign handler MCBinaryExecPutBytesBefore(in Source as data, inout Target as data) as undefined binds to "<builtin>"
public foreign handler MCBinaryExecPutBytesAfter(in Source as data, inout Target as data) as undefined binds to "<builtin>"

public foreign handler MCBinaryEvalConcatenateBytes(in Left as data, in Right as data, out Result as data) as undefined binds to "<builtin>"

public foreign handler MCBinaryEvalContainsBytes(in Target as data, in Needle as data, out Value as bool) as undefined binds to "<builtin>"

public foreign handler MCBinaryEvalIsEqualTo(in Left as data, in Right as data, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCBinaryEvalIsNotEqualTo(in Left as data, in Right as data, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCBinaryEvalIsLessThan(in Left as data, in Right as data, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCBinaryEvalIsGreaterThan(in Left as data, in Right as data, out Value as bool) as undefined binds to "<builtin>"
--

/*
Summary:            Prepends <Source> bytes to <Target> bytes.

Source: 			An expression which evaluates to binary data.
Target: 			An expression which evaluates to a binary container.

Example: 			put tPrefixData before tData
*/

syntax PutBytesBefore is statement
    "put" <Source: Expression> "before" <Target: Expression>
begin
    MCBinaryExecPutBytesBefore(Source, Target)
end syntax

/*
Summary:            Appends <Source> bytes to <Target> bytes.

Source: 			An expression which evaluates to binary data.
Target: 			An expression which evaluates to a binary container.

Example: 			put tSuffixData after tData

Related: 			PutBytesAfter
*/

syntax PutBytesAfter is statement
    "put" <Source: Expression> "after" <Target: Expression>
begin
    MCBinaryExecPutBytesAfter(Source, Target)
end syntax

--

/*
Summary:            Concatenates <Left> and <Right>.

Left: 				An expression which evaluates to binary data.
Right: 				An expression which evaluates to binary data.
output: 			Binary data consisting of the value of the left hand expression with the value of the right hand expression appended to the end.

Example: 			put tLeft & tRight into tConcatenated
*/

syntax ConcatenateBytes is left binary operator with precedence 2
    <Left: Expression> "&" <Right: Expression>
begin
    MCBinaryEvalConcatenateBytes(Left, Right, output)
end syntax

--

/*
Summary:    Determines whether <Left> and <Right> are equal or not.

Left:       An expression which evaluates to binary data.
Right:      An expression which evaluates to binary data.

output:     Returns true if the result of evaluating <Left> is the same as that of <Right>, and false otherwise.

*/

syntax IsEqualTo is neutral binary operator with precedence 1
    <Left: Expression> "is" <Right: Expression>
begin
    MCBinaryEvalIsEqualTo(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> and <Right> are equal or not.

Left:       An expression which evaluates to binary data.
Right:      An expression which evaluates to binary data.

output:     Returns false if the result of evaluating <Left> is the same as that of <Right>, and true otherwise.

*/

syntax IsNotEqualTo is neutral binary operator with precedence 1
    <Left: Expression> "is" "not" <Right: Expression>
begin
    MCBinaryEvalIsNotEqualTo(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> is less than <Right> under a byte by byte comparison

Left:       An expression which evaluates to binary data.
Right:      An expression which evaluates to binary data.

output:     Returns true if <Left> and <Right> are not equal, and the first byte in <Right> that is not equal to the
            corresponding byte in <Left> is of greater value.
*/

syntax LessThan is neutral binary operator with precedence 1
    <Left: Expression> "<" <Right: Expression>
begin
    MCBinaryEvalIsLessThan(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> is greater than <Right> under a byte by byte comparison

Left:       An expression which evaluates to binary data.
Right:      An expression which evaluates to binary data.

output:     Returns true if <Left> and <Right> are not equal, and the first byte in <Left> that is not equal to the
            corresponding byte in <Right> is of greater value.
*/

syntax GreaterThan is neutral binary operator with precedence 1
    <Left: Expression> ">" <Right: Expression>
begin
    MCBinaryEvalIsGreaterThan(Left, Right, output)
end syntax

--

end module
