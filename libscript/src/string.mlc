/*  
This module specifies the syntax definitions and bindings for operations on binary data in modular LiveCode.
*/

module com.livecode.string

public foreign handler MCStringExecPutStringBefore(in Source as string, inout Target as string) as undefined binds to "<builtin>"
public foreign handler MCStringExecPutStringAfter(in Source as string, inout Target as string) as undefined binds to "<builtin>"

public foreign handler MCStringExecReplace(in Pattern as string, in Replacement as string, inout Target as string) as undefined binds to "<builtin>"

public foreign handler MCStringEvalConcatenate(in Left as string, in Right as string, out Result as string) as undefined binds to "<builtin>"
public foreign handler MCStringEvalConcatenateWithSpace(in Left as string, in Right as string, out Result as string) as undefined binds to "<builtin>"

public foreign handler MCStringEvalLowercaseOf(in Source as string, out Result as string) as undefined binds to "<builtin>"
public foreign handler MCStringEvalUppercaseOf(in Source as string, out Result as string) as undefined binds to "<builtin>"

// The following all need some notion of context 
public foreign handler MCStringEvalBeginsWith(in Source as string, in Prefix as string, out Result as bool) as undefined binds to "<builtin>"
public foreign handler MCStringEvalEndsWith(in Source as string, in Suffix as string, out Result as bool) as undefined binds to "<builtin>"

public foreign handler MCStringEvalOffset(in Needle as string, in Source as string, out Result as index) as undefined binds to "<builtin>"
public foreign handler MCStringEvalOffsetAfter(in Needle as string, in After as index, in Source as string, out Result as index) as undefined binds to "<builtin>"

public foreign handler MCStringEvalLastOffset(in Needle as string, in Source as string, out Result as index) as undefined binds to "<builtin>"
public foreign handler MCStringEvalLastOffsetBefore(in Needle as string, in Before as index, in Source as string, out Result as index) as undefined binds to "<builtin>"

public foreign handler MCStringEvalContainsChars(in Source as string, in Needle as string, out Result as bool) as undefined binds to "<builtin>"

public foreign handler MCStringEvalIsEqualTo(in Left as string, in Right as string, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCStringEvalIsNotEqualTo(in Left as string, in Right as string, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCStringEvalIsLessThan(in Left as string, in Right as string, out Value as bool) as undefined binds to "<builtin>"
public foreign handler MCStringEvalIsGreaterThan(in Left as string, in Right as string, out Value as bool) as undefined binds to "<builtin>"

public foreign handler MCStringEvalEmpty(out Value as string) as undefined binds to "<builtin>"

--

/*
Summary:            Prepends <Source> to <Target>.

Source: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string container.

Example: 			put tPrefix before tString
*/

syntax PutStringBefore is statement
    "put" <Source: Expression> "before" <Target: Expression>
begin
    MCStringExecPutStringBefore(Source, Target)
end syntax

/*
Summary:            Appends <Source> to <Target>.

Source: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string container.

Example: 			put tSuffix after tString
*/

syntax PutStringAfter is statement
    "put" <Source: Expression> "after" <Target: Expression>
begin
    MCStringExecPutStringAfter(Source, Target)
end syntax

--

/*
Summary:            Replaces occurrences of <Pattern> within <Target> in <Replacement>

Source: 			An expression which evaluates to a string.
Target: 			An expression which evaluates to a string container.
Replacement: 		An expression which evaluates to a string.

Example: 			replace " " with "_" in tString
*/

syntax ReplaceString is statement
    "replace" <Pattern: Expression> "with" <Replacement: Expression> "in" <Target: Expression>
begin
    MCStringExecReplace(Pattern, Replacement, Target)
end syntax

--

/*
Summary:            Concatenates <Left> and <Right>.

Left: 				An expression which evaluates to a string.
Right: 				An expression which evaluates to a string.
output: 			String consisting of the value of the left hand expression with the value of the right hand expression appended to the end.

Example: 			put tLeft & tRight into tConcatenated
*/

syntax ConcatenateStrings is left binary operator with precedence 2
    <Left: Expression> "&" <Right: Expression>
begin
    MCStringEvalConcatenate(Left, Right, output)
end syntax

/*
Summary:            Concatenates <Left> and <Right> with a space between.

Left: 				An expression which evaluates to a string.
Right: 				An expression which evaluates to a string.
output: 			String consisting of the value of the left hand expression with the value of the right hand expression appended to the end, and a space character inserted between them

Example: 			put tLeft && tRight into tConcatSpace
*/

syntax ConcatenateStringsWithSpace is left binary operator with precedence 2
    <Left: Expression> "&&" <Right: Expression>
begin
    MCStringEvalConcatenateWithSpace(Left, Right, output)
end syntax

--

/*
Summary:            Uppercases <Source>.
Source: 			An expression which evaluates to a string.
output:             
*/


syntax UppercaseString is prefix operator with precedence 1
    "the" "upper" "of" <Source: Expression>
begin
    MCStringEvalUppercaseOf(Source, output)
end syntax

/*
Summary:            Lowercases <Source>.
Source: 			An expression which evaluates to a string.
output:             
*/


syntax LowercaseString is prefix operator with precedence 1
    "the" "lower" "of" <Source: Expression>
begin
    MCStringEvalLowercaseOf(Source, output)
end syntax

--

/*
Summary:    Determines whether <Left> and <Right> are equal or not.

Left:       An expression which evaluates to a string.
Right:      An expression which evaluates to a string.

output:     Returns true if the result of evaluating <Left> is the same as that of <Right>, and false otherwise.

*/

syntax IsEqualTo is neutral binary operator with precedence 5
    <Left: Expression> "is" <Right: Expression>
begin
    MCStringEvalIsEqualTo(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> and <Right> are equal or not.

Left:       An expression which evaluates to a string.
Right:      An expression which evaluates to a string.

output:     Returns false if the result of evaluating <Left> is the same as that of <Right>, and true otherwise.

*/

syntax IsNotEqualTo is neutral binary operator with precedence 1
    <Left: Expression> "is" "not" <Right: Expression>
begin
    MCStringEvalIsNotEqualTo(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> is less than <Right> under a char by char comparison

Left:       An expression which evaluates to a string.
Right:      An expression which evaluates to a string.

output:     Returns true if <Left> and <Right> are not equal, and the first char in <Right> that is not equal to the
            corresponding char in <Left> is of greater value.
*/

syntax LessThan is neutral binary operator with precedence 1
    <Left: Expression> "<" <Right: Expression>
begin
    MCStringEvalIsLessThan(Left, Right, output)
end syntax

/*
Summary:    Determines whether <Left> is greater than <Right> under a char by char comparison

Left:       An expression which evaluates to a string.
Right:      An expression which evaluates to a string.

output:     Returns true if <Left> and <Right> are not equal, and the first char in <Left> that is not equal to the
            corresponding char in <Right> is of greater value.
*/

syntax GreaterThan is neutral binary operator with precedence 1
    <Left: Expression> ">" <Right: Expression>
begin
    MCStringEvalIsGreaterThan(Left, Right, output)
end syntax

--

syntax EmptyString is expression
	"the" "empty" "string"
begin
	MCStringEvalEmpty(output)
end syntax

end module