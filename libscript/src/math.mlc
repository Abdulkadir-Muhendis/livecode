
module com.livecode.math

public foreign handler MCMathEvalRealToPowerOfReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalNumberToPowerOfNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalBase10LogReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalBase10LogNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalNaturalLogReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalNaturalLogNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalExpReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalExpNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalSinReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalSinNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalCosReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalCosNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalTanReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalTanNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalAbsInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCMathEvalAbsReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalAbsNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalTruncInteger(in Operand as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCMathEvalTruncReal(in Operand as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalTruncNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalMinInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCMathEvalMinReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalMinNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
public foreign handler MCMathEvalMaxInteger(in Left as int, in Right as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCMathEvalMaxReal(in Left as double, in Right as double, out Value as double) as undefined binds to "<builtin>"
public foreign handler MCMathEvalMaxNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

public foreign handler MCMathEvalRandomReal(out Value as double) as undefined binds to "<builtin>"

public foreign handler MCMathEvalConvertBase(in Operand as string, in Source as int, in Target as int, out Value as string) as undefined binds to "<builtin>"
public foreign handler MCMathEvalConvertFromBase(in Operand as string, in Source as int, out Value as int) as undefined binds to "<builtin>"
public foreign handler MCMathEvalConvertToBase(in Operand as int, in Target as int, out Value as string) as undefined binds to "<builtin>"

--

/*
Summary:    Binary exponentiation operation.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The result of raising <Left> to the power <Right>.
*/

syntax PowOperator is left binary operator with precedence 2
    <Left: Expression> "^" <Right: Expression>
begin
    MCMathEvalRealToPowerOfReal(Left, Right, output)
    MCMathEvalNumberToPowerOfNumber(Left, Right, output)
end syntax

--

/*
Summary:    Sin operator.
Operand:    An expression that evaluates to a number.

*/

syntax SinOperator is prefix operator with precedence 1
    "the" "sin" "of" <Operand: Expression>
begin
    MCMathEvalSinReal(Operand, output)
    MCMathEvalSinNumber(Operand, output)
end syntax

/*
Summary:    Sin operator.
Operand:    An expression that evaluates to a number.

*/

syntax CosOperator is prefix operator with precedence 1
    "the" "cos" "of" <Operand: Expression>
begin
    MCMathEvalCosReal(Operand, output)
    MCMathEvalCosNumber(Operand, output)
end syntax

/*
Summary:    Tan operator.
Operand:    An expression that evaluates to a number.

*/

syntax TanOperator is prefix operator with precedence 1
    "the" "tan" "of" <Operand: Expression>
begin
    MCMathEvalTanReal(Operand, output)
    MCMathEvalTanNumber(Operand, output)
end syntax

--

/*
Summary:    Base 10 log operator.
Operand:    An expression that evaluates to a number.

*/

syntax Base10LogOperator is prefix operator with precedence 1
    "the" "log" "of" <Operand: Expression>
begin
    MCMathEvalBase10LogReal(Operand, output)
    MCMathEvalBase10LogNumber(Operand, output)
end syntax

--

/*
Summary:    Natural log operator.
Operand:    An expression that evaluates to a number.

*/

syntax BaseELogOperator is prefix operator with precedence 1
    "the" "natural" "log" "of" <Operand: Expression>
begin
    MCMathEvalNaturalLogReal(Operand, output)
    MCMathEvalNaturalLogNumber(Operand, output)
end syntax


/*
Summary:    Exponentiation operator.
Operand:    An expression that evaluates to a number.
output:     e to the power of <Operand>
*/

syntax ExpOperator is prefix operator with precedence 1
    "the" "exp" "of" <Operand: Expression>
begin
    MCMathEvalExpReal(Operand, output)
    MCMathEvalExpNumber(Operand, output)
end syntax

--

/*
Summary:    Truncation operator.
Operand:    An expression that evaluates to a number.
output:     The integer part of the decimal representation of <Operand>
*/

syntax TruncOperator is prefix operator with precedence 1
    "the" "trunc" "of" <Operand: Expression>
begin
    MCMathEvalTruncInteger(Operand, output)
    MCMathEvalTruncReal(Operand, output)
    MCMathEvalTruncNumber(Operand, output)
end syntax

/*
Summary:    Absolute value operator.
Operand:    An expression that evaluates to a number.
output:     The absolute value of <Operand>, i.e. the value of <Operand> if it is greater than or equal to 0,
            or the negation of the value of <Operand> if it is less than zero.
*/

syntax AbsOperator is prefix operator with precedence 1
    "the" "abs" "of" <Operand: Expression>
begin
    MCMathEvalAbsInteger(Operand, output)
    MCMathEvalAbsReal(Operand, output)
    MCMathEvalAbsNumber(Operand, output)
end syntax

--

/*
Summary:    Generates a pseudo-random number.
output:     A real between 0.0 and 1.0.
*/

syntax RandomNumber is expression
    "any" "number"
begin
    MCMathEvalRandomReal(output)
end syntax

--

/*
Summary:    Min operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The value of <Left>, if it is less than the value of <Right>, and the value of <Right> otherwise.
*/

syntax MinOperator is prefix operator with precedence 1
    "the" "min" "of" <Left: Expression> "and" <Right: Expression>
begin
    MCMathEvalMinInteger(Left, Right, output)
    MCMathEvalMinReal(Left, Right, output)
    MCMathEvalMinNumber(Left, Right, output)
end syntax

/*
Summary:    Max operator.
Left:       An expression that evaluates to a number.
Right:      An expression that evaluates to a number.
output:     The value of <Left>, if it is greater than the value of <Right>, and the value of <Right> otherwise.
*/

syntax MaxOperator is prefix operator with precedence 1
    "the" "max" "of" <Left: Expression> "and" <Right: Expression>
begin
    MCMathEvalMaxInteger(Left, Right, output)
    MCMathEvalMaxReal(Left, Right, output)
    MCMathEvalMaxNumber(Left, Right, output)
end syntax

--

/*
Summary:    Converts the base of <Operand>
Operand:    An expression that evaluates to an integer.
From:       An expression that evaluates to an integer.
To:         An expression that evaluates to an integer.
output:     A string representation of the value of <Operand> when interpreted as a number in base <From>, converted to base <To>.
*/

syntax BaseConvert is postfix operator with precedence 1
    <Operand: Expression> "converted" ["from" "base" <Source: Expression> ] ["to" "base" <Target: Expression> ]
begin
    MCMathEvalConvertBase(Operand, Source, Target, output)
    MCMathEvalConvertFromBase(Operand, Target, output)
    MCMathEvalConvertToBase(Operand, Source, output)
end syntax

--

end module