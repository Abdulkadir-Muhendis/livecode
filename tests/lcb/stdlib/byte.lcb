/*
Copyright (C) 2015 Runtime Revolution Ltd.

This file is part of LiveCode.

LiveCode is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License v3 as published by the Free
Software Foundation.

LiveCode is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with LiveCode.  If not see <http://www.gnu.org/licenses/>.  */

module com.livecode.byte.tests

use com.livecode.foreign
use com.livecode.__INTERNAL._testlib

public handler TestEmpty()
	test "empty" when the number of bytes in the empty data is 0
end handler

----------------------------------------------------------------
-- Integer conversion
----------------------------------------------------------------

handler TestByteWithCode_Negative()
	return the byte with code -1
end handler
handler TestByteWithCode_Overflow()
	return the byte with code 256
end handler
public handler TestByteWithCode()
	variable t
	put the byte with code 0 into t

	test "code->byte" when the number of bytes in t is 1

	MCUnitTestHandlerThrows(TestByteWithCode_Negative, "code->byte (negative)")
	MCUnitTestHandlerThrows(TestByteWithCode_Overflow, "code->byte (overflow)")
end handler

handler TestCodeOfByte_Long()
	variable t
	put the byte with code 0 into t
	put t after t
	return the code of t
end handler
handler TestCodeOfByte_Empty()
	variable t
	put the empty data into t
	return the code of t
end handler
public handler TestCodeOfByte()
	test "byte->code" when the code of (the byte with code 1) is 1

	MCUnitTestHandlerThrows(TestCodeOfByte_Long, "byte->code (multibyte)")
	MCUnitTestHandlerThrows(TestCodeOfByte_Empty, "byte->code (empty)")
end handler

----------------------------------------------------------------
-- Finding subsequence offsets
----------------------------------------------------------------

public handler TestOffset()
	variable N as Data
	variable H as Data

	-- Only test single-byte needles for now
	put EncodeUTF8("x") into N
	put EncodeUTF8(".xx.") into H

	test "offset (single)" when the offset of N in H is 2
	test "first offset (single)" when the first offset of N in H is 2
	test "last offset (single)" when the last offset of N in H is 3

	put EncodeUTF8("xx") into N
	put EncodeUTF8(".x.x.") into H

	test "offset (missing)" when the offset of N in H is 0

	put EncodeUTF8("x") into N
	put EncodeUTF8("x") into H
	test "offset (single, same)" when the offset of N in H is 1
	test "first offset (single, same)" when the first offset of N in H is 1
	test "last offset (single, same)" when the last offset of N in H is 1

	put the empty data into N
	put EncodeUTF8("x") into H
	test "offset (empty)" when the offset of N in H is 0
	test "first offset (empty)" when the first offset of N in H is 0
	test "last offset (empty)" when the last offset of N in H is 0
	test "offset (empty, empty)" when the offset of N in the empty data is 0

	-- For bytes, "index" is synonymous with "offset"
	put EncodeUTF8("x") into N
	put EncodeUTF8(".xx.") into H
	test "index" when the index of N in H is 2
end handler

----------------------------------------------------------------
-- Helper functions
----------------------------------------------------------------

constant kEncodingIndexUTF8 is 4

foreign handler MCStringEncode(in Unencoded as String, in Encoding as CInt, in IsExternalRep as CBool, out Encoded as Data) as CBool binds to "<builtin>"

handler EncodeUTF8(in pString as String) as Data
	variable tEncoded as Data
	variable tStatus as Boolean
	MCStringEncode(pString, kEncodingIndexUTF8, false, tEncoded)
	if tEncoded is empty then
		return the empty data
	end if
	return tEncoded
end handler

end module
