module com.livecode.stringchunks

foreign handler FetchCharOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreCharOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchCharRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreCharRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler FetchItemOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreItemOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchItemRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreItemRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfItemsIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheItemsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalIsNotAmongTheItemsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"

foreign handler EvalOffsetOfItemIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

foreign handler FetchSegmentOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreSegmentOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchSegmentRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreSegmentRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfSegmentsIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheSegmentsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalIsNotAmongTheSegmentsOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"

foreign handler EvalOffsetOfSegmentIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

foreign handler FetchLineOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreLineOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchLineRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreLineRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfLinesIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheLinesOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalIsNotAmongTheLinesOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"

foreign handler EvalOffsetOfLineIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

--

syntax SingletonCharOf is left unary operator with precedence 1
	"char" <Index: Expression> "of" <Target: Expression>
begin
	FetchCharOf(Index, Target, output)
	StoreCharOf(input, Index, Target)
end syntax

syntax RangeCharOf is left unary operator with precedence 1
	"char" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchCharRangeOf(Start, Finish, Target, output)
	StoreCharRangeOf(input, Start, Finish, Target)
end syntax

--

syntax SingletonItemOf is left unary operator with precedence 1
	"item" <Index: Expression> "of" <Target: Expression>
begin
	FetchItemOf(Index, Target, output)
	StoreItemOf(input, Index, Target)
end syntax

syntax RangeItemOf is left unary operator with precedence 1
	"item" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchItemRangeOf(Start, Finish, Target, output)
	StoreItemRangeOf(input, Start, Finish, Target)
end syntax

syntax CountItemsOf is left unary operator with precedence 1
	"the" "number" "of" "items" "in" <Target: Expression>
begin
	EvalNumberOfItemsIn(Target, output)
end syntax

syntax AmongItemsOf is left unary operator with precedence 1
	<Needle: Expression> "is" "among" "the" "items" "of" <Target: Expression>
begin
	EvalIsAmongTheItemsOf(Needle, Target, output)
end syntax

syntax NotAmongItemsOf is left unary operator with precedence 1
	<Needle: Expression> "is" "not" "among" "the" "items" "of" <Target: Expression>
begin
	EvalIsNotAmongTheItemsOf(Needle, Target, output)
end syntax

syntax ItemOffset is left unary operator with precedence 1
	"the" "itemOffset" "of" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfItemIn(Needle, Target, output)
end syntax

--

syntax SingletonSegmentOf is left unary operator with precedence 1
	"segment" <Index: Expression> "of" <Target: Expression>
begin
	FetchSegmentOf(Index, Target, output)
	StoreSegmentOf(input, Index, Target)
end syntax

syntax RangeSegmentOf is left unary operator with precedence 1
	"segment" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchSegmentRangeOf(Start, Finish, Target, output)
	StoreSegmentRangeOf(input, Start, Finish, Target)
end syntax

syntax CountSegmentsOf is left unary operator with precedence 1
	"the" "number" "of" "segments" "in" <Target: Expression>
begin
	EvalNumberOfSegmentsIn(Target, output)
end syntax

syntax AmongSegmentsOf is left unary operator with precedence 1
	<Needle: Expression> "is" "among" "the" "segments" "of" <Target: Expression>
begin
	EvalIsAmongTheSegmentsOf(Needle, Target, output)
end syntax

syntax NotAmongSegmentsOf is left unary operator with precedence 1
	<Needle: Expression> "is" "not" "among" "the" "segments" "of" <Target: Expression>
begin
	EvalIsNotAmongTheSegmentsOf(Needle, Target, output)
end syntax

syntax SegmentOffset is left unary operator with precedence 1
	"the" "segmentOffset" "of" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfSegmentIn(Needle, Target, output)
end syntax

--

syntax SingletonLineOf is left unary operator with precedence 1
	"line" <Index: Expression> "of" <Target: Expression>
begin
	FetchLineOf(Index, Target, output)
	StoreLineOf(input, Index, Target)
end syntax

syntax RangeLineOf is left unary operator with precedence 1
	"line" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchLineRangeOf(Start, Finish, Target, output)
	StoreLineRangeOf(input, Start, Finish, Target)
end syntax

syntax CountLinesOf is left unary operator with precedence 1
	"the" "number" "of" "lines" "in" <Target: Expression>
begin
	EvalNumberOfLinesIn(Target, output)
end syntax

syntax AmongLinesOf is left unary operator with precedence 1
	<Needle: Expression> "is" "among" "the" "lines" "of" <Target: Expression>
begin
	EvalIsAmongTheLinesOf(Needle, Target, output)
end syntax

syntax NotAmongLinesOf is left unary operator with precedence 1
	<Needle: Expression> "is" "not" "among" "the" "lines" "of" <Target: Expression>
begin
	EvalIsNotAmongTheLinesOf(Needle, Target, output)
end syntax

syntax LineOffset is left unary operator with precedence 1
	"the" "lineOffset" "of" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfLineIn(Needle, Target, output)
end syntax

--

end module