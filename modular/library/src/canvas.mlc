/*  
This module specifies the syntax definitions and bindings for canvas drawing operations in modular LiveCode.
*/

module com.livecode.canvas

// TODO - type declarations
// Transform
record type Transform
	a as real
	b as real
	c as real
	d as real
	tx as real
	ty as real
end type

// Paint (supertype of pattern, gradient, color?)
foreign handler MCCanvasPaintType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Paint
end type

// Color
foreign handler MCCanvasColorType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Color based on Paint
	measure is MCCanvasColorType_Measure
end type

//record type Color
//	Red as real
//	Green as real
//	Blue as real
//	Alpha as real
//end type

// Pattern
foreign handler MCCanvasPatternType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Pattern based on Paint
	measure is MCCanvasPatternType_Measure
end type

// Gradient
foreign handler MCCanvasGradientType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Gradient based on Paint
	measure is MCCanvasGradientType_Measure
end type

// Image
foreign handler MCCanvasImageType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Image
	measure is MCCanvasImageType_Measure
end type

// Path
foreign handler MCCanvasPathType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Path
	measure is MCCanvasPathType_Measure
end type

// Effect
foreign handler MCCanvasGraphicEffectType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type GraphicEffect
	measure is MCCanvasGraphicEffectType_Measure
end type

// Canvas
foreign handler MCCanvasCanvasType_Measure(out r_size as integer) as undefined binds to "<builtin>"
opaque type Canvas
	measure is MCCanvasCanvasType_Measure
end type

////////////////////////////////////////////////////////////////////////////////

//foreign handler MCCanvasConvertDegreesToRadians(in pDegrees as real, out rRadians as real) as undefined binds to "<builtin>"

//syntax ValueInDegrees is phrase
//	<mDegrees: Expression> "degrees"
//begin
//	MCCanvasConvertDegreesToRadians(mDegrees, output)
//end syntax

////////////////////////////////////////////////////////////////////////////////
// Color

// Constructors

foreign handler MCCanvasColorMakeRGB(in pRed as real, in pGreen as real, in pBlue as real, out rColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasColorMakeRGBA(in pRed as real, in pGreen as real, in pBlue as real, in pAlpha as real, out rColor as Color) as undefined binds to "<builtin>"
//foreign handler MCCanvasColorMakeWithString(in pList as string, out rColor as Color)

syntax MakeColor is prefix operator with precedence 4
	"color" <mVal: ExpressionList>
begin
//	MCCanvasColorMakeWithString(mVal[0], output)
//	MCCanvasColorMakeWithList(mVal[0], output)
	MCCanvasColorMakeRGB(mVal[0], mVal[1], mVal[2], output)
	MCCanvasColorMakeRGBA(mVal[0], mVal[1], mVal[2], mVal[3], output)
end syntax

//////////

// Properties

foreign handler MCCanvasColorGetRed(in pColor as Color, out rRed as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetRed(inout xColor as Color, in pRed as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetGreen(in pColor as Color, out rGreen as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetGreen(inout xColor as Color, in pGreen as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetBlue(in pColor as Color, out rBlue as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetBlue(inout xColor as Color, in pBlue as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorGetAlpha(in pColor as Color, out rAlpha as real) as undefined binds to "<builtin>"
foreign handler MCCanvasColorSetAlpha(inout xColor as Color, in pAlpha as real) as undefined binds to "<builtin>"

syntax RedColorProperty is prefix operator with precedence 4
	"the" "red" "of" <mColor: Expression>
begin
	MCCanvasColorGetRed(mColor, output)
	MCCanvasColorSetRed(mColor, input)
end syntax

syntax GreenColorProperty is prefix operator with precedence 4
	"the" "green" "of" <mColor: Expression>
begin
	MCCanvasColorGetGreen(mColor, output)
	MCCanvasColorSetGreen(mColor, input)
end syntax

syntax BlueColorProperty is prefix operator with precedence 4
	"the" "blue" "of" <mColor: Expression>
begin
	MCCanvasColorGetBlue(mColor, output)
	MCCanvasColorSetBlue(mColor, input)
end syntax

syntax AlphaColorProperty is prefix operator with precedence 4
	"the" "alpha" "of" <mColor: Expression>
begin
	MCCanvasColorGetAlpha(mColor, output)
	MCCanvasColorSetAlpha(mColor, input)
end syntax

////////////////////////////////////////////////////////////////////////////////
// Transform

// Constructors

foreign handler MCCanvasTransformMakeIdentity(out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeScale(in pScaleX as real, in pScaleY as real, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeRotation(in pRadians as real, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeTranslation(in pX as real, in pY as real, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformMakeWithMatrix(in pA as real, in pB as real, in pC as real, in pD as real, in pTX as real, in pTY as real, out rTransform as Transform) as undefined binds to "<builtin>"

syntax MakeIdentityTransform is expression
	"the" "identity" "transform"
begin
	MCCanvasTransformMakeIdentity(output)
end syntax

syntax MakeScaleTransform is prefix operator with precedence 4
	"transform" "with" "scale" <mScale: ExpressionList>
begin
	MCCanvasTransformMakeScale(mScale[0], mScale[0], output)
	MCCanvasTransformMakeScale(mScale[0], mScale[1], output)
end syntax

//syntax MakeRotationTranform is expression
//	"transform" "with" "rotation" "by" (<mRadians: ValueInDegrees> | <mRadians: Expression> "radians")
syntax MakeRotationTranform is prefix operator with precedence 4
	"transform" "with" "rotation" "by" <mRadians: Expression>
begin
	MCCanvasTransformMakeRotation(mRadians, output)
end syntax

syntax MakeTranslationTransform is prefix operator with precedence 4
	"transform" "with" "translation" <mTranslation: ExpressionList>
begin
	MCCanvasTransformMakeTranslation(mTranslation[0], mTranslation[1], output)
end syntax

//////////

// Properties

foreign handler MCCanvasTransformGetScale(in pTransform as Transform, out rScaleXY as list) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetRotation(in pTransform as Transform, out rRotation as real) as undefined binds to "<builtin>"
//foreign handler MCCanvasTransformGetRotationInRadians(in pTransform as Transform, out rRotation as real) as undefined binds to "<builtin>"
//foreign handler MCCanvasTransformGetRotationInDegrees(in pTransform as Transform, out rRotation as real) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetSkew(in pTransform as Transform, out rSkewXY as list) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformGetTranslation(in pTransform as Transform, out rTransXY as list) as undefined binds to "<builtin>"

foreign handler MCCanvasTransformGetMatrix(in pTransform as Transform, out rMatrix as list) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformSetMatrix(inout xTransform as Transform, in pMatrix as list) as undefined binds to "<builtin>"

syntax ScaleTransformProperty is prefix operator with precedence 4
	"the" "scale" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetScale(mTransform, output)
end syntax

syntax RotationTransformProperty is prefix operator with precedence 4
	"the" "rotation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetRotation(mTransform, output)
end syntax

//syntax RadiansRotationTransformProperty is expression
//	"the" "rotation" "of" <mTransform: Expression> "in" "radians"
//begin
//	MCCanvasTransformGetRotationInRadians(mTransform, output)
//end syntax
//
//syntax DegreeRotationTransformProperty is expression
//	"the" "rotation" "of" <mTransform: Expression> "in" "degrees"
//begin
//	MCCanvasTransformGetRotationInDegrees(mTransform, output)
//end syntax

syntax SkewTransformProperty is prefix operator with precedence 4
	"the" "skew" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetSkew(mTransform, output)
end syntax

syntax TranslationTransformProperty is prefix operator with precedence 4
	"the" "translation" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetTranslation(mTransform, output)
end syntax


syntax MatrixTransformProperty is prefix operator with precedence 4
	"the" "matrix" "of" <mTransform: Expression>
begin
	MCCanvasTransformGetMatrix(mTransform, output)
	MCCanvasTransformSetMatrix(mTransform, input)
end syntax

//////////

// Operations

foreign handler MCCanvasTransformConcat(inout xTransformA as Transform, in pTransformB as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformScale(inout xTransform as Transform, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformRotate(inout xTransform as Transform, in pRadians as real) as undefined binds to "<builtin>"
foreign handler MCCanvasTransformTranslate(inout xTransform as Transform, in pX as real, in pY as real) as undefined binds to "<builtin>"

syntax ConcatTransform is statement
	"concat" <mTransformA: Expression> "with" <mTransformB: Expression>
begin
	MCCanvasTransformConcat(mTransformA, mTransformB)
end syntax

syntax ScaleTransform is statement
	"scale" <mTransform: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasTransformScale(mTransform, mScale[0], mScale[1])
	MCCanvasTransformScale(mTransform, mScale[0], mScale[0])
end syntax

syntax RotateTransform is statement
//	"rotate" <mTransform: Expression> "by" ( <mRadians: ValueInDegrees> | <mRadians: Expression> "radians" )
	"rotate" <mTransform: Expression> "by" <mRadians: Expression>
begin
	MCCanvasTransformRotate(mTransform, mRadians)
end syntax

syntax TranslateTransform is statement
	"translate" <mTransform: Expression> "by" <mTranslate: ExpressionList>
begin
	MCCanvasTransformTranslate(mTransform, mTranslate[0], mTranslate[1])
end syntax

////////////////////////////////////////////////////////////////////////////////
// Pattern

// Constructors

foreign handler MCCanvasPatternMakeWithImage(in pImage as Image, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithTransformedImage(in pImage as Image, in pTransform as Transform, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithScaledImage(in pImage as Image, in pScaleX as real, in pScaleY as real, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithRotatedImage(in pImage as Image, in pRadians as real, out rPattern as Pattern) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternMakeWithTranslatedImage(in pImage as Image, in pX as real, in pY as real, out rPattern as Pattern) as undefined binds to "<builtin>"

syntax MakePattern is prefix operator with precedence 4
	"pattern" "with" <mImage: Expression>
begin
	MCCanvasPatternMakeWithImage(mImage, output)
end syntax

syntax MakeTransformedPattern is prefix operator with precedence 4
//	"pattern" "with" <mImage: Expression> ( "transformed" "by" <mTransform: Expression> | "scaled" "by" <mScale: ExpressionList> | "translated" "by" <mTranslation: Expression> )
	"pattern" "with" <mImage: Expression> ( "transformed" "by" <mTransform: Expression> | "scaled" "by" <mScale: ExpressionList> | "translated" "by" <mTranslation: Expression> | "rotated" "by" <mRadians: Expression> )
begin
	MCCanvasPatternMakeWithTransformedImage(mImage, mTransform, output)
	MCCanvasPatternMakeWithScaledImage(mImage, mScale[0], mScale[0], output)
	MCCanvasPatternMakeWithScaledImage(mImage, mScale[0], mScale[1], output)
	MCCanvasPatternMakeWithTranslatedImage(mImage, mTranslation[0], mTranslation[1], output)
	MCCanvasPatternMakeWithRotatedImage(mImage, mRadians, output)
end syntax

//syntax MakeRotatedPattern is expression
//	"pattern" "with" <mImage: Expression> "rotated" "by" ( <mRadians: ValueInDegrees> | <mRadians: Expression> "radians" )
//begin
//	MCCanvasPatternMakeWithRotatedImage(mImage, mRadians, output)
//end syntax

//////////

// Properties

foreign handler MCCanvasPatternGetImage(in pPattern as Pattern, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternSetImage(inout xPattern as Pattern, in pImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternGetTransform(in pPattern as Pattern, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternSetTransform(inout xPattern as Pattern, in pTransform as Transform) as undefined binds to "<builtin>"

syntax PatternImageProperty is prefix operator with precedence 4
	"the" "image" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetImage(mPattern, output)
	MCCanvasPatternSetImage(mPattern, input)
end syntax

syntax PatternTransformProperty is prefix operator with precedence 4
	"the" "transform" "of" <mPattern: Expression>
begin
	MCCanvasPatternGetTransform(mPattern, output)
	MCCanvasPatternSetTransform(mPattern, input)
end syntax

//////////

// Operations

foreign handler MCCanvasPatternTransform(inout xPattern as Pattern, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternScale(inout xPattern as Pattern, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternRotate(inout xPattern as Pattern, in pRadians as real) as undefined binds to "<builtin>"
foreign handler MCCanvasPatternTranslate(inout xPattern as Pattern, in pX as real, in pY as real) as undefined binds to "<builtin>"

syntax TransformPattern is statement
	"transform" <mPattern: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPatternTransform(mPattern, mTransform)
end syntax

syntax ScalePattern is statement
	"scale" <mPattern: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasPatternScale(mPattern, mScale[0], mScale[0])
	MCCanvasPatternScale(mPattern, mScale[0], mScale[1])
end syntax

syntax RotatePattern is statement
//	"rotate" <mPattern: Expression> "by" ( <mRadians: ValueInDegrees> | <mRadians: Expression> "radians" )
	"rotate" <mPattern: Expression> "by" <mRadians: Expression>
begin
	MCCanvasPatternRotate(mPattern, mRadians)
end syntax

syntax TranslatePattern is statement
	"translate" <mPattern: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasPatternTranslate(mPattern, mTranslation[0], mTranslation[1])
end syntax

////////////////////////////////////////////////////////////////////////////////

// Gradient

// Constructors

foreign handler MCCanvasGradientMakeWithRamp(in pType as integer, in pRamp as list, out rGradient as Gradient) as undefined binds to "<builtin>"

constant kGradientTypeLinear is 1
constant kGradientTypeRadial is 2
constant kGradientTypeConical is 3
constant kGradientTypeDiamond is 4
constant kGradientTypeSpiral is 5
constant kGradientTypeXY is 6
constant kGradientTypeSqrtXY is 7

syntax GradientType is phrase
	( "linear" <mType=1> | "radial" <mType=2> | "conical" <mType=3> | "diamond" <mType=4> | "spiral" <mType=5> | "xy" <mType=6> | "sqrtxy" <mType=7> )
begin
end syntax

syntax MakeGradientWithRamp is prefix operator with precedence 4
	<mType: GradientType> "gradient" "with" "ramp" <mRamp: Expression>
begin
	MCCanvasGradientMakeWithRamp(mType, mRamp, output)
end syntax

//////////

// Properties

foreign handler MCCanvasGradientGetStops(in pGradient as Gradient, in pStart as integer, in pEnd as integer, out rStops as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetStops(inout xGradient as Gradient, in pStart as integer, in pEnd as integer, in rStops as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTypeAsString(in pGradient as Gradient, out rType as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTypeAsString(inout xGradient as Gradient, in pType as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetRepeat(in pGradient as Gradient, out rRepeat as integer) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetRepeat(inout xGradient as Gradient, in pRepeat as integer) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetWrap(in pGradient as Gradient, out rWrap as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetWrap(inout xGradient as Gradient, in pWrap as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetMirror(in pGradient as Gradient, out rMirror as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetMirror(inout xGradient as Gradient, in pMirror as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetFrom(in pGradient as Gradient, out rFrom as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetFrom(inout xGradient as Gradient, in pFrom as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTo(in pGradient as Gradient, out rTo as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTo(inout xGradient as Gradient, in pTo as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetVia(in pGradient as Gradient, out rVia as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetVia(inout xGradient as Gradient, in pVia as list) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientGetTransform(in pGradient as Gradient, out rTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientSetTransform(inout xGradient as Gradient, in pTransform as Transform) as undefined binds to "<builtin>"

syntax GradientRampProperty is prefix operator with precedence 4
	"the" "ramp" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetStops(mGradient, 1, -1, output)
	MCCanvasGradientSetStops(mGradient, 1, -1, input)
end syntax

syntax GradientStopsProperty is prefix operator with precedence 4
	"stop" <mStart: Expression> [ "to" <mEnd: Expression> ] "of" <mGradient: Expression>
begin
	MCCanvasGradientGetStops(mGradient, mStart, mStart, output)
	MCCanvasGradientSetStops(mGradient, mStart, mStart, input)
	MCCanvasGradientGetStops(mGradient, mStart, mEnd, output)
	MCCanvasGradientSetStops(mGradient, mStart, mEnd, input)
end syntax

syntax GradientTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTypeAsString(mGradient, output)
	MCCanvasGradientSetTypeAsString(mGradient, input)
end syntax

syntax GradientRepeatProperty is prefix operator with precedence 4
	"the" "repeat" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetRepeat(mGradient, output)
	MCCanvasGradientSetRepeat(mGradient, input)
end syntax

syntax GradientWrapProperty is prefix operator with precedence 4
	"the" "wrap" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetWrap(mGradient, output)
	MCCanvasGradientSetWrap(mGradient, input)
end syntax

syntax GradientMirrorProperty is prefix operator with precedence 4
	"the" "mirror" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetMirror(mGradient, output)
	MCCanvasGradientSetMirror(mGradient, input)
end syntax

syntax GradientFromProperty is prefix operator with precedence 4
	"the" "from" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetFrom(mGradient, output)
	MCCanvasGradientSetFrom(mGradient, input)
end syntax

syntax GradientToProperty is prefix operator with precedence 4
	"the" "to" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTo(mGradient, output)
	MCCanvasGradientSetTo(mGradient, input)
end syntax

syntax GradientViaProperty is prefix operator with precedence 4
	"the" "via" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetVia(mGradient, output)
	MCCanvasGradientSetVia(mGradient, input)
end syntax

syntax GradientTransformProperty is prefix operator with precedence 4
	"the" "transform" "of" <mGradient: Expression>
begin
	MCCanvasGradientGetTransform(mGradient, output)
	MCCanvasGradientSetTransform(mGradient, input)
end syntax

//////////

// Operations

foreign handler MCCanvasGradientTransform(inout xGradient as Gradient, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientScale(inout xGradient as Gradient, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientRotate(inout xGradient as Gradient, in pRadians as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGradientTranslate(inout xGradient as Gradient, in pX as real, in pY as real) as undefined binds to "<builtin>"

syntax TransformGradient is statement
	"transform" <mGradient: Expression> "by" <mTransform: Expression>
begin
	MCCanvasGradientTransform(mGradient, mTransform)
end syntax

syntax ScaleGradient is statement
	"scale" <mGradient: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasGradientScale(mGradient, mScale[0], mScale[0])
	MCCanvasGradientScale(mGradient, mScale[0], mScale[1])
end syntax

syntax RotateGradient is statement
	"rotate" <mGradient: Expression> "by" <mRadians: Expression>
begin
	MCCanvasGradientRotate(mGradient, mRadians)
end syntax

syntax TranslateGradient is statement
	"translate" <mGradient: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasGradientTranslate(mGradient, mTranslation[0], mTranslation[1])
end syntax

////////////////////////////////////////////////////////////////////////////////

// Image

// Constructors

foreign handler MCCanvasImageMakeWithPath(in pPath as string, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasImageMakeWithData(in pData as data, out rImage as Image) as undefined binds to "<builtin>"
foreign handler MCCanvasImageMakeWithPixels(in pWidth as integer, in pHeight as integer, in pPixels as data, out rImage as Image) as undefined binds to "<builtin>"

syntax MakeImage is prefix operator with precedence 4
	"image" "from" ( "file" <mPath: Expression> | "data" <mData: Expression> )
begin
	MCCanvasImageMakeWithPath(mPath, output)
	MCCanvasImageMakeWithData(mData, output)
end syntax

syntax MakeImageWithPixels is prefix operator with precedence 4
	"image" "of" "size" <mSize: ExpressionList> "with" "pixels" <mPixels: Expression>
begin
	MCCanvasImageMakeWithPixels(mSize[0], mSize[1], mPixels, output)
end syntax

//////////

// Properties

foreign handler MCCanvasImageGetWidth(in pImage as Image, out rWidth as integer) as undefined binds to "<builtin>"
foreign handler MCCanvasImageGetHeight(in pImage as Image, out rHeight as integer) as undefined binds to "<builtin>"
foreign handler MCCanvasImageGetMetadata(in pImage as Image, out rMetadata as array) as undefined binds to "<builtin>"
foreign handler MCCanvasImageGetPixels(in pImage as Image, out rPixels as data) as undefined binds to "<builtin>"

syntax ImageWidthProperty is prefix operator with precedence 4
	"the" "width" "of" <mImage: Expression>
begin
	MCCanvasImageGetWidth(mImage, output)
end syntax

syntax ImageHeightProperty is prefix operator with precedence 4
	"the" "height" "of" <mImage: Expression>
begin
	MCCanvasImageGetHeight(mImage, output)
end syntax

syntax ImageMetadataProperty is prefix operator with precedence 4
	"the" "metadata" "of" <mImage: Expression>
begin
	MCCanvasImageGetMetadata(mImage, output)
end syntax

syntax ImagePixelsProperty is prefix operator with precedence 4
	"the" "pixels" "of" <mImage: Expression>
begin
	MCCanvasImageGetPixels(mImage, output)
end syntax

//////////

// Operations

foreign handler MCCanvasImageTransform(inout xImage as Image, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasImageScale(inout xImage as Image, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasImageRotate(inout xImage as Image, in pRadians as real) as undefined binds to "<builtin>"
foreign handler MCCanvasImageCrop(inout xImage as Image, in pLeft as integer, in pTop as integer, in pRight as integer, in pBottom as integer) as undefined binds to "<builtin>"

syntax TransformImage is statement
	"transform" <mImage: Expression> "by" <mTransform: Expression>
begin
	MCCanvasImageTransform(mImage, mTransform)
end syntax

syntax ScaleImage is statement
	"scale" <mImage: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasImageScale(mImage, mScale[0], mScale[0])
	MCCanvasImageScale(mImage, mScale[0], mScale[1])
end syntax

syntax RotateImage is statement
//	"rotate" <mImage: Expression> "by" ( <mRadians: ValueInDegrees> | <mRadians: Expression> "radians" )
	"rotate" <mImage: Expression> "by" <mRadians: Expression>
begin
	MCCanvasImageRotate(mImage, mRadians)
end syntax

syntax CropImage is statement
	"crop" <mImage: Expression> "to" <mRect: ExpressionList>
begin
	MCCanvasImageCrop(mImage, mRect[0], mRect[1], mRect[2], mRect[3])
end syntax

////////////////////////////////////////////////////////////////////////////////

// Path

// Constructors

foreign handler MCCanvasPathMakeWithString(in pString as string, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePath is prefix operator with precedence 4
	"path" <mString: Expression>
begin
	MCCanvasPathMakeWithString(mString, output)
end syntax

// Primitive Constructors

foreign handler MCCanvasPathMakeWithRoundedRectangle(in pLeft as real, in pTop as real, in pRight as real, in pBottom as real, in pRadiusX as real, in pRadiusY as real, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithRectangle(in pLeft as real, in pTop as real, in pRight as real, in pBottom as real, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithCircle(in pX as real, in pY as real, in pRadius as real, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithEllipse(in pX as real, in pY as real, in pRadiusX as real, in pRadiusY as real, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithLine(in pStartX as real, in pStartY as real, in pEndX as real, in pEndY as real, out rPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathMakeWithPoints(in pPoints as list, in pClose as boolean, out rPath as Path) as undefined binds to "<builtin>"

syntax MakePathWithRoundedRectangle is prefix operator with precedence 4
	"rounded" "rectangle" <mRect: ExpressionList> "with" ( "radius" <mRadius: Expression> | "radii" <mRadii: ExpressionList> )
begin
	MCCanvasPathMakeWithRoundedRectangle(mRect[0], mRect[1], mRect[2], mRect[3], mRadius, mRadius, output)
	MCCanvasPathMakeWithRoundedRectangle(mRect[0], mRect[1], mRect[2], mRect[3], mRadii[0], mRadii[1], output)
end syntax

//////////

// Properties

foreign handler MCCanvasPathGetSubpaths(in pPath as Path, in pStart as integer, in pEnd as integer, out rSubpaths as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasPathGetPoints(in pPath as Path, in pStart as integer, in pEnd as integer, out rPoints as list) as undefined binds to "<builtin>"
foreign handler MCCanvasPathGetBoundingBox(in pPath as Path, out rRect as list) as undefined binds to "<builtin>"
foreign handler MCCanvasPathGetInstructions(in pPath as Path, in pStart as integer, in pEnd as integer, out rInstructions as list) as undefined binds to "<builtin>"

syntax PathSubpathProperty is prefix operator with precedence 4
	"subpath" ( <mStart: Expression> "to" <mEnd: Expression> | <mIndex: Expression> ) "of" <mPath: Expression>
begin
	MCCanvasPathGetSubpaths(mPath, mStart, mEnd, output)
	MCCanvasPathGetSubpaths(mPath, mIndex, mIndex, output)
end syntax

syntax PathPointsProperty is prefix operator with precedence 4
	"point" ( <mStart: Expression> "to" <mEnd: Expression> | <mIndex: Expression> ) "of" <mPath: Expression>
begin
	MCCanvasPathGetPoints(mPath, mStart, mEnd, output)
	MCCanvasPathGetPoints(mPath, mIndex, mIndex, output)
end syntax

syntax PathBoundingBoxProperty is prefix operator with precedence 4
	"bounding" "box" "of" <mPath: Expression>
begin
	MCCanvasPathGetBoundingBox(mPath, output)
end syntax

syntax PathInstructionProperty is prefix operator with precedence 4
	"instruction" ( <mStart: Expression> "to" <mEnd: Expression> | <mIndex: Expression> ) "of" <mPath: Expression>
begin
	MCCanvasPathGetInstructions(mPath, mStart, mEnd, output)
	MCCanvasPathGetInstructions(mPath, mIndex, mIndex, output)
end syntax

//////////

// Operations

foreign handler MCCanvasPathTransform(inout xPath as Path, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasPathScale(inout xPath as Path, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasPathRotate(inout xPath as Path, in pRadians as real) as undefined binds to "<builtin>"
foreign handler MCCanvasPathTranslate(inout xPath as Path, in pX as real, in pY as real) as undefined binds to "<builtin>"

foreign handler MCCanvasPathAddPath(inout xPathA as Path, in pPathB as Path) as undefined binds to "<builtin>"

syntax TransformPath is statement
	"transform" <mPath: Expression> "by" <mTransform: Expression>
begin
	MCCanvasPathTransform(mPath, mTransform)
end syntax

syntax ScalePath is statement
	"scale" <mPath: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasPathScale(mPath, mScale[0], mScale[0])
	MCCanvasPathScale(mPath, mScale[0], mScale[1])
end syntax

syntax RotatePath is statement
//	"rotate" <mPath: Expression> "by" ( <mRadians: ValueInDegrees> | <mRadians: Expression> "radians" )
	"rotate" <mPath: Expression> "by" <mRadians: Expression>
begin
	MCCanvasPathRotate(mPath, mRadians)
end syntax

syntax TranslatePath is statement
	"translate" <mPath: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasPathTranslate(mPath, mTranslation[0], mTranslation[1])
end syntax

syntax AddPath is statement
	"add" <mPathB: Expression> "to" <mPathA: Expression>
begin
	MCCanvasPathAddPath(mPathA, mPathB)
end syntax


////////////////////////////////////////////////////////////////////////////////

// Graphic Effect

// Constructors

foreign handler MCCanvasGraphicEffectMakeWithPropertyArray(in pType as integer, in pProperties as array, out rGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

syntax GraphicEffectType is phrase
	( "color" "overlay" <mType=1> | "inner" "shadow" <mType=2> | "outer" "shadow" <mType=3> | "inner" "glow" <mType=4> | "outer" "glow" <mType=5> )
begin
end syntax

syntax MakeGraphicEffectWithProperties is prefix operator with precedence 4
	<mType: GraphicEffectType> <mProperties: Expression>
begin
	MCCanvasGraphicEffectMakeWithPropertyArray(mType, mProperties, output)
end syntax

//////////

// Properties

foreign handler MCCanvasGraphicEffectGetTypeAsString(in pGraphicEffect as GraphicEffect, out rType as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetColor(in pGraphicEffect as GraphicEffect, out rColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetColor(inout xGraphicEffect as GraphicEffect, in pColor as Color) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetBlendModeAsString(in pGraphicEffect as GraphicEffect, out rBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetBlendModeAsString(inout xGraphicEffect as GraphicEffect, in pBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetOpacity(in pGraphicEffect as GraphicEffect, out rOpacity as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetOpacity(inout xGraphicEffect as GraphicEffect, in pOpacity as real) as undefined binds to "<builtin>"

//MCCanvasGraphicEffectGetFilterAsString(in pGraphicEffect as GraphicEffect, out rFilter as string) as undefined binds to "<builtin>"
//MCCanvasGraphicEffectSetFilterAsString(inout xGraphicEffect as GraphicEffect, in pFilter as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetSize(in pGraphicEffect as GraphicEffect, out rSize as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetSize(inout xGraphicEffect as GraphicEffect, in pSize as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetSpread(in pGraphicEffect as GraphicEffect, out rSpread as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetSpread(inout xGraphicEffect as GraphicEffect, in pSpread as real) as undefined binds to "<builtin>"

foreign handler MCCanvasGraphicEffectGetDistance(in pGraphicEffect as GraphicEffect, out rDistance as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetDistance(inout xGraphicEffect as GraphicEffect, in pDistance as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectGetAngle(in pGraphicEffect as GraphicEffect, out rAngle as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGraphicEffectSetAngle(inout xGraphicEffect as GraphicEffect, in pAngle as real) as undefined binds to "<builtin>"

syntax GraphicEffectTypeProperty is prefix operator with precedence 4
	"the" "type" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetTypeAsString(mGraphicEffect, output)
end syntax

syntax GraphicEffectColorProperty is prefix operator with precedence 4
	"the" "color" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetColor(mGraphicEffect, output)
	MCCanvasGraphicEffectSetColor(mGraphicEffect, input)
end syntax

syntax GraphicEffectBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetBlendModeAsString(mGraphicEffect, output)
	MCCanvasGraphicEffectSetBlendModeAsString(mGraphicEffect, input)
end syntax

syntax GraphicEffectOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetOpacity(mGraphicEffect, output)
	MCCanvasGraphicEffectSetOpacity(mGraphicEffect, input)
end syntax

syntax GraphicEffectSizeProperty is prefix operator with precedence 4
	"the" "size" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetSize(mGraphicEffect, output)
	MCCanvasGraphicEffectSetSize(mGraphicEffect, input)
end syntax

syntax GraphicEffectSpreadProperty is prefix operator with precedence 4
	"the" "spread" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetSpread(mGraphicEffect, output)
	MCCanvasGraphicEffectSetSpread(mGraphicEffect, input)
end syntax

syntax GraphicEffectDistanceProperty is prefix operator with precedence 4
	"the" "distance" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetDistance(mGraphicEffect, output)
	MCCanvasGraphicEffectSetDistance(mGraphicEffect, input)
end syntax

syntax GraphicEffectAngleProperty is prefix operator with precedence 4
	"the" "angle" "of" <mGraphicEffect: Expression>
begin
	MCCanvasGraphicEffectGetAngle(mGraphicEffect, output)
	MCCanvasGraphicEffectSetAngle(mGraphicEffect, input)
end syntax

////////////////////////////////////////////////////////////////////////////////

// Canvas

// Properties

foreign handler MCCanvasGetPaint(in pCanvas as Canvas, out rPaint as Paint) as undefined binds to "<builtin>"
foreign handler MCCanvasSetPaint(inout xCanvas as Canvas, in pPaint as Paint) as undefined binds to "<builtin>"
foreign handler MCCanvasGetFillRuleAsString(in pCanvas as Canvas, out rFillRule as string) as undefined binds to "<builtin>"
foreign handler MCCanvasSetFillRuleAsString(inout xCanvas as Canvas, in pFillRule as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGetAntialias(in pCanvas as Canvas, out rAntialias as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasSetAntialias(inout xCanvas as Canvas, in pAntialias as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGetOpacity(in pCanvas as Canvas, out rOpacity as real) as undefined binds to "<builtin>"
foreign handler MCCanvasSetOpacity(inout xCanvas as Canvas, in pOpacity as real) as undefined binds to "<builtin>"
foreign handler MCCanvasGetBlendModeAsString(in pCanvas as Canvas, out rBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasSetBlendModeAsString(inout xCanvas as Canvas, in pBlendMode as string) as undefined binds to "<builtin>"
foreign handler MCCanvasGetStippled(in pCanvas as Canvas, out rStippled as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasSetStippled(inout xCanvas as Canvas, in pStippled as boolean) as undefined binds to "<builtin>"
foreign handler MCCanvasGetGraphicEffect(in pCanvas as Canvas, out rGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"
foreign handler MCCanvasSetGraphicEffect(inout xCanvas as Canvas, in pGraphicEffect as GraphicEffect) as undefined binds to "<builtin>"

syntax CanvasPaintProperty is prefix operator with precedence 4
	"the" "paint" "of" <mCanvas: Expression>
begin
	MCCanvasGetPaint(mCanvas, output)
	MCCanvasSetPaint(mCanvas, input)
end syntax

syntax CanvasFillRuleProperty is prefix operator with precedence 4
	"the" "fill" "rule" "of" <mCanvas: Expression>
begin
	MCCanvasGetFillRuleAsString(mCanvas, output)
	MCCanvasSetFillRuleAsString(mCanvas, input)
end syntax

syntax CanvasAntialiasProperty is prefix operator with precedence 4
	"the" "antialias" "of" <mCanvas: Expression>
begin
	MCCanvasGetAntialias(mCanvas, output)
	MCCanvasSetAntialias(mCanvas, input)
end syntax

syntax CanvasOpacityProperty is prefix operator with precedence 4
	"the" "opacity" "of" <mCanvas: Expression>
begin
	MCCanvasGetOpacity(mCanvas, output)
	MCCanvasSetOpacity(mCanvas, input)
end syntax

syntax CanvasBlendModeProperty is prefix operator with precedence 4
	"the" "blend" "mode" "of" <mCanvas: Expression>
begin
	MCCanvasGetBlendModeAsString(mCanvas, output)
	MCCanvasSetBlendModeAsString(mCanvas, input)
end syntax

syntax CanvasStippledProperty is prefix operator with precedence 4
	"the" "stippled" "of" <mCanvas: Expression>
begin
	MCCanvasGetStippled(mCanvas, output)
	MCCanvasSetStippled(mCanvas, input)
end syntax

syntax CanvasGraphicEffectProperty is prefix operator with precedence 4
	"the" "graphic" "effect" "of" <mCanvas: Expression>
begin
	MCCanvasGetGraphicEffect(mCanvas, output)
	MCCanvasSetGraphicEffect(mCanvas, input)
end syntax

//////////

// Operations

foreign handler MCCanvasCanvasTransform(inout xCanvas as Canvas, in pTransform as Transform) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasScale(inout xCanvas as Canvas, in pScaleX as real, in pScaleY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasRotate(inout xCanvas as Canvas, in pAngle as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasTranslate(inout xCanvas as Canvas, in pX as real,in pY as real) as undefined binds to "<builtin>"

foreign handler MCCanvasCanvasSaveState(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasRestoreState(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasBeginLayer(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasEndLayer(inout xCanvas as Canvas) as undefined binds to "<builtin>"

foreign handler MCCanvasCanvasFill(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasFillPath(inout xCanvas as Canvas, in pPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasStroke(inout xCanvas as Canvas) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasStrokePath(inout xCanvas as Canvas, in pPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasClipToRect(inout xCanvas as Canvas, in pLeft as real, in pTop as real, in pRight as real, in pBottom as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasAddPath(inout xCanvas as Canvas, in pPath as Path) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasDrawImage(inout xCanvas, in pImage as Image, in pLeft as real, in pTop as real, in pRight as real, in pBottom as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasDrawRectOfImage(inout xCanvas, in pImage as Image, in pSrcLeft as real, in pSrcTop as real, in pSrcRight as real, in pSrcBottom as real, in pDstLeft as real, in pDstTop as real, in pDstRight as real, in pDstBottom as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasMoveTo(inout xCanvas as Canvas, in pX as real, in pY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasLineTo(inout xCanvas as Canvas, in pX as real, in pY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasCurveThroughPoint(inout xCanvas as Canvas, in pThroughX as real, in pThroughY as real, in pToX as real, in pToY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasCurveThroughPoints(inout xCanvas as Canvas, in pThroughAX as real, in pThroughAY as real, in pThroughBX as real, in pThroughBY as real, in pToX as real, in pToY as real) as undefined binds to "<builtin>"
foreign handler MCCanvasCanvasClosePath(inout xCanvas as Canvas) as undefined binds to "<builtin>"

syntax TransformCanvas is statement
	"transform" <mCanvas: Expression> "by" <mTransform: Expression>
begin
	MCCanvasCanvasTransform(mCanvas, mTransform)
end syntax

syntax ScaleCanvas is statement
	"scale" <mCanvas: Expression> "by" <mScale: ExpressionList>
begin
	MCCanvasCanvasScale(mCanvas, mScale[0], mScale[0])
	MCCanvasCanvasScale(mCanvas, mScale[0], mScale[1])
end syntax

syntax RotateCanvas is statement
	"rotate" <mCanvas: Expression> "by" <mAngle: Expression>
begin
	MCCanvasCanvasRotate(mCanvas, mAngle)
end syntax

syntax TranslateCanvas is statement
	"translate" <mCanvas: Expression> "by" <mTranslation: ExpressionList>
begin
	MCCanvasCanvasTranslate(mCanvas, mTranslation[0], mTranslation[1])
end syntax

syntax CanvasSaveState is statement
	"save" "state" "of" <mCanvas: Expression>
begin
	MCCanvasCanvasSaveState(mCanvas)
end syntax

syntax CanvasRestoreState is statement
	"restore" "state" "of" <mCanvas: Expression>
begin
	MCCanvasCanvasRestoreState(mCanvas)
end syntax

syntax CanvasBeginLayer is statement
	"begin" "layer" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasBeginLayer(mCanvas)
end syntax

syntax CanvasEndLayer is statement
	"end" "layer" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasEndLayer(mCanvas)
end syntax

syntax CanvasFill is statement
	"fill" ( <mPath: Expression> "on" ) <mCanvas: Expression>
begin
	MCCanvasCanvasFill(mCanvas)
	MCCanvasCanvasFillPath(mCanvas, mPath)
end syntax

syntax CanvasStroke is statement
	"stroke" ( <mPath: Expression> "on" ) <mCanvas: Expression>
begin
	MCCanvasCanvasStroke(mCanvas)
	MCCanvasCanvasStrokePath(mCanvas, mPath)
end syntax

syntax CanvasClip is statement
	"clip" "to" <mRect: ExpressionList> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasClipToRect(mCanvas, mRect[0], mRect[1], mRect[2], mRect[3])
end syntax

syntax CanvasMoveTo is statement
	"move" "to" <mPoint: ExpressionList> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasMoveTo(mCanvas, mPoint[0], mPoint[1])
end syntax

syntax CanvasLineTo is statement
	"line" "to" <mPoint: ExpressionList> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasLineTo(mCanvas, mPoint[0], mPoint[1])
end syntax

syntax CanvasCurveThrough is statement
	"curve" "through" <mThroughA: ExpressionList> [ "and" <mThroughB: ExpressionList> ] "to" <mPoint: ExpressionList> "on" <mCanvas: Expression>
begin
	MCCanvasCanvasCurveThroughPoint(mCanvas, mThroughA[0], mThroughA[1], mPoint[0], mPoint[1])
	MCCanvasCanvasCurveThroughPoints(mCanvas, mThroughA[0], mThroughA[1], mThroughB[0], mThroughB[1], mPoint[0], mPoint[1])
end syntax

syntax CanvasClosePath is statement
	"close" "path" "on" <mCanvas: Expression>
begin
	MCCanvasCanvasClosePath(mCanvas)
end syntax

////////////////////////////////////////////////////////////////////////////////

end module
