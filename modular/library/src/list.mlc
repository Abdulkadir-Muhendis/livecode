module com.livecode.list

foreign handler EvalHeadOf(in Target as list, out Value as any) as undefined binds to "<builtin>"
foreign handler EvalTailOf(in Target as list, out Value as any) as undefined binds to "<builtin>"

foreign handler ExecPushElementOnto(in Value as any, in IsFront as bool, inout Target as list) as undefined binds to "<builtin>"
foreign handler ExecPopElementInto(inout Source as list, in IsFront as bool, out Target as any) as undefined binds to "<builtin>"

foreign handler EvalNumberOfElementsIn(in Target as list, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheElementsOf(in Needle as any, in Target as list, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalContainsElements(in Target as list, in Needle as list, out Result as bool) as undefined binds to "<builtin>"

foreign handler FetchElementOf(in Index as index, in Target as list, out Value as any) as undefined binds to "<builtin>"
foreign handler StoreElementOf(in Value as any, in Index as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler FetchElementRangeOf(in Start as index, in Finish as index, in Target as list, out Value as list) as undefined binds to "<builtin>"
foreign handler StoreElementRangeOf(in Value as any, in Start as index, in Finish as index, inout Target as list) as undefined binds to "<builtin>"

foreign handler StoreBeforeElementOf(in Value as any, in Index as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler StoreAfterElementOf(in Value as any, in Index as index, inout Target as list) as undefined binds to "<builtin>"

foreign handler SpliceIntoElementRangeOf(in Source as list, in Start as index, in Finish as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler SpliceIntoElementOf(in Source as list, in Start as index, in Finish as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler SpliceBeforeElementOf(in Source as list, in Index as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler SpliceAfterElementOf(in Source as list, in Index as index, inout Target as list) as undefined binds to "<builtin>"

--

/*
Summary:        Returns the first element of <Target>.
Target:         An expression which evaluates to a list.
*/

syntax HeadOf is prefix operator with precedence 1
    "the" "head" "of" <Target: Expression>
begin
    EvalHeadOf(Target, output)
end syntax

/* 
Summary:        Returns the last element of <Target>.
Target:         An expression which evaluates to a list.
*/

syntax TailOf is prefix operator with precedence 1
    "the" "tail" "of" <Target: Expression>
begin
    EvalTailOf(Target, output)
end syntax

--

/* 
Summary:        Pushes <Value> onto <Target>, i.e. <Target> becomes the tail of the list,
                with an index one greater than the previous tail.
Value:          Any expression.
Target:         An expression which evaluates to a list.

*/

syntax PushOntoList is statement
    "push" <Value: Expression> "onto" [ "front" "of" <IsFront=true> | "back" "of" <IsFront=false> ] <Target:Expression>
begin
    ExecPushSingleElementOnto(Value, isFront, Target)
end syntax

/* 
Summary:        Pops the last element from <Source> into <Target>, i.e. the last element
                of the list is removed and put into the container <Target>.
Source:         An expression which evaluates to a list.
Target:         An expression which evaluates to a container.
*/

syntax PopList is statement
    "pop" [ "front" "of" <IsFront=true> | "back" "of" <IsFront=false> ] <Source: Expression> "into" <Target: Expression>
begin
    ExecPopElementInto(Source, IsFront, Target)
end syntax

--

/*
Summary:        Returns the number of elements in <Target>
Target:         An expression which evaluates to a list.
*/

syntax CountElementsOf is prefix operator with precedence 1
    "the" "number" "of" "elements" "in" <Target: Expression>
begin
    EvalNumberOfElementsIn(Target, output)
end syntax

--

/* 
Summary:        Determines if a given element is in <Target>
Needle:         Any expression.
Target:         An expression which evaluates to a list.
output:         Returns true if <Needle> can be found among the elements of <Target>, 
                i.e. if there is an index i for which <Needle> is element i of <Target> 
                would return true.
*/
                
syntax IsInElements is neutral binary operator with precedence 1
    <Needle: Expression> "is" "in" <Target: Expression>
begin
    EvalIsAmongTheElementsOf(Needle, Target, output)
end syntax

/* 
Summary:        Determines if <Target> contains <Needle> as a subsequence.
Needle:         Any expression which evaluates to a list.
Target:         An expression which evaluates to a list.
output:         Returns true if the elements of <Needle> occur as a subsequence of the elements of <Target>,
                and false otherwise.
*/
                
syntax ContainsElements is neutral binary operator with precedence 1
    <Target: Expression> "contains" <Target: Expression>
begin
    EvalContainsElements(Target, Needle, output)
end syntax

--

/*

Summary:            Designates the element at index <Index> in <Target>.
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.
output:             Either locates the element container at the given index for use as the target 
                    container of another operation, or evaluates the element at the given index 
                    as the source of another operation.
*/

syntax SingletonElementOf is prefix operator with precedence 1
	"element" <Index: Expression> "of" <Target: Expression>
begin
	FetchElementOf(Index, Target, output)
	StoreElementOf(input, Index, Target)
end syntax

/*

Summary:            Designates the elements between indices <Start> and <Finish> in <Target>.

Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to binary data.
output:             Either locates the element containers between the given indices for use as a 
                    single container for the target of another operation, or evaluates the elements
                    between the given indices as a list.


syntax RangeElementsOf is prefix operator with precedence 1
	"elements" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchElementRangeOf(Start, Finish, Target, output)
	StoreElementRangeOf(input, Start, Finish, Target)
end syntax

--

syntax BeforeElementOf is prefix operator with precedence 1
    "before" "element" <Index: Expression> "of" <Target: Expression>
begin
    StoreBeforeElementOf(input, Index, Target)
end syntax

syntax AfterElementOf is prefix operator with precedence 1
    "after" "element" <Index: Expression> "of" <Target: Expression>
begin
    StoreAfterElementOf(input, Index, Target)
end syntax

--

/*

Summary:            Removes the elements of <Target> from <Start > to <Finish> and inserts each of the elements of
                    <Source> into <Target> at <Start>.
Source:             An expression which evaluates to a list.
Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

*/

syntax SpliceIntoRange is statement
    "splice" <Source: Expression> "into" "element" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
    SpliceIntoElementRangeOf(Source, Start, Finish, Target)
end syntax

/*

Summary:            Removes the element of <Target> at <Index> and inserts each of the elements of <Source> into
                    <Target> at <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

*/

syntax SpliceIntoElement is statement
    "splice" <Source: Expression> "into" "element" <Index: Expression> "of" <Target: Expression>
begin
    SpliceIntoElementOf(Source, Start, Finish, Target)
end syntax

/*

Summary:            Inserts each of the elements of <Source> into <Target> before element at index <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

*/

syntax SpliceBeforeElement is statement
    "splice" <Source: Expression> "before" "element" <Index: Expression> "of" <Target: Expression>
begin
    SpliceBeforeElementOf(Source, Start, Finish, Target)
end syntax

/*

Summary:            Inserts each of the elements of <Source> into <Target> after element at index <Index>.
Source:             An expression which evaluates to a list.
Index:              An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a list.

*/

syntax SpliceAfterElement is statement
    "splice" <Source: Expression> "after" "element" <Index: Expression> "of" <Target: Expression>
begin
    SpliceAfterElementOf(Source, Start, Finish, Target)
end syntax

--

end module