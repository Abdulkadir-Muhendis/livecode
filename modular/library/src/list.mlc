module com.livecode.list

foreign handler EvalHeadOf(in Target as list, out Value as any) as undefined binds to "<builtin>"
foreign handler EvalTailOf(in Target as list, out Value as any) as undefined binds to "<builtin>"

foreign handler ExecPushSingleElementOnto(in Value as any, inout Target as list) as undefined binds to "<builtin>"
foreign handler ExecPushMultipleElementsOnto(in Value as list, inout Target as list) as undefined binds to "<builtin>"
foreign handler ExecPopElementInto(inout Source as list, out Target as any) as undefined binds to "<builtin>"

foreign handler ExecInsertSingleElementIntoListAt(in Value as any, inout Target as list, in Index as index) as undefined binds to "<builtin>"
foreign handler ExecInsertMultipleElementsIntoListAt(in Value as list, inout Target as list, in Index as index) as undefined binds to "<builtin>"

foreign handler EvalNumberOfElementsIn(in Target as list, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheElementsOf(in Needle as any, in IsNot as bool, in Target as list, out Result as bool) as undefined binds to "<builtin>"

foreign handler FetchElementOf(in Index as index, in Target as list, out Value as any) as undefined binds to "<builtin>"
foreign handler StoreElementOf(in Value as any, in Index as index, inout Target as list) as undefined binds to "<builtin>"
foreign handler FetchElementRangeOf(in Start as index, in Finish as index, in Target as list, out Value as list) as undefined binds to "<builtin>"
foreign handler StoreElementRangeOf(in Value as any, in Start as index, in Finish as index, inout Target as list) as undefined binds to "<builtin>"

--

/* 
Summary:        Returns the first element of <Target>.
Target:         An expression which evaluates to a list.
*/

syntax HeadOf is prefix operator with precedence 1
    "the" "head" "of" <Target: Expression>
begin
    EvalHeadOf(Target, output)
end syntax

/* 
Summary:        Returns the last element of <Target>.
Target:         An expression which evaluates to a list.
*/

syntax TailOf is prefix operator with precedence 1
    "the" "tail" "of" <Target: Expression>
begin
    EvalTailOf(Target, output)
end syntax

--

/* 
Summary:        Pushes <Value> onto <Target>, i.e. <Target> becomes the tail of the list,
                with an index one greater than the previous tail.
Value:          Any expression.
Target:         An expression which evaluates to a list.
*/

syntax PushOntoList is statement
    "push" <Value: Expression> "onto" <Target:Expression>
begin
    ExecPushSingleElementOnto(Value, Target)
end syntax

/* 
Summary:        Concatenates the lists <Target> and <Value>.
Value:          An expression which evaluates to a list.
Target:         An expression which evaluates to a list.
*/

syntax PushElementsOntoList is statement
    "push" "the" "elements" "of" <Value: Expression> "onto" <Target:Expression>
begin
    ExecPushMultipleElementsOnto(Value, Target)
end syntax

/* 
Summary:        Pops the last element from <Source> into <Target>, i.e. the last element
                of the list is removed and put into the container <Target>.
Source:         An expression which evaluates to a list.
Target:         An expression which evaluates to a container.
*/

syntax PopList is statement
    "pop" <Source: Expression> "into" <Target: Expression>
begin
    ExecPopElementInto(Source, Target)
end syntax

--

/*
Summary:        Inserts <Value> into <Target> at index <Index>. All preexisting elements at
                this index or above have their indices incremented by one.
Value:          Any expression.
Target:         An expression which evaluates to a list.
Index:          An expression which evaluates to a valid integer index of <Target>
*/

syntax InsertAt is statement
    "insert" <Value: Expression> "into" <Target: Expression> "at" "index" <Index: Expression>
begin
    ExecInsertSingleElementIntoListAt(Value, Target, Index)
end syntax

/*
Summary:        Inserts the elements of <Value> into <Target> at index <Index>. 
                All preexisting elements at this index or above have their indices incremented
                by the number of elements in <Value>.
Value:          An expression which evaluates to a list.
Target:         An expression which evaluates to a list.
Index:          An expression which evaluates to a valid integer index of <Target>
*/

syntax InsertElementsAt is statement
    "insert" "the" "elements" "of" <Value: Expression> "into" <Target: Expression> "at" "index" <Index: Expression>
begin
    ExecInsertMultipleElementsIntoListAt(Value, Target, Index)
end syntax

--

/*
Summary:        Returns the number of elements in <Target>
Target:         An expression which evaluates to a list.
*/

syntax CountElementsOf is prefix operator with precedence 1
    "the" "number" "of" "elements" "in" <Target: Expression>
begin
    EvalNumberOfElementsIn(Target, output)
end syntax

--

/* 
Summary:        Determines if a list contains a given element
Needle:         Any expression.
Target:         An expression which evaluates to a list.
output:         Returns true if <Needle> can be found among the elements of <Target>, 
                i.e. if there is an index i for which <Needle> is element i of <Target> 
                would return true.
*/
                
syntax AmongElementsOf is neutral binary operator with precedence 1
    <Needle: Expression> "is" ["not" <IsNot=true>] "among" "the" "elements" "of" <Target: Expression>
begin
    EvalIsAmongTheElementsOf(Needle, IsNot, Target, output)
end syntax

--

/*

Summary:            Designates the element at index <Index> in <Target>.
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a list.
output:             Either locates the element container at the given index for use as the target 
                    container of another operation, or evaluates the element at the given index 
                    as the source of another operation.
*/

syntax SingletonElementOf is prefix operator with precedence 1
	"element" <Index: Expression> "of" <Target: Expression>
begin
	FetchElementOf(Index, Target, output)
	StoreElementOf(input, Index, Target)
end syntax

/*

Summary:            Designates the elements between indices <Start> and <Finish> in <Target>.

Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to binary data.
output:             Either locates the element containers between the given indices for use as a 
                    single container for the target of another operation, or evaluates the elements
                    between the given indices as a list.

*/

syntax RangeElementsOf is prefix operator with precedence 1
	"elements" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchElementRangeOf(Start, Finish, Target, output)
	StoreElementRangeOf(input, Start, Finish, Target)
end syntax

--

end module