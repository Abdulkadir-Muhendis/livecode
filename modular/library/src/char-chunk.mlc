module com.livecode.charchunk

foreign handler FetchCharOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreCharOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchCharRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreCharRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfCharsIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheCharsOf(in Needle as string, in Source as string, out Value as bool) as undefined binds to "<builtin>"

--

/*
Summary:            Counts the number of chars in <Target>.

Target: 			An expression which evaluates to a string.

Example: 			

	repeat with x = 1 to the number of chars in tString
		// do something
	end repeat
*/

syntax CountCharsOf is prefix operator with precedence 1
	"the" "number" "of" "chars" "in" <Target: Expression>
begin
	EvalNumberOfCharsIn(Target, output)
end syntax

--

/*

Summary:            Designates the char at index <Index> in <Target>.
Index: 				An expression which evaluates to a valid integer index of <Target>.
Target:				An expression which evaluates to a string.
output:             Either locates the char at the given index either for use as the target container of another operation, 
                    or evaluates the char at the given index as the source of another operation.

Example: 			delete char 5 of tString // Locates char 5 and removes it from tString
Example: 			get char 5 of tString // Evaluates char 5

*/

syntax SingletonCharOf is prefix operator with precedence 1
	"char" <Index: Expression> "of" <Target: Expression>
begin
	FetchCharOf(Index, Target, output)
	StoreCharOf(input, Index, Target)
end syntax

/*

Summary:            Designates the chars between indices <Start> and <Finish> in <Target>.

Start:              An expression which evaluates to a valid integer index of <Target>.
Finish:             An expression which evaluates to a valid integer index of <Target>.
Target:             An expression which evaluates to a string.
output:             Either locates the chars between the given indices either for use as the target container of another operation, 
                    or evaluates the chars at the given indices as the source of another operation.
                    
Example: 			put tChars into char 5 to 10 of tString // Locates chars 5 to 10 of tString and replace them with tChars
Example: 			get char 5 to 10 of tString // Evaluates chars 5 to 10

*/

syntax RangeCharOf is prefix operator with precedence 1
	"char" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchCharRangeOf(Start, Finish, Target, output)
	StoreCharRangeOf(input, Start, Finish, Target)
end syntax

--

/*
Summary:            Determines whether <Needle> is in <Source>.
Needle: 			An expression which evaluates to a char.
Target: 			An expression which evaluates to a string.
output:             True if <Needle> is among the chars of <Target>, and false otherwise.
*/

syntax CharIsIn is neutral binary operator with precedence 1
    <Needle: Expression> "is" "in" <Source: Expression>
begin
    EvalIsAmongTheCharsOf(Needle, Source, output)
end syntax

--

end module