module com.livecode.linechunk

foreign handler FetchLineOf(in Index as index, in Target as string, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreLineOf(in Value as string, in Index as index, inout Target as string) as undefined binds to "<builtin>"
foreign handler FetchLineRangeOf(in Start as index, in Finish as index, in Target as data, out Value as string) as undefined binds to "<builtin>"
foreign handler StoreLineRangeOf(in Value as string, in Start as index, in Finish as index, inout Target as string) as undefined binds to "<builtin>"

foreign handler EvalNumberOfLinesIn(in Target as string, out Count as index) as undefined binds to "<builtin>"

foreign handler EvalIsAmongTheLinesOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"
foreign handler EvalIsNotAmongTheLinesOf(in Needle as string, in Target as string, out Result as bool) as undefined binds to "<builtin>"

foreign handler EvalOffsetOfLineIn(in Needle as string, in Target as string, out Offset as index) as undefined binds to "<builtin>"

--

syntax SingletonLineOf is left unary operator with precedence 1
	"line" <Index: Expression> "of" <Target: Expression>
begin
	FetchLineOf(Index, Target, output)
	StoreLineOf(input, Index, Target)
end syntax

syntax RangeLineOf is left unary operator with precedence 1
	"line" <Start: Expression> "to" <Finish: Expression> "of" <Target: Expression>
begin
	FetchLineRangeOf(Start, Finish, Target, output)
	StoreLineRangeOf(input, Start, Finish, Target)
end syntax

syntax CountLinesOf is left unary operator with precedence 1
	"the" "number" "of" "lines" "in" <Target: Expression>
begin
	EvalNumberOfLinesIn(Target, output)
end syntax

syntax AmongLinesOf is left unary operator with precedence 1
	<Needle: Expression> "is" "among" "the" "lines" "of" <Target: Expression>
begin
	EvalIsAmongTheLinesOf(Needle, Target, output)
end syntax

syntax NotAmongLinesOf is left unary operator with precedence 1
	<Needle: Expression> "is" "not" "among" "the" "lines" "of" <Target: Expression>
begin
	EvalIsNotAmongTheLinesOf(Needle, Target, output)
end syntax

syntax LineOffset is left unary operator with precedence 1
	"the" "offset" "of" "line" <Needle: Expression> "in" <Target: Expression>
begin
	EvalOffsetOfLineIn(Needle, Target, output)
end syntax

--

end module