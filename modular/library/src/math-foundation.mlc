module com.livecode.mathfoundation

--

foreign handler ExecRoundRealToNearest(inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecRoundNumberToNearest(inout Target as number) as undefined binds to "<builtin>"
foreign handler ExecRoundRealDown(inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecRoundNumberDown(inout Target as number) as undefined binds to "<builtin>"
foreign handler ExecRoundRealUp(inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecRoundNumberUp(inout Target as number) as undefined binds to "<builtin>"
foreign handler EvalFloorOfReal(in Target as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalFloorOfNumber(in Target as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalCeilOfReal(in Target as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalCeilOfNumber(in Target as number, out Value as number) as undefined binds to "<builtin>"

--

public constant pi = 3.14159265358979323846

--

/* 
Summary:    Rounds <Target> to the nearest integer, i.e. the greatest integer less than 
            or equal to <Target>, or the least integer greater than or equal to <Target> 
            depending on which is closest.
            If <Target> is exactly halfway between two integers, rounds to the one with greatest
            absolute value.

Target:     An expression that evaluates to a number.

*/

syntax RoundToNearest is statement
    "round" <Target: Expression>
begin 
    ExecRoundRealToNearest(Target)
    ExecRoundNumberToNearest(Target)
end syntax

/* 
Summary:    Rounds <Target> to the greatest integer less than or equal to <Target>.

Target:     An expression that evaluates to a number.

*/

syntax RoundDown is statement
    "round" <Target: Expression>
begin 
    ExecRoundRealDown(Target)
    ExecRoundNumberDown(Target)
end syntax

/* 
Summary:    Rounds <Target> to the least integer greater than or equal to <Target>.

Target:     An expression that evaluates to a number.

*/

syntax RoundUp is statement
    "round" <Target: Expression>
begin 
    ExecRoundRealUp(Target)
    ExecRoundNumberUp(Target)
end syntax

--

/* 
Summary:    Returns the floor of <Target>.
Target:     An expression that evaluates to a number.
output:     The greatest integer less than or equal to <Target>.

*/


syntax FloorOperator is prefix operator with precedence 1
    "the" "floor" "of" <Target: Expression>
begin
    EvalFloorOfReal(Target, output)
    EvalFloorOfNumber(Target, output)
end syntax

/* 
Summary:    Returns the ceiling of <Target>.
Target:     An expression that evaluates to a number.
output:     The least integer greater than or equal to <Target>.

*/

syntax CeilOperator is prefix operator with precedence 1
    "the" "ceil" "of" <Target: Expression>
begin
    EvalCeilOfReal(Target, output)
    EvalCeilOfNumber(Target, output)
end syntax

end module