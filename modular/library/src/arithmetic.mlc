module com.livecode.arithmetic

--

foreign handler ExecAddIntegerToInteger(in Value, inout Target) as undefined binds to "<builtin>"
foreign handler ExecAddRealToReal(in Value as real, inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecAddNumberToNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
foreign handler ExecSubtractIntegerFromInteger(in Value as integer, inout Target as integer) as undefined binds to "<builtin>"
foreign handler ExecSubtractRealFromReal(in Value as real, inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecSubtractNumberFromNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
foreign handler ExecMultiplyIntegerByInteger(in Value as integer, inout Target as integer) as undefined binds to "<builtin>"
foreign handler ExecMultiplyRealByReal(in Value as real, inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecMultiplyNumberByNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"
foreign handler ExecDivideIntegerByInteger(in Value as integer, inout Target as integer) as undefined binds to "<builtin>"
foreign handler ExecDivideRealByReal(in Value as real, inout Target as real) as undefined binds to "<builtin>"
foreign handler ExecDivideNumberByNumber(in Value as number, inout Target as number) as undefined binds to "<builtin>"

foreign handler EvalPlusInteger(in Operand as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalPlusReal(in Operand as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalPlusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalMinusInteger(in Operand as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalMinusReal(in Operand as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalMinusNumber(in Operand as number, out Value as number) as undefined binds to "<builtin>"

foreign handler EvalIntegerPlusInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealPlusReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberPlusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalIntegerMinusInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealMinusReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberMinusNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalIntegerTimesInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealTimesReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberTimesNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalIntegerOverInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealOverReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberOverNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

foreign handler EvalIntegerModInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealModReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberModNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"
foreign handler EvalIntegerWrapInteger(in Left as integer, in Right as integer, out Value as integer) as undefined binds to "<builtin>"
foreign handler EvalRealWrapReal(in Left as real, in Right as real, out Value as real) as undefined binds to "<builtin>"
foreign handler EvalNumberWrapNumber(in Left as number, in Right as number, out Value as number) as undefined binds to "<builtin>"

foreign handler EvalIntegerIsGreaterThanInteger(in Left as integer, in Right as integer, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalRealIsGreaterThanReal(in Left as real, in Right as real, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalNumberIsGreaterThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalIntegerIsGreaterThanOrEqualToInteger(in Left as integer, in Right as integer, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalRealIsGreaterThanOrEqualToReal(in Left as real, in Right as real, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalNumberIsGreaterThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalIntegerIsLessThanInteger(in Left as integer, in Right as integer, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalRealIsLessThanReal(in Left as real, in Right as real, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalNumberIsLessThanNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalIntegerIsLessThanOrEqualToInteger(in Left as integer, in Right as integer, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalRealIsLessThanOrEqualToReal(in Left as real, in Right as real, out Value as bool) as undefined binds to "<builtin>"
foreign handler EvalNumberIsLessThanOrEqualToNumber(in Left as number, in Right as number, out Value as bool) as undefined binds to "<builtin>"

--

syntax AddNumberTo is statement
    "add" <Value: Expression> "to" <Target: Expression>
begin
    ExecAddIntegerToInteger(Value, Target)
    ExecAddRealToReal(Value, Target)
    ExecAddNumberToNumber(Value, Target)
end syntax

syntax SubtractNumberFrom is statement
    "subtract" <Value: Expression> "from" <Target: Expression>
begin
    ExecSubtractIntegerFromInteger(Value, Target)
    ExecSubtractRealFromReal(Value, Target)
    ExecSubtractNumberFromNumber(Value, Target)
end syntax

syntax MultiplyNumberBy is statement
    "multiply" <Value: Expression> "by" <Target: Expression>
begin
    ExecMultiplyIntegerByInteger(Value, Target)
    ExecMultiplyRealByReal(Value, Target)
    ExecMultiplyNumberByNumber(Value, Target)
end syntax

syntax DivideNumberBy is statement
    "divide" <Value: Expression> "by" <Target: Expression>
begin
    ExecDivideIntegerByInteger(Value, Target)
    ExecDivideRealByReal(Value, Target)
    ExecDivideNumberByNumber(Value, Target)
end syntax

--

syntax PlusUnaryOperator is prefix operator with precedence 1
    "+" <Operand: Expression>
begin
    EvalPlusInteger(Operand, output)
    EvalPlusReal(Operand, output)
    EvalPlusNumber(Operand, output)
end syntax

syntax MinusUnaryOperator is prefix operator with precedence 1
    "-" <Operand: Expression>
begin
    EvalMinusInteger(Operand, output)
    EvalMinusReal(Operand, output)
    EvalMinusNumber(Operand, output)
end syntax

--

syntax PlusOperator is left binary operator with precedence 2
    <Left: Expression> "+" <Right: Expression>
begin
    EvalIntegerPlusInteger(Left, Right, output)
    EvalRealPlusReal(Left, Right, output)
    EvalNumberPlusNumber(Left, Right, output)
end syntax

syntax MinusOperator is left binary operator with precedence 2
    <Left: Expression> "-" <Right: Expression>
begin
    EvalIntegerMinusInteger(Left, Right, output)
    EvalRealMinusReal(Left, Right, output)
    EvalNumberPlusNumber(Left, Right, output)
end syntax

syntax TimesOperator is left binary operator with precedence 1
    <Left: Expression> "*" <Right: Expression>
begin
    EvalIntegerTimesInteger(Left, Right, output)
    EvalRealTimesReal(Left, Right, output)
    EvalNumberTimesNumber(Left, Right, output)
end syntax

syntax OverOperator is left binary operator with precedence 1
    <Left: Expression> "/" <Right: Expression>
begin
    EvalIntegerOverInteger(Left, Right, output)
    EvalRealOverReal(Left, Right, output)
    EvalNumberOverNumber(Left, Right, output)
end syntax

--

syntax ModOperator is neutral binary operator with precedence 1
    <Left: Expression> "mod" <Right: Expression>
begin
    EvalIntegerModInteger(Left, Right, output)
    EvalRealModReal(Left, Right, output)
    EvalNumberModNumber(Left, Right, output)
end syntax

syntax WrapOperator is neutral binary operator with precedence 1
    <Left: Expression> "wrap" <Right: Expression>
begin
    EvalIntegerWrapInteger(Left, Right, output)
    EvalRealWrapReal(Left, Right, output)
    EvalNumberWrapNumber(Left, Right, output)
end syntax

--

syntax IsGreaterThan is neutral binary operator with precedence 3
    <Left: Expression> ">" <Right: Expression>
begin
    EvalIntegerIsGreaterThanInteger(Left, Right, output)
    EvalRealIsGreaterThanReal(Left, Right, output)
    EvalNumberIsGreaterThanNumber(Left, Right, output)
end syntax

syntax IsGreaterThanOrEqualTo is neutral binary operator with precedence 3
    <Left: Expression> ">=" <Right: Expression>
begin
    EvalIntegerIsGreaterThanOrEqualToInteger(Left, Right, output)
    EvalRealIsGreaterThanOrEqualToReal(Left, Right, output)
    EvalNumberIsGreaterThanOrEqualToNumber(Left, Right, output)
end syntax

syntax IsLessThan is neutral binary operator with precedence 3
    <Left: Expression> "<" <Right: Expression>
begin
    EvalIntegerIsLessThanInteger(Left, Right, output)
    EvalRealIsLessThanReal(Left, Right, output)
    EvalNumberIsLessThanNumber(Left, Right, output)
end syntax

syntax IsLessThanOrEqualTo is neutral binary operator with precedence 3
    <Left: Expression> "<=" <Right: Expression>
begin
    EvalIntegerIsLessThanOrEqualToInteger(Left, Right, output)
    EvalRealIsLessThanOrEqualToReal(Left, Right, output)
    EvalNumberIsLessThanOrEqualToNumber(Left, Right, output)
end syntax

--

end module